import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import com.dassault_systemes.enovia.enterprisechangemgt.common.ChangeConstants;
import com.dec.util.DecConstants;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.program.ProgramCentralConstants;
import com.matrixone.apps.program.ProgramCentralUtil;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;
/*
**  decRequest
**
**  Copyright (c) 1992-2020 Dassault Systemes.
**  All Rights Reserved.
**  This program contains proprietary and trade secret information of MatrixOne,
**  Inc.  Copyright notice is precautionary only
**  and does not evidence any actual or intended publication of such program
**
**   This JPO contains the implementation of decRequest
*/
public class decRequest_mxJPO {
	
    public Map getRequestTypeRange(Context context, String[] args) throws Exception {
    	HashMap programMap = (HashMap) JPO.unpackArgs(args);
		Map rangeMap = new HashMap();
		StringList fieldRangeValue = new StringList();
        StringList fieldDisplayRangeValue = new StringList();
        String sLanguage = context.getSession().getLanguage();
        
        fieldRangeValue.add("Inquiry");
		fieldDisplayRangeValue.add(EnoviaResourceBundle.getProperty(context, "ProgramCentral","emxProgramCentral.Label.Inquiry", sLanguage));
		fieldRangeValue.add("Request");
		fieldDisplayRangeValue.add(EnoviaResourceBundle.getProperty(context, "ProgramCentral","emxProgramCentral.Label.Request", sLanguage));
		
		rangeMap.put("field_choices",fieldRangeValue);
		rangeMap.put("field_display_choices",fieldDisplayRangeValue);	
		return rangeMap;
    }
    
    @com.matrixone.apps.framework.ui.CreateProcessCallable
    public Map createRequest(Context context, String[] args) throws Exception{
        HashMap programMap = (HashMap) JPO.unpackArgs(args); // get data
        HashMap requestValue = (HashMap) programMap.get(ChangeConstants.REQUEST_VALUES_MAP);
        HashMap requestMap = (HashMap) programMap.get(ChangeConstants.REQUEST_MAP);

        String sTitle = (String) programMap.get("Title");
        String sdecType = (String) programMap.get("decType");
        String sContentText = (String) programMap.get("Content Text");
		String sName = "";
        String busId ="";
        Map returnMap = new HashMap();
        DomainObject doNew = new DomainObject();
        String sType = "decRequest";
        String sPolicy = "decExist";

        try {
            ContextUtil.startTransaction(context, true);

            sName = DomainObject.getAutoGeneratedName(context,"type_decRequest","");
            doNew.createObject(context, sType, sName, "-", sPolicy, "eService Production");
            doNew.setAttributeValue(context, "Title", sTitle);
            doNew.setAttributeValue(context, "decType", sdecType);
            doNew.setAttributeValue(context, "Content Text", sContentText);
            doNew.setAttributeValue(context, "Originator", context.getUser());
            busId = doNew.getId(context);
            returnMap.put(ChangeConstants.ID, busId);
           
            ContextUtil.commitTransaction(context);
        } catch (Exception e) {
            ContextUtil.abortTransaction(context);
            e.printStackTrace();
            throw new FrameworkException(e);
        }
        return returnMap;
    }

    @com.matrixone.apps.framework.ui.ProgramCallable
    public MapList getRequest (Context context,String[] age) throws Exception {
    	
    	String loginUser = context.getUser();
    	
        StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
		busSelects.add(DomainConstants.SELECT_NAME);
		busSelects.add(DomainConstants.SELECT_ORIGINATOR);
		busSelects.add("to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member|" + DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE + "==PIM].to." + DecConstants.SELECT_NAME);//PIM 여부

        MapList MlDocuments = DomainObject.findObjects(context,"decRequest",null,null,busSelects);

		MapList newMLDocuments = new MapList();
		
		for(int i=0;i<MlDocuments.size();i++){
			HashMap Hashmap = (HashMap) MlDocuments.get(i);
			String Originator = (String) Hashmap.get(DomainConstants.SELECT_ORIGINATOR);
			String projectAdmin = (String) Hashmap.get("to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member].to." + DecConstants.SELECT_NAME);
			//SystemAdmin 혹은 작성자만 혹은 PIM 만 조회 가능
			if(context.isAssigned("decSystemAdmin") || loginUser.equalsIgnoreCase(Originator) || (ProgramCentralUtil.isNotNullString(projectAdmin) && projectAdmin.contains(loginUser))) {
				newMLDocuments.add(Hashmap);
			}
		}

		return newMLDocuments;
    }
    
    public boolean isRequestEditAvailable(Context context, String args[]) throws Exception {//문의/제안 수정 가능 여부
        //Originator 만 true
    	Map programMap = JPO.unpackArgs(args);
    	boolean isRequestOriginator = false;
    	String objectId = (String) programMap.get("objectId");
    	
    	if(ProgramCentralUtil.isNotNullString(objectId)) {
    		DomainObject object = new DomainObject(objectId);
        	String loginUser = context.getUser();
        	String Originator = (String) object.getAttributeValue(context, DecConstants.ATTRIBUTE_ORIGINATOR);
        	String requestStatus = (String) object.getInfo(context, DecConstants.SELECT_CURRENT);
        	
    		if(loginUser.equalsIgnoreCase(Originator) && requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_CREATE)) {//접수 작성자이면서 작성중(Create) 상태일 경우에만 접수
    			isRequestOriginator = true;
    		} else if(context.isAssigned("decSystemAdmin") && 
    				(requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_REQUEST) || requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_CREATE))) {
    			isRequestOriginator = true;
    		}
    	} 
    	
		return isRequestOriginator;
	}
    
    public boolean isRequestRequestAvailable(Context context, String args[]) throws Exception {//문의/제안 요청(상태) 가능 여부
        //Originator 만 true
    	Map programMap = JPO.unpackArgs(args);
    	boolean isRequestOriginator = false;
    	String objectId = (String) programMap.get("objectId");
    	
    	if(ProgramCentralUtil.isNotNullString(objectId)) {
    		DomainObject object = new DomainObject(objectId);
        	String loginUser = context.getUser();
        	String Originator = (String) object.getAttributeValue(context, DecConstants.ATTRIBUTE_ORIGINATOR);
        	String requestStatus = (String) object.getInfo(context, DecConstants.SELECT_CURRENT);
        	
    		if(loginUser.equalsIgnoreCase(Originator) && requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_CREATE)) {//접수 작성자이면서 작성중(Create) 상태일 경우에만 접수
    			isRequestOriginator = true;
    		} 
    	} 
    	
		return isRequestOriginator;
	}
    
    public boolean isRequestAcceptAvailable(Context context, String args[]) throws Exception {//문의/제안 접수(상태) 가능 여부
    	//Originator 만 true
    	Map programMap = JPO.unpackArgs(args);
    	boolean isRequestAcceptAvailable = false;
    	String objectId = (String) programMap.get("objectId");
    	
    	if(ProgramCentralUtil.isNotNullString(objectId)) {
    		DomainObject object = new DomainObject(objectId);
    		StringList projectAdmin = object.getInfoList(context, "to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member|" 
    				+ DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE + "=='PIM'].to." + DecConstants.SELECT_NAME,false);
    		projectAdmin = projectAdmin != null ? projectAdmin : new StringList();
    		String loginUser = context.getUser();
        	String requestStatus = object.getInfo(context, DecConstants.SELECT_CURRENT);
        	
    		
    		if((context.isAssigned("decSystemAdmin") || projectAdmin.contains(loginUser)) // systemAdmin 혹은 PIM 이면서
    				&& requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_REQUEST)) {//  요청(Request) 상태일 경우에만 접수
    			isRequestAcceptAvailable = true;
    		}
    	} 
    	
		return isRequestAcceptAvailable;
    }
    
    public boolean isRequestResponseAvailable(Context context, String args[]) throws Exception {//문의/제안 답변 가능 여부
    	//Originator 만 true
    	Map programMap = JPO.unpackArgs(args);
    	boolean isRequestResponseAvailable = false;
    	String objectId = (String) programMap.get("objectId");
    	
    	if(ProgramCentralUtil.isNotNullString(objectId)) {
    		DomainObject object = new DomainObject(objectId);
    		StringList projectAdmin = object.getInfoList(context, "to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member|" 
    				+ DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE + "=='PIM'].to." + DecConstants.SELECT_NAME,false);
    		projectAdmin = projectAdmin != null ? projectAdmin : new StringList();
    		String loginUser = context.getUser();
        	String requestStatus = (String) object.getInfo(context, DecConstants.SELECT_CURRENT);
        	String isResponse = (String) object.getInfo(context, "from["+DecConstants.RELATIONSHIP_DECRESPONSEREL+"]");

    		if((context.isAssigned("decSystemAdmin") || projectAdmin.contains(loginUser)) // systemAdmin 혹은 PIM 이면서
    				&& isResponse.equalsIgnoreCase("FALSE") // 답변이 없고
    				&& requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_ACCEPT)) {//  접수(Accept) 상태일 경우에만 접수
    			isRequestResponseAvailable = true;
    		}
    	} 
    	
		return isRequestResponseAvailable;
    }
    
    public boolean isRequestResponseEditAvailable(Context context, String args[]) throws Exception {//문의/제안 답변 수정 가능 여부
    	//Originator 만 true
    	Map programMap = JPO.unpackArgs(args);
    	boolean isRequestResponseEditAvailable = false;
    	String objectId = (String) programMap.get("objectId");
    	
    	if(ProgramCentralUtil.isNotNullString(objectId)) {
    		DomainObject object = new DomainObject(objectId);
    		StringList projectAdmin = object.getInfoList(context, "to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member|" 
    				+ DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE + "=='PIM'].to." + DecConstants.SELECT_NAME,false);
    		projectAdmin = projectAdmin != null ? projectAdmin : new StringList();
    		String loginUser = context.getUser();
        	String requestStatus = (String) object.getInfo(context, DecConstants.SELECT_CURRENT);
        	String isResponse = (String) object.getInfo(context, "from["+DecConstants.RELATIONSHIP_DECRESPONSEREL+"]");

    		if((context.isAssigned("decSystemAdmin") || projectAdmin.contains(loginUser)) // systemAdmin 혹은 PIM 이면서
    				&& isResponse.equalsIgnoreCase("TRUE") // 답변이 있고
    				&& requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_ACCEPT)) {//  접수(Accept) 상태일 경우에만 접수
    			isRequestResponseEditAvailable = true;
    		}
    	} 
    	
		return isRequestResponseEditAvailable;
    }
    
    public boolean isRequestReplyAvailable(Context context, String args[]) throws Exception {//문의/제안 답변(상태) 가능 여부
    	//Originator 만 true
    	Map programMap = JPO.unpackArgs(args);
    	boolean isRequestReplyAvailable = false;
    	String objectId = (String) programMap.get("objectId");
    	
    	if(ProgramCentralUtil.isNotNullString(objectId)) {
    		DomainObject object = new DomainObject(objectId);
    		StringList projectAdmin = object.getInfoList(context, "to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member|" 
    				+ DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE + "=='PIM'].to." + DecConstants.SELECT_NAME,false);
    		projectAdmin = projectAdmin != null ? projectAdmin : new StringList();
    		String loginUser = context.getUser();
        	String requestStatus = (String) object.getInfo(context, DecConstants.SELECT_CURRENT);
        	String isResponse = (String) object.getInfo(context, "from["+DecConstants.RELATIONSHIP_DECRESPONSEREL+"]");

    		if((context.isAssigned("decSystemAdmin") || projectAdmin.contains(loginUser)) // systemAdmin 혹은 PIM 이면서
    				&& isResponse.equalsIgnoreCase("TRUE") // 답변이 있고
    				&& requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_ACCEPT)) {//  접수(Accept) 상태일 경우에만 접수
    			isRequestReplyAvailable = true;
    		}
    	} 
    	
		return isRequestReplyAvailable;
    }
    
    public boolean isRequestCompleteAvailable(Context context, String args[]) throws Exception {
    	//Originator 만 true
    	Map programMap = JPO.unpackArgs(args);
    	boolean isRequestCompleteAvailable = false;
    	String objectId = (String) programMap.get("objectId");
    	
    	if(ProgramCentralUtil.isNotNullString(objectId)) {
    		DomainObject object = new DomainObject(objectId);
    		String loginUser = context.getUser();
    		String Originator = (String) object.getAttributeValue(context, DecConstants.ATTRIBUTE_ORIGINATOR);
        	String requestStatus = (String) object.getInfo(context, DecConstants.SELECT_CURRENT);

    		if(context.getUser().equalsIgnoreCase(Originator) && requestStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_REPLY)) {// 작성자 & 답변(Reply) 상태일 경우에만 접수
    			isRequestCompleteAvailable = true;
    		}
    	}
    	
		return isRequestCompleteAvailable;
    }
    
 	public Vector getDecType(Context context, String[] args) throws Exception {
 		HashMap programMap = (HashMap) JPO.unpackArgs(args);
 		MapList objectList = (MapList) programMap.get("objectList"); 
 		Vector vec = new Vector(objectList.size());

 		try {
 			for (int i = 0; i < objectList.size(); i++) {
 				HashMap Hashmap = (HashMap) objectList.get(i);
 				String objectId = (String) Hashmap.get("id");
 				
 				DomainObject object = new DomainObject(objectId);
 				String decType = object.getAttributeValue(context, DecConstants.ATTRIBUTE_DECTYPE);
 				
 				if(decType.equalsIgnoreCase("Inquiry")) {
 					decType = EnoviaResourceBundle.getProperty(context, "ProgramCentral","emxProgramCentral.Label.Inquiry", context.getSession().getLanguage());
 				} else {
 					decType = EnoviaResourceBundle.getProperty(context, "ProgramCentral","emxProgramCentral.Label.Request", context.getSession().getLanguage());
 				}
 				
 				vec.addElement(decType);
 			}

 		} catch (Exception e) {
 			throw new Exception(e.toString());
 		}

 		return vec;
 	}
 	
 	public Vector getOriginator(Context context, String[] args) throws Exception {
 		HashMap programMap = (HashMap) JPO.unpackArgs(args);
 		MapList objectList = (MapList) programMap.get("objectList"); 
 		Vector vec = new Vector(objectList.size());

 		try {
 			for (int i = 0; i < objectList.size(); i++) {
 				HashMap Hashmap = (HashMap) objectList.get(i);
 				String objectId = (String) Hashmap.get("id");
 				
 				DomainObject object = new DomainObject(objectId);
 				String Originator = object.getAttributeValue(context, DecConstants.ATTRIBUTE_ORIGINATOR);
 				
 				Originator = PersonUtil.getFullName(context, Originator);
 				
 				vec.addElement(Originator);
 			}

 		} catch (Exception e) {
 			throw new Exception(e.toString());
 		}

 		return vec;
 	}
 	/*
 	public Vector getResoponseDate(Context context, String[] args) throws Exception {
 		HashMap programMap = (HashMap) JPO.unpackArgs(args);
 		MapList objectList = (MapList) programMap.get("objectList"); 
 		Vector vec = new Vector(objectList.size());

 		try {
 			for (int i = 0; i < objectList.size(); i++) {
 				HashMap Hashmap = (HashMap) objectList.get(i);
 				String objectId = (String) Hashmap.get("id");
 				DomainObject object = new DomainObject(objectId);
 				String decResponseDate = object.getInfo(context,"from["+DecConstants.RELATIONSHIP_DECRESPONSEREL+"].to."+DecConstants.SELECT_ATTRIBUTE_DECRESPONSEDATE);

 				if(decResponseDate != null && decResponseDate.length() > 0) {
 			        String[] decResponseDateSplit = decResponseDate.split("/| ");
 			        decResponseDate = decResponseDateSplit[2]+". "+decResponseDateSplit[0]+". "+decResponseDateSplit[1]+".";
 				} else {
 					decResponseDate = "---";
 				}
 				
 				vec.addElement(decResponseDate);
 			}

 		} catch (Exception e) {
 			throw new Exception(e.toString());
 		}

 		return vec;
 	}
 	*/
 	public Vector getCurrentStatus(Context context, String[] args) throws Exception {
 		HashMap programMap = (HashMap) JPO.unpackArgs(args);
 		MapList objectList = (MapList) programMap.get("objectList"); 
 		Vector vec = new Vector(objectList.size());

 		try {
 			for (int i = 0; i < objectList.size(); i++) {
 				HashMap Hashmap = (HashMap) objectList.get(i);
 				String objectId = (String) Hashmap.get("id");
 				DomainObject object = new DomainObject(objectId);
 				
 				String getCurrentStatus = object.getInfo(context,DecConstants.SELECT_CURRENT);
 				
 				if(getCurrentStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_CREATE)) {
 					getCurrentStatus = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.State.decRequest.Create", context.getSession().getLanguage());
 				} else if(getCurrentStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_REQUEST)) {
 					getCurrentStatus = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.State.decRequest.Request", context.getSession().getLanguage());
 				} else if(getCurrentStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_ACCEPT)) {
 					getCurrentStatus = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.State.decRequest.Accept", context.getSession().getLanguage());
 				} else if(getCurrentStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_REPLY)) {
 					getCurrentStatus = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.State.decRequest.Reply", context.getSession().getLanguage());
 				} else if(getCurrentStatus.equalsIgnoreCase(DecConstants.STATE_DECREQUEST_COMPLETE)) {
 					getCurrentStatus = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.State.decRequest.Complete", context.getSession().getLanguage());
 				}
 				vec.addElement(getCurrentStatus);
 			}

 		} catch (Exception e) {
 			throw new Exception(e.toString());
 		}

 		return vec;
 	}
 	
 	public Vector getProjectWithRequest(Context context, String[] args) throws Exception {
 		HashMap programMap = (HashMap) JPO.unpackArgs(args);
 		MapList objectList = (MapList) programMap.get("objectList"); 
 		Vector vec = new Vector(objectList.size());

 		try {
 			for (int i = 0; i < objectList.size(); i++) {
 				HashMap Hashmap = (HashMap) objectList.get(i);
 				String objectId = (String) Hashmap.get("id");
 				
 				DomainObject object = new DomainObject(objectId);
 				String projectName = object.getInfo(context,"to["+ DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from."+DecConstants.NAME);
 				String projectCode = object.getInfo(context,"to["+ DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from."+DecConstants.SELECT_ID);

 				if(ProgramCentralUtil.isNotNullString(projectName)) {//프로젝트 바로 가기 링크
 					StringBuffer sb = new StringBuffer();
 					sb.append("<a href=\"../common/emxTree.jsp?objectId=");
                    sb.append(XSSUtil.encodeForHTML(context, projectCode));
                    sb.append("&amp;mode=replace");
                    sb.append("&amp;AppendParameters=true");
                    sb.append("&amp;reloadAfterChange=true\">");
                    sb.append(projectName);
                    sb.append("</a>");
 					vec.addElement(sb.toString());
 				} else {
 					vec.addElement("<span>---</span>");
 				}
 			}

 		} catch (Exception e) {
 			throw new Exception(e.toString());
 		}

 		return vec;
 	}
}
