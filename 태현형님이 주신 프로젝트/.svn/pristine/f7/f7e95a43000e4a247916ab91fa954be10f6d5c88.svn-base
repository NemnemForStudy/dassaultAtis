<%@page import="com.matrixone.apps.program.ProgramCentralUtil"%>
<%@page import="com.matrixone.apps.domain.DomainConstants"%>
<%@page import="java.text.DecimalFormat"%>
<%@page import="com.dec.util.DecMatrixUtil"%>
<%@page import="java.math.BigDecimal"%>
<%@page import="java.util.Set"%>
<%@page import="java.util.List"%>
<%@page import="com.dec.util.DecStringUtil"%>
<%@page import="com.matrixone.apps.domain.DomainObject"%>
<%@page import="com.dec.util.DecConstants"%>
<%@include file = "../emxUICommonHeaderBeginInclude.inc" %>
<%@include file = "../emxUICommonAppInclude.inc"%>

<%@page import="java.util.List"%>
<%@page import="java.util.Map"%>
<%@page import="java.util.HashMap"%>

<%@ page import="org.apache.ibatis.session.SqlSession"%>
<%@ page import="com.daewooenc.mybatis.main.decSQLSessionFactory"%>

<script type="text/javascript" src="../common/scripts/jquery-latest.js"></script>
<script src="https://code.highcharts.com/stock/highstock.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>
<script src="../webapps/ENOAEFStructureBrowser/webroot/common/scripts/decemxUIFreezePane.js"></script>

<%
	String sLang = request.getHeader("Accept-Language");
	String sProjectCode = emxGetParameter(request,"projectCode");
	
	String sSubCon = emxGetParameter(request,"Sub-Con");
	String sConstrcutionItemType = emxGetParameter(request,"Construction Item Type");
	String sDestination = emxGetParameter(request,"Destination");
	String sFabCat = emxGetParameter(request,"Fab Category");
	
	String emxTableRowIdExpr = emxGetParameter(request, "emxTableRowIdExpr");
	String hObjectId = null;
	String hRowLevel = null;
	String hRowName = null;
	
	if(ProgramCentralUtil.isNotNullString(emxTableRowIdExpr)){
		StringList rowIdList = FrameworkUtil.splitString(emxTableRowIdExpr, ",");
		hObjectId = rowIdList.get(0);
		hRowLevel = rowIdList.get(1);
		
		hRowName = MqlUtil.mqlCommand(context, "print bus $1 select name dump", hObjectId);
	}
	
	if(ProgramCentralUtil.isNullString(sSubCon)){
		sSubCon = DecConstants.EMPTY_STRING;
	}
	if(ProgramCentralUtil.isNullString(sConstrcutionItemType)){
		sConstrcutionItemType = DecConstants.EMPTY_STRING;
	}
	if(ProgramCentralUtil.isNullString(sDestination)){
		sDestination = DecConstants.EMPTY_STRING;
	}
	if(ProgramCentralUtil.isNullString(sFabCat)){
		sFabCat = DecConstants.EMPTY_STRING;
	}
	
	if(ProgramCentralUtil.isNullString(hRowName)){
		hRowName = DecConstants.EMPTY_STRING;
	}
	
	String sObjectId = DecConstants.EMPTY_STRING;
	DecimalFormat df = new DecimalFormat("###,###");
	StringList slState = new StringList();
	StringList slGrpShort = new StringList();
	StringList colorList = new StringList();
	Map<String, Integer> mGrpItem = new HashMap();
	String objectId = DecConstants.EMPTY_STRING;
	List<Map> statusCount = null;
	List<Map> disciplineList = null;
	StringList buttonStrings = new StringList();// 정렬전 버튼 출력용 List
	
	MapList FMCSDisciplineList = new MapList();
	
	int sum = 0;
	int th_cnt = 0;
	
	String caseQty = EnoviaResourceBundle.getProperty(context, "emxProgramCentralStringResource", context.getLocale(), "emxProgramCentral.Label.case");
	
	StringList slProjectParam = new StringList();
	slProjectParam.add(DecConstants.SELECT_ID);
	MapList mlProject = DomainObject.findObjects(context, DecConstants.TYPE_PROJECT_SPACE, "*", DecConstants.SELECT_NAME + "=='" + sProjectCode + "'", slProjectParam);
	
	if(mlProject != null && !mlProject.isEmpty()){
		Map mProject = (Map)mlProject.get(0);
		sObjectId = (String)mProject.get(DecConstants.SELECT_ID);
	}

	StringList StringListStsCd = new StringList(); 
		
	try(SqlSession sqlSession = decSQLSessionFactory.getSession())
    {
    	Map selectParamMap = new HashMap();
    	selectParamMap.put("SITE_CD",sProjectCode); 
    	if(sSubCon.length() > 0){
    		selectParamMap.put("ORG_CD",sSubCon); 
    	}
    	if(sConstrcutionItemType.length() > 0){
    		selectParamMap.put("OBJ_TP_CD",sConstrcutionItemType); 
    	}
    	if(sDestination.length() > 0){
    		selectParamMap.put("DELI_DEST_NM",sDestination); 
    	}
    	if(sFabCat.length() > 0){
    		selectParamMap.put("FAB_CAT_NM",sFabCat); 
    	}
    	
    	if(hRowName.length() > 0)
		{
			selectParamMap.put("PACK_LVL_CD", "PACK_LVL_CD" + hRowLevel);
			selectParamMap.put("rowName", hRowName);
		}
		
		statusCount = sqlSession.selectList("Project.selectDashMaterialStatusCount", selectParamMap);
		disciplineList = sqlSession.selectList("Project.selectDashMaterialDisciplineList", selectParamMap);
		
		for(int i=0;i<statusCount.size();i++){
			HashMap map = (HashMap) statusCount.get(i);
			StringListStsCd.add(String.valueOf(map.get("ITEM_STS_CD")));
			sum = sum + Integer.parseInt(String.valueOf(map.get("CNT")));
		}
    } catch(Exception e) {
    	e.printStackTrace();
		throw e;
    }

	// CodeMaster Button [S]
	//1.FMCS Discipline 리스트 뽑기
	StringList DCPList = new StringList();	

	for(int j=0;j<disciplineList.size();j++){
		HashMap map = (HashMap) disciplineList.get(j);
		DCPList.add(String.valueOf(map.get("DCPLN_CD")));
	}
	
	//2.현재 프로젝트 name으로 Id 뽑기
	String sWhere = DecConstants.SELECT_NAME + "=='" + sProjectCode + "'";		
	
	StringList busCodeMasterSelects = new StringList();
	busCodeMasterSelects.add(DomainConstants.SELECT_ID);
	busCodeMasterSelects.add(DomainConstants.SELECT_NAME);
	
	MapList MlProjectSpace = DomainObject.findObjects(context,"Project Space",null,sWhere,busCodeMasterSelects);
	
	for(int i=0;i<MlProjectSpace.size();i++){
		HashMap map = (HashMap) MlProjectSpace.get(i);
		if(sProjectCode.equalsIgnoreCase(String.valueOf(map.get(DomainConstants.SELECT_NAME)))){
			objectId = String.valueOf(map.get(DomainConstants.SELECT_ID));//ProjectCode로 objectId 뽑기
		}
	}
	
	//3.Revision=='현재프로젝트 name' && name=='Discipline'로 CodeMaster Discipline 뽑기
	sWhere = DecConstants.SELECT_REVISION + "=='" + sProjectCode + "'&&" + DecConstants.SELECT_NAME + "=='" + "Discipline" + "'";

	MapList MlCodeMaster = DomainObject.findObjects(context,DecConstants.TYPE_DECCODEMASTER,null,sWhere,busCodeMasterSelects);//revision=='-' 인 기본 codeMaster데이터 조회		

	//4.Discipline 예하 codeDetail 모든 레벨 리스트 뽑기
	MapList codeMasterRelatedObjects = null;
	
	StringList objectSelects = new StringList();//출력할 codeDetail object 정보 
	objectSelects.add(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_NAME);
	objectSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCODEDETAILTYPE);
	objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
	
	StringList relationshipSelects = new StringList();//출력할 codeDetail connection 정보 
	relationshipSelects.add(DomainConstants.SELECT_FROM_NAME);
	relationshipSelects.add("from." + DecConstants.SELECT_ATTRIBUTE_DECCODEDETAILTYPE);
	relationshipSelects.add("from." + DomainConstants.SELECT_DESCRIPTION);

	for(int j=0;j<MlCodeMaster.size();j++){
		HashMap map = (HashMap) MlCodeMaster.get(j);
		String codeMasterId = String.valueOf(map.get(DomainConstants.SELECT_ID));

		DomainObject codeMasterObject = new DomainObject(codeMasterId);
		codeMasterRelatedObjects = codeMasterObject.getRelatedObjects(context, //codeMaster에 connect 된 codeDetail 불러오기
				DecConstants.RELATIONSHIP_DECCODEDETAILREL, 
				DecConstants.TYPE_DECCODEDETAIL, 
				objectSelects, 
				relationshipSelects, 
				false, 
				true, 
				(short) 0, // 0입력으로 모든 레벨 다 가져오기
				DecConstants.EMPTY_STRING, 
				DecConstants.EMPTY_STRING);
		
		for(int i=0;i<codeMasterRelatedObjects.size();i++){
			Hashtable codeMasterMap = (Hashtable) codeMasterRelatedObjects.get(i);
			if(DCPList.contains(String.valueOf(codeMasterMap.get("name"))) && ("FMCS Discipline".equalsIgnoreCase(String.valueOf(codeMasterMap.get(DecConstants.SELECT_ATTRIBUTE_DECCODEDETAILTYPE))))){
				HashMap DCPMap = new HashMap();
				DCPMap.put("FMCSDiscipline", String.valueOf(codeMasterMap.get(DomainConstants.SELECT_NAME)));
				DCPMap.put("FMCSDisciplineDescription", String.valueOf(codeMasterMap.get(DomainConstants.SELECT_DESCRIPTION)));
				DCPMap.put("Discipline", String.valueOf(codeMasterMap.get(DomainConstants.SELECT_FROM_NAME)));
				DCPMap.put("DisciplineDescription", String.valueOf(codeMasterMap.get("from." + DomainConstants.SELECT_DESCRIPTION)));
				DCPMap.put("Level", String.valueOf(codeMasterMap.get("level")));
				FMCSDisciplineList.add(DCPMap);
				buttonStrings.add(String.valueOf(codeMasterMap.get("from." + DomainConstants.SELECT_DESCRIPTION)));
			}
		}
	}
	
	// Button Sort[S]
	StringList buttonStringsSort = new StringList();//실제 버튼 출력용 List
	
	if(buttonStrings.contains("PIPING")){
		buttonStringsSort.add("PIPING");
		buttonStrings.remove("PIPING");
	}
	
	if(buttonStrings.contains("MECHANICAL")){
		buttonStringsSort.add("MECHANICAL");
		buttonStrings.remove("MECHANICAL");
	}
	
	if(buttonStrings.contains("ELECTRICAL")){
		buttonStringsSort.add("ELECTRICAL");
		buttonStrings.remove("ELECTRICAL");
	}
	
	if(buttonStrings.contains("INSTRUMENT")){
		buttonStringsSort.add("INSTRUMENT");
		buttonStrings.remove("INSTRUMENT");
	}
	
	for(int i=0;i<buttonStrings.size();i++){
		buttonStringsSort.add(buttonStrings.get(i));
	}
	// Button Sort[E]
			
	// CodeMaster Button [E]
	String sStatus = DecConstants.EMPTY_STRING;
	for(Map mStatus: statusCount){
		sStatus = (String) mStatus.get("ITEM_STS_CD");
		if(sStatus.equalsIgnoreCase("NOT YET")){
			colorList.add("#FF0000");//빨간색
		} else if(sStatus.equalsIgnoreCase("PARTIAL")){
			colorList.add("#8b00ff");//보라색
		} else if(sStatus.equalsIgnoreCase("MR")){
			colorList.add("#F27B35");//주황색
		} else if(sStatus.equalsIgnoreCase("PO")){
			colorList.add("#F2E205");//노란색
		} else if(sStatus.equalsIgnoreCase("IRC")){
			colorList.add("#00B050");//초록색
		} else if(sStatus.equalsIgnoreCase("SHIP")){
			colorList.add("#00B0F0");//하늘색
		} else if(sStatus.equalsIgnoreCase("SITE")){
			colorList.add("#0070C0");//파란색
		} else if(sStatus.equalsIgnoreCase("ISSUED")){
			colorList.add("#A6A6A6");//회색
		} else if(sStatus.equalsIgnoreCase("OTHERS")){
			colorList.add("#DDE7E7");//설백색
		} 
	}
%>

<script>
var bDiscipline = new Map([
	<%
		for(int i=0;i<FMCSDisciplineList.size();i++){
			HashMap map = (HashMap) FMCSDisciplineList.get(i);
	%>
		['<%=String.valueOf(map.get("DisciplineDescription"))%>','<%=String.valueOf(map.get("FMCSDiscipline"))%>'],
	<%	
		}
	%>
]);
$(function() {
	$(".buttonDiv").on("click",function () {//상단 버튼 클릭시
		var button = $(this);
		button = button.attr('id').replace('button-','');
		$('.buttonDiv').each(function (index, item) { //버튼 반복문
			var obj = $(this);
			obj = obj.attr('id').replace('button-','');
			$(this).css('background-color', '#F7F7F7'); //배경 일반
			$(this).css('font-weight', 'normal'); //폰트 일반
			$(this).hover(function(){
				$(this).css('background-color', '#E6E6E6'); //호버 배경 회색
			},function(){//호버 상태가 아닌 배경
				if(button==obj){
					$(this).css('background-color', '#e6e9ff'); //클릭한 버튼과 반복 상태의 버튼이 같을 경우 분홍색
				}else{
					$(this).css('background-color', '#F7F7F7'); //클릭한 버튼과 반복 상태의 버튼이 다를 경우 일반
				}
				
			});
		});
		$(this).css('font-weight', 'bold'); // 클릭 한 폰트 볼드
		$(this).css('background-color', '#e6e9ff'); // 클릭 한 배경 분홍
		
		$.ajax({
			url : "./decProjectMaterialStatusDBselect.jsp",
			type : "post",
			data : {"projectCode" : '<%=sProjectCode%>', "disciplineCode" : bDiscipline.get(button), "subCon" : '<%=sSubCon%>', "constrcutionItemType" : '<%=sConstrcutionItemType%>',
				"destination" : '<%=sDestination%>', "fabCat" : '<%=sFabCat%>',"rowLevel" : '<%=hRowLevel%>', "rowName" : '<%=hRowName%>'},
			dataType : "json",
			success : function(result){
				
				var obj = JSON.parse(JSON.stringify(result.data));
				
				var itemList = obj[0];
				var statusList = obj[1];
				var itemCntList = obj[2];

				var mItemSeries = [];
				
				statusList.forEach((value,index) => {
					var object = {};
					object.id = statusList[index];
					object.name = value;
					object.data = itemCntList[index];
					mItemSeries.push(object);
				});
				highchart(itemList,mItemSeries);
			}
		});
	});
	
	$('.buttonDiv').each(function (index, item) {
		var obj = $(this);
		button = item.id;
		button = button.replace('button-','');
		
		if(button=='PIPING'){//PIPING 먼저 항목만
			obj.trigger("click");// 버튼 클릭
			return false;
		}
	});
});
var chart2;
function highchart(slGrpShort,mGrpItemSeries){
	chart2 = new Highcharts.Chart({
	   	 title:{
	        	text : ''
	        },
	        credits: {
	            enabled: false
	        },
	        colors: [
	        			<%for(String color : colorList){%>
							'<%out.print(color);%>',
						<%}%>
					]
	        ,
	        chart: {
	            renderTo: 'container2',
	            type: 'bar',
	            zooming: {
	                 mouseWheel: false
	            }
	        },
	        xAxis: {
	             categories: slGrpShort
	        },
	        yAxis: {
	            title: {
	                text: ''
	            }
	        },
	        plotOptions: {
	        	 bar: {
	                 stacking: 'percent',
	                 borderWidth: 0,
	                 dataLabels: {
	                     enabled: true,
	                     color: '#000000',
	                     formatter: function () {
	                    	 if(this.y){
	                    		 return this.y + " (" + Highcharts.numberFormat(this.percentage, 0) + "%)";
	                    	 }
	                     }
	                 },
	                 showInLegend: true,
	                 cursor: 'pointer'
	       		}
	        },
	        series: mGrpItemSeries
	        ,
	        tooltip: {
	            style: {
	                fontSize: '1.0em',
	                fontWeight: 'bold'
	            }
	        },
	        legend: {
		         align: 'center',
		         layout: 'horizontal',
		         verticalAlign: 'bottom'
	        },
	        exporting: {
	            enabled: false
	        },
	        credits: {
	            enabled: false
	        }
	    });
}
$(window).on('resize', function(){
	$('#divBody').css('height', document.documentElement.clientHeight*0.90 + 'px');//Detail 공간 남기기 위해 -40
	$('#divBody').css('width', document.documentElement.clientWidth*0.99 + 'px');
	$('#container2').css('width', '98%');
});
function openWindowPop(url, name){
    var options = 'width=1505, height=633';
    window.open(url, name, options);
}
</script>
<style>
	#divBody {
		display:inline-block;
        text-align:center;
        height:100%;
	}
	#container2{
        width:98%;
        height:100%;
	}
	.buttonDiv {
		overflow: visible;
		color: #5b5d5e;
		background-color: #F7F7F7;
		border: 0px;
		border-radius: 1px;
		transition: background-color 2s font-weight 2s;
		margin: 0px 0px;
	}
</style>
<link rel="stylesheet" href="../webapps/UIKIT/UIKIT.css" type="text/css" />
<body style="height: 90%;">
	<div id="divBody" style="width: 98%;">
		<div style="display:block;height:auto;text-align:left;margin-left:5px; width:100%;"><!-- margin-top:10px;margin-bottom:10px; -->
			<div style="text-align:left; width:49%; display:inline-block;">
				<button type="button" id="button-openWindowPop" onclick="javascript:openWindowPop('../common/images/Material_Status_Legend.png', 'popup');">LEGEND</button>
			</div>
			<div style="text-align:right; width:50%; display:inline-block;">
				Material Status&emsp;<a href=JavaScript:window.open("emxTree.jsp?DefaultCategory=decProjectMaterialStatusLink&objectId=<%=sObjectId%>");><img src="images/iconActionNewWindow.png" border="0"></a>
				&emsp;&emsp;
				CWP Allocation&emsp;<a href=JavaScript:window.open("emxTree.jsp?DefaultCategory=decCWPMaterialSummaryLink&objectId=<%=sObjectId%>");><img src="images/iconActionNewWindow.png" border="0"></a>
				&emsp;<img src="../common/images/iconActionSearchSpyGlass.png" 
				onclick='showFilterSlideinDialog("objectId=<%=sObjectId%>&filterParam=codeMaster:Sub-Con,codeMaster:Construction Item Type,codeMaster:Destination,Fab Category:true")' 
				style="cursor: pointer;">
			</div>
		</div>
		<div style="text-align: left; display:block; height:auto; margin-top:5px;">
			<%
				for(String buttonString : buttonStringsSort){
			%>
					<button type="button" id="button-<%=buttonString%>" class="buttonDiv"><%=buttonString%></button>
			<%
				}
			%>
		</div>
		<div id="container2"></div>
	</div>
</body>