//
// $Id: emxProjectSpace.java.rca 1.6 Wed Oct 22 16:21:26 2008 przemek Experimental przemek $ 
//
// emxProjectSpace.java
//
// Copyright (c) 2002-2020 Dassault Systemes.
// All Rights Reserved
// This program contains proprietary and trade secret information of
// MatrixOne, Inc.  Copyright notice is precautionary only and does
// not evidence any actual or intended publication of such program.
//
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.session.SqlSession;

import com.daewooenc.compare.CompareRule;
import com.daewooenc.compare.util.CompareUtil;
import com.daewooenc.mybatis.main.decSQLSessionFactory;
import com.dec.util.DecCommonUtil;
import com.dec.util.DecConstants;
import com.dec.util.DecDateUtil;
import com.dec.util.DecMatrixUtil;
import com.dec.util.DecStringUtil;
import com.dec.util.decCollectionUtil;
import com.dec.util.decFilterUtil;
import com.dec.util.decListUtil;
import com.dec.webservice.call.decWebserviceUtil;
import com.matrixone.apps.common.ContentReplicateOptions;
import com.matrixone.apps.common.util.ComponentsUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.Job;
import com.matrixone.apps.domain.util.CacheUtil;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.domain.util.eMatrixDateFormat;
import com.matrixone.apps.domain.util.mxType;
import com.matrixone.apps.framework.ui.UINavigatorUtil;
import com.matrixone.apps.framework.ui.UIUtil;
import com.matrixone.apps.program.ProgramCentralConstants;
import com.matrixone.apps.program.ProgramCentralUtil;
import com.matrixone.apps.program.ProjectSpace;
import com.matrixone.apps.program.ProjectTemplate;
import com.matrixone.apps.program.Task;
import com.matrixone.fcs.common.ImageRequestData;

import matrix.db.BusinessObjectProxy;
import matrix.db.BusinessObjectWithSelect;
import matrix.db.BusinessObjectWithSelectList;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.Relationship;
import matrix.db.RelationshipWithSelect;
import matrix.db.RelationshipWithSelectList;
import matrix.util.MatrixException;
import matrix.util.StringList;

/**
 * The <code>emxProjectSpace</code> class represents the Project Space JPO
 * functionality for the AEF type.
 *
 * @version AEF 10.0.SP4 - Copyright (c) 2002, MatrixOne, Inc.
 */
public class emxProjectSpace_mxJPO extends emxProjectSpaceBase_mxJPO
{

    /**
     *
     * @param context the eMatrix <code>Context</code> object
     * @param args holds no arguments
     * @throws Exception if the operation fails
     * @since AEF 10.0.SP4
     * @grade 0
     */
    public emxProjectSpace_mxJPO (Context context, String[] args)
        throws Exception
    {
      super(context, args);
    }

    /**
     * Constructs a new emxProjectSpace JPO object.
     *
     * @param context the eMatrix <code>Context</code> object
     * @param String the business object id
     * @throws Exception if the operation fails
     * @since AEF 10.0.SP4
     */
    public emxProjectSpace_mxJPO (String id)
        throws Exception
    {
        // Call the super constructor
        super(id);
    }
    
    /**
     * jhlee Add 05-25 Project Space의 Unit Phase의 decImageHolder 정보를 objectlist에 넣어줌
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public MapList getProjectSpaceUnitImage(Context context, String[] args) throws Exception {
    	MapList mlReturn = new MapList();
    	Map programMap = JPO.unpackArgs(args);
    	String sObjectId = DecStringUtil.nullToEmpty(programMap.get("objectId"));
    	DomainObject doPS = DomainObject.newInstance(context, sObjectId);
    	
    	StringList slBusSelect = new StringList();
    	slBusSelect.add(DecConstants.SELECT_ID);
    	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECWBSTYPE);
    	
    	// 프로젝트에 연결된 Phase
    	MapList mlUnitPhase = doPS.getRelatedObjects(context,
												DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
												DecConstants.TYPE_PHASE, //pattern to match types
												slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
												null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
												false, //get To relationships
												true, //get From relationships
												(short)0, //the number of levels to expand, 0 equals expand all.
												DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
												DecConstants.EMPTY_STRING,
												0); //where clause to apply to relationship, can be empty ""
    	
    	slBusSelect.clear();
    	slBusSelect.add(DecConstants.SELECT_ID);
    	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECIMAGETYPE);
    	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_PRIMARY_IMAGE);
    	
    	Map mUnitPhase = null;
    	Map mDecImageHolder = null;
    	MapList mlDecImageHolder = null;
    	String sWBSType = null;
    	String sId = null;
    	String sImageType = null;
    	DomainObject doPhase = DomainObject.newInstance(context);
    	for(Object o : mlUnitPhase) {
    		mUnitPhase = (Map)o;
    		sWBSType = (String)mUnitPhase.get(DecConstants.SELECT_ATTRIBUTE_DECWBSTYPE);
    		// Phase중 WBSType이 Unit인것만
    		if(DecStringUtil.equalsIgnoreCase("Unit", sWBSType)) {
    			sId = (String)mUnitPhase.get(DecConstants.SELECT_ID);
    			doPhase.setId(sId);
    			mlDecImageHolder = doPhase.getRelatedObjects(context,
															DecConstants.RELATIONSHIP_DECIMAGEHOLDER, //pattern to match relationships
															DecConstants.TYPE_DECIMAGEHOLDER, //pattern to match types
															slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
															null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
															true, //get To relationships
															false, //get From relationships
															(short)0, //the number of levels to expand, 0 equals expand all.
															DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
															DecConstants.EMPTY_STRING,
															0); //where clause to apply to relationship, can be empty ""
    			for(Object oDecImageHolder : mlDecImageHolder) {
    				mDecImageHolder = (Map)oDecImageHolder;
    				sImageType = (String)mDecImageHolder.get(DecConstants.SELECT_ATTRIBUTE_DECIMAGETYPE);
    				// Object List에 decImageHolder 정보를 Key 값에 ImageType으로 맵에 넣어줌
    				
        			mUnitPhase.put(sImageType, mDecImageHolder);
    			}
    			mlReturn.add(mUnitPhase);
    		}
    	}
    	
    	return mlReturn;
    }
    
    public MapList getActivityListWithWBSType(Context context, String[] args) throws Exception {
    	MapList mlReturn = new MapList();
    	Map programMap = JPO.unpackArgs(args);
    	String sObjectId = DecStringUtil.nullToEmpty(programMap.get("objectId"));
    	String targetWBSType = DecStringUtil.nullToEmpty(programMap.get("wbsType"));
    	StringList slSelect = (StringList) programMap.get("slSelect");
    	DomainObject doPS = DomainObject.newInstance(context, sObjectId);
    	
    	StringList slBusSelect = new StringList();
    	slBusSelect.add(DecConstants.SELECT_ID);
    	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECWBSTYPE);
    	
    	if ( slSelect != null )
    	{
    		slBusSelect.addAll(slSelect);
    	}
    	
    	String typePattern = DecConstants.TYPE_PHASE;
    	if ( targetWBSType.contains("Task") )
    	{
    		typePattern = DecConstants.TYPE_TASK_MANAGEMENT;
    	}
    	
    	MapList mlActivity = doPS.getRelatedObjects(context,
    			DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
    			typePattern, //pattern to match types
    			slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
    			null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
    			false, //get To relationships
    			true, //get From relationships
    			(short)0, //the number of levels to expand, 0 equals expand all.
    			DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
    			DecConstants.EMPTY_STRING,
    			0); //where clause to apply to relationship, can be empty ""
    	
    	Map mActivity = null;
    	String sWBSType = null;
    	String sId = null;
    	DomainObject doPhase = DomainObject.newInstance(context);
    	for(Object o : mlActivity) {
    		mActivity = (Map)o;
    		sWBSType = (String)mActivity.get(DecConstants.SELECT_ATTRIBUTE_DECWBSTYPE);
    		if(DecStringUtil.equalsIgnoreCase(targetWBSType, sWBSType)) {
    			sId = (String)mActivity.get(DecConstants.SELECT_ID);
    			doPhase.setId(sId);
    			mlReturn.add(mActivity);
    		}
    	}
    	
    	return mlReturn;
    }
    /**
     * jhlee Add 05-25 Unit Image의 Image컬럼
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList getSitePhotoImageDrop(Context context, String[] args) throws Exception {
    	return getImageDrop(context, args, "Field");
    }
    public StringList getSitePhotoImageInfo(Context context, String[] args) throws Exception {
    	return getImageInfo(context, args, "Field");
    }
    public StringList getPlotPlanImageDrop(Context context, String[] args) throws Exception {
    	return getImageDrop(context, args, "Plat Plan");
    }
    public StringList getPlotPlanImageInfo(Context context, String[] args) throws Exception {
    	return getImageInfo(context, args, "Plat Plan");
    }
    public StringList get3DImageDrop(Context context, String[] args) throws Exception {
    	return getImageDrop(context, args, "3D");
    }
    public StringList get3DImageInfo(Context context, String[] args) throws Exception {
    	return getImageInfo(context, args, "3D");
    }
    
    private StringList getImageDrop(Context context, String[] args, String sType) throws Exception {
    	StringList slReturn = new StringList();
    	Map programMap = JPO.unpackArgs(args);
    	MapList mlObject = (MapList)programMap.get("objectList");
    	Map mObject = null;
    	StringBuilder sbResult = new StringBuilder();
    	String sObjectId = null;
    	String sFormId = null;
    	String sDivId = null;
    	String sImgDivId = null;
    	boolean isMobile = UINavigatorUtil.isMobile(context);
    	for(int i=0; i<mlObject.size(); i++) {
    		mObject = (Map)mlObject.get(i);
    		sObjectId = (String)mObject.get("id");
    		// 각 컬럼의 form, div, img태그의 Id값 지정
	    	if(DecStringUtil.equals(sType, "Field")) {
	    		sFormId = "spImageUpload" + i;
	    		sImgDivId = "spDivExtendedHeaderImage" + i;
	    		sDivId = "spDivDropImages" + i;
	    		sbResult.append("<form></form>");
	    	}else if(DecStringUtil.equals(sType, "Plat Plan")) {
	    		sFormId = "ppImageUpload" + i;
	    		sImgDivId = "ppDivExtendedHeaderImage" + i;
	    		sDivId = "ppDivDropImages" + i;
	    	}else if(DecStringUtil.equals(sType, "3D")) {
	    		sFormId = "3DImageUpload" + i;
	    		sImgDivId = "3DDivExtendedHeaderImage" + i;
	    		sDivId = "3DDivDropImages" + i;
	    	}
	    	
	    	if(!isMobile){
	    		sbResult.append("<form id='").append(sFormId).append("' action='../common/emxExtendedPageHeaderFileUploadImage.jsp?objectId=").append(sObjectId)
	    				.append(XSSUtil.encodeForURL("&relationship=")).append(DecConstants.RELATIONSHIP_DECIMAGEHOLDER)
	    				.append(XSSUtil.encodeForURL("&imageType=")).append(sType)
	    				.append("' method='post' enctype='multipart/form-data'>");
		        sbResult.append("<div id='").append(sDivId).append("' class='dropArea'");
		        sbResult.append("      ondrop='ImageDrop(event, \"").append(sFormId).append("\", \"").append(sDivId).append("\", \"").append(sImgDivId).append("\")' ");
		        sbResult.append("  ondragover='ImageDragHover(event, \"").append(sDivId).append("\")' ");
		        sbResult.append(" ondragleave='ImageDragHover(event, \"").append(sDivId).append("\")' ");
		        sbResult.append(" style=\"background: url('../common/images/iconActionAdd.png') no-repeat center;\">");
			    sbResult.append("</div>");
			    sbResult.append("</form>");
	        }
	    	slReturn.add(sbResult.toString());
	    	sbResult.setLength(0);
    	}
    	return slReturn;
    }
    /**
     * jhlee Add 05-25 Unit Image의 ImageInfo 컬럼
     * @param context
     * @param args
     * @param sType
     * @return
     * @throws Exception
     */
    private StringList getImageInfo(Context context, String[] args, String sType) throws Exception {
    	StringList slReturn = new StringList();
    	Map programMap = JPO.unpackArgs(args);
    	MapList mlObject = (MapList)programMap.get("objectList");
    	Map mObject = null;
    	Map mDecImageHolderInfo = null;
    	StringBuilder sbImage = new StringBuilder();
    	String sObjectId = null;
    	String sImgDivId = null;
    	String sImageHolderId = null;
    	String sFileName = null;
    	for(int i=0; i<mlObject.size(); i++) {
    		mObject = (Map)mlObject.get(i);
    		sObjectId = (String)mObject.get("id");
    		mDecImageHolderInfo = (Map)mObject.get(sType);
    		// 각 컬럼의 div태그 Id값 지정
	    	if(DecStringUtil.equals(sType, "Field")) {
	    		sImgDivId = "spDivExtendedHeaderImage" + i;
	    	}else if(DecStringUtil.equals(sType, "Plat Plan")) {
	    		sImgDivId = "ppDivExtendedHeaderImage" + i;
	    	}else if(DecStringUtil.equals(sType, "3D")) {
	    		sImgDivId = "3DDivExtendedHeaderImage" + i;
	    	}
    		
			sbImage.append("<div id='").append(sImgDivId).append("' style='text-align:center;'>");
			if(mDecImageHolderInfo != null) {
		    	sImageHolderId = (String)mDecImageHolderInfo.get(DecConstants.SELECT_ID);
			   	sFileName = (String)mDecImageHolderInfo.get(DecConstants.SELECT_ATTRIBUTE_PRIMARY_IMAGE);
				sbImage.append(genImageInfo(context, sObjectId, sImageHolderId, sFileName, sType, "true"));
		    }
			sbImage.append("</div>");
			slReturn.add(sbImage.toString());
			sbImage.setLength(0);
    	}
		
    	return slReturn;
    	
    }
    /**
     * jhlee Add 05-25 sOID : Unit Phase OID / sImageHolderId : decImageHolder OID / sType : decImageType 속성값 
     * Unit Image의 ImageInfo 컬럼 
     * @param context
     * @param sOID
     * @param sImageHolderId
     * @param sFileName
     * @param sType
     * @param modifyAccess
     * @return
     * @throws Exception
     */
    public static String genImageInfo(Context context, String sOID, String sImageHolderId, String sFileName, String sType, String modifyAccess) throws Exception {
    	StringBuilder sbResult  = new StringBuilder();
        StringBuilder sbImage   = new StringBuilder();
        String sURLPrimaryImage = "" ;
    	ArrayList bopArrayList  = new ArrayList();
    	DomainObject doUnit = DomainObject.newInstance(context);
    	StringList slFileList = new StringList();
        try {
        	doUnit.setId(sOID);
        	slFileList = doUnit.getInfoList(context, "to[" + DecConstants.RELATIONSHIP_DECIMAGEHOLDER + "|from." + DecConstants.SELECT_ATTRIBUTE_DECIMAGETYPE + "=='" + sType + "'].from.format[" + DecConstants.MVL_FORMAT_MX_SMALL_IMAGE + "].file.name", false);
			HashMap objectMap = new HashMap();
    		objectMap.put("id", sOID);
    		MapList objectList = new MapList();
    		objectList.add(objectMap);	
			BusinessObjectProxy bop = new BusinessObjectProxy(sImageHolderId, DecConstants.MVL_FORMAT_MX_IMAGE, sFileName, false, false);
			bopArrayList.add(bop);
			
			// 화면에 보여줄 fcs 이미지 경로 생성
			String[] tmpImageUrls = ImageRequestData.getImageURLS(context, context.getDocumentURL("", true), bopArrayList);
			
			if(tmpImageUrls.length>0){
				sURLPrimaryImage = tmpImageUrls[0];
				if(UIUtil.isNullOrEmpty(sURLPrimaryImage)) {
					sURLPrimaryImage = "../common/images/image_JDW.gif";
				}
			}else{
				sURLPrimaryImage = "../common/images/image_JDW.gif";
			}
		}catch(FrameworkException e){
			sURLPrimaryImage = "../common/images/image_JDW.gif";
		}
        
        if (!sURLPrimaryImage.equals("../common/images/image_JDW.gif")) {
			boolean useInPlaceManager = false;
			try{
				useInPlaceManager = "true".equalsIgnoreCase(EnoviaResourceBundle.getProperty(context, "emxFramework.InPlaceImageManager"));
			}catch(FrameworkException e){
				System.out.println("emxProjectSpace : 420 line");
			}
			if(useInPlaceManager){
				sbImage.append("<a onClick=\"require(['../components/emxUIImageManagerInPlace'], function(ImageManager){ new ImageManager('" +  XSSUtil.encodeForJavaScript(context,sOID) + "'); } );return false;\" >");
			}else{
	            sbImage.append("<a onClick=\"var posLeft=(screen.width/2)-(900/2);var posTop = (screen.height/2)-(650/2);window.open(decodeURIComponent('");
	            sbImage.append("../components/decImageManager.jsp?").append(XSSUtil.encodeForURL("isPopup=false&toolbar=decAPPImageManagerToolBar&header=emxComponents.Image.ImageManagerHeading&HelpMarker=emxhelpimagesview&"));
	            sbImage.append("imageType=").append(sType).append(XSSUtil.encodeForURL("&"));
	            sbImage.append("objectId=").append(sOID);
	            sbImage.append("'),  '', 'height=650,width=900,top=' + posTop + ',left=' + posLeft + ',toolbar=no,directories=no,status=no,menubar=no;return false;')\">");
			}
            sbImage.append("<img id='divDropPrimaryImage' src='").append(sURLPrimaryImage).append("' border='1' style='vertical-align:middle;border: 1px solid #bababa;box-shadow:1px 1px 2px #ccc;' height='42'></img></a>");
			if(!slFileList.isEmpty()) {
	            sbImage.append(" <b>(");
				sbImage.append(slFileList.size());
				sbImage.append(")</b>");
			}
            if(!UINavigatorUtil.isMobile(context)){
            	sbResult.append(sbImage.toString());
            }
            else if("false".equalsIgnoreCase(modifyAccess))
            {
            	sbResult.append(sbImage.toString());
            }
        }

       return sbResult.toString();

    }
    
 // Modified by thok on 2023.05.08 --- [S]
    @Override
    @com.matrixone.apps.framework.ui.CreateProcessCallable  
  	public Map createNewProject(Context context,String[]args)throws Exception
  	{
  		ProjectSpace project =(ProjectSpace)DomainObject.newInstance(context,
  				ProgramCentralConstants.TYPE_PROJECT_SPACE,DomainConstants.PROGRAM);

  		ProjectSpace newProject =(ProjectSpace)DomainObject.newInstance(context,
  				ProgramCentralConstants.TYPE_PROJECT_SPACE,DomainConstants.PROGRAM);

  		Map <String,String>returnMap = new HashMap();
  		// Modified by hslee on 2023.06.20
//  		try{
  		try( SqlSession sqlSession = decSQLSessionFactory.getSession() ){
  			ContextUtil.startTransaction(context, true);

  			String SCHEDULE_FROM = PropertyUtil.getSchemaProperty(context,"attribute_ScheduleFrom");
  			Map <String,String>attributeMap = new HashMap();
  			Map <String,String>basicProjectInfo = new HashMap();
  			Map <String,String>relatedProjectInfo = new HashMap();
  			
  			Map programMap 					= (HashMap) JPO.unpackArgs(args);
			String objectId 				= (String)programMap.get("objectId");
  			String createProject 			= (String)programMap.get("createProject");
  			String projectName 				= (String)programMap.get("Name");
  			String projectAutoName 			= (String)programMap.get("autoNameCheck");
  			String projectDescrption 		= ProgramCentralConstants.EMPTY_STRING;
  			String businessUnitId 			= (String)programMap.get("BusinessUnitOID");
  			String programId 				= (String)programMap.get("ProgramOID");
  			String businessGoalId 			= (String)programMap.get("BusinessGoalOID");
  			String baseCurrency 			= (String)programMap.get("BaseCurrency");
  			String projectVault 			=  project.DEFAULT_VAULTS;
  			String projectVisibility 		= (String)programMap.get("ProjectVisibility");
  			String projectPolicy 			= (String)programMap.get("Policy");
  			String projectScheduleFrom 		= (String)programMap.get("ScheduleFrom");
  			String projectDate 				= (String)programMap.get("ProjectDate");
  			String defaultConstraintType 	= (String)programMap.get("DefaultConstraintType");
  			String projectSpaceType 		= (String)programMap.get("TypeActual");
  			String selectedProjectId 		= (String)programMap.get("SeachProjectOID");
  			String connectRelatedProjects 	= (String)programMap.get("connectRelatedProject");
  			String copyFinancialData 		= (String)programMap.get("financialData");
  			String copyFolderData 			= (String)programMap.get("folders");
			String sKeepSourceConstraints 	= (String)programMap.get("keepSourceConstraints");
			String sKeepSourceColors 		= (String)programMap.get("keepSourceColors");
			
			String refernceDocument 		= (String)programMap.get("ReferenceDocument");
			String deliverabletId 			= (String)programMap.get("DeliverableOID");
            String calendarId 				= (String)programMap.get("CalendarOID");
            
            String ProjectAdministrator     = (String)programMap.get("ProjectAdministrator");
            String SiteName     			= (String)programMap.get("SiteName");
            String decProjectType			= (String)programMap.get("decProjectType");
            String BiddingProject			= (String)programMap.get("BiddingProjectOID");

  			StringList calendarIds = FrameworkUtil.split(calendarId, "|");
  			
  			if(ProgramCentralUtil.isNullString(decProjectType)) {
  				decProjectType = "bidding";
  			}
  			
  			if(decProjectType.equals("ongoing")) {
  				if(ProgramCentralUtil.isNullString(BiddingProject)) {
  					BiddingProject = objectId;
  				}
  				objectId = null;//강제로 Related Projects connection 생성 방지
  			}
  			
  			// Modified by thok on 2023.08.18[S]
  			MapList mlProject = DomainObject.findObjects(context, DecConstants.TYPE_PROJECT_SPACE, "*", DecConstants.SELECT_NAME + "=='" + projectName + "'", null);
  			
  			//프로젝트 코드 5자 초과
  			if(decProjectType.equals("ongoing") && projectName.length() > 5) {
  				String strMsg = EnoviaResourceBundle.getProperty(context, ProgramCentralConstants.PROGRAMCENTRAL,
  	                    "emxProgramCentral.Error.lessFiveName", context.getSession().getLanguage());
  	            MqlUtil.mqlCommand(context, "warning $1", strMsg);
  				throw new Exception();
  			} else if(mlProject != null && !mlProject.isEmpty()) { //프로젝트 코드 중복
  				String strMsg = EnoviaResourceBundle.getProperty(context, ProgramCentralConstants.PROGRAMCENTRAL,
  	                    "emxProgramCentral.Error.duplicateProjectCode", context.getSession().getLanguage());
  	            MqlUtil.mqlCommand(context, "warning $1", strMsg);
  				throw new Exception();
  			}
  			// Modified by thok on 2023.08.18[E]
  			
  			Locale locale	=	(Locale)programMap.get("localeObj");
            if(locale == null) {
            	locale	=	context.getLocale();
            }
			
  			String strTimeZone 				= (String)programMap.get("timeZone");
			double dClientTimeZoneOffset 	= (new Double(strTimeZone)).doubleValue();
			//  IR-528127-3DEXPERIENCER2018x
			boolean isECHInstalled =  FrameworkUtil.isSuiteRegistered(context,
	  				"appVersionEnterpriseChange",false,null,null);
			if(isECHInstalled){
				if(mxType.isOfParentType(context, projectSpaceType, DomainObject.TYPE_CHANGE_PROJECT))
					programId = (String)programMap.get("ECHMandProgramOID");
			}
			//end  IR-528127-3DEXPERIENCER2018x
			
			if("Clone".equalsIgnoreCase(createProject) && ProgramCentralUtil.isNullString(defaultConstraintType)) {
				defaultConstraintType = ATTRIBUTE_TASK_CONSTRAINT_TYPE_RANGE_ASAP;
			}
			
			if(ProgramCentralUtil.isNullString(projectSpaceType)) {
				projectSpaceType = "Project Space";
			}
			
			if(ProgramCentralUtil.isNullString(projectPolicy)) {
				projectPolicy = "Project Space";
			}
			
			if(!ProgramCentralUtil.isNotNullString(projectDate)) {//No Project Date make error occur
				SimpleDateFormat ProjectSpacedateFormat = new SimpleDateFormat("yyyy. MM. dd.");
				Date date = new Date();        
				projectDate = ProjectSpacedateFormat.format(date);
			}

  			if(ProgramCentralUtil.isNotNullString(projectDate)){
  				/*projectDate = projectDate.trim();
  				projectDate = eMatrixDateFormat.getFormattedInputDate(context,projectDate,dClientTimeZoneOffset,locale);*/
  				TimeZone tz = TimeZone.getTimeZone(context.getSession().getTimezone());
				double dbMilisecondsOffset = (double)(-1)*tz.getRawOffset();
				dClientTimeZoneOffset = (new Double(dbMilisecondsOffset/(1000*60*60))).doubleValue(); 
  				projectDate = projectDate.trim();
  				 int iDateFormat = eMatrixDateFormat.getEMatrixDisplayDateFormat();
  		        String strInputTime = eMatrixDateFormat.adjustTimeStringForInputFormat("");
//  				projectDate = eMatrixDateFormat.getFormattedInputDateTime(projectDate, strInputTime, iDateFormat, dClientTimeZoneOffset, locale);
  				projectDate = eMatrixDateFormat.getFormattedInputDateTime(projectDate, strInputTime, iDateFormat, dClientTimeZoneOffset, Locale.KOREAN);
  			}

  			//For program,Businessgoal and related project
  			if(ProgramCentralUtil.isNotNullString(objectId)){
  				StringList selectable = new StringList();
  				selectable.addElement(ProgramCentralConstants.SELECT_IS_PROJECT_SPACE);
  				selectable.addElement(ProgramCentralConstants.SELECT_IS_PROGRAM);
  				selectable.addElement(ProgramCentralConstants.SELECT_IS_BUSINESS_GOAL);
  				
  				DomainObject parentObject = DomainObject.newInstance(context,objectId);
  				Map <String,String>parentObjectInfo = parentObject.getInfo(context, selectable);
  				String isProjectSpace 				= parentObjectInfo.get(ProgramCentralConstants.SELECT_IS_PROJECT_SPACE);
  				String isProgram 					= parentObjectInfo.get(ProgramCentralConstants.SELECT_IS_PROGRAM);
  				String isBusinessGoal 				= parentObjectInfo.get(ProgramCentralConstants.SELECT_IS_BUSINESS_GOAL);
  				
  				if("true".equalsIgnoreCase(isProgram)){
  					programId = objectId;
  				}else if("true".equalsIgnoreCase(isBusinessGoal)){
  					businessGoalId = objectId;
  				}else if("true".equalsIgnoreCase(isProjectSpace)){
  					relatedProjectInfo.put("AddAsChild", "true");
  					relatedProjectInfo.put("RelatedProjectId", objectId);
  				}
  			}

  			//Project space attribute map values
  			attributeMap.put(DomainObject.ATTRIBUTE_TASK_ESTIMATED_START_DATE, projectDate);
  			attributeMap.put(DomainObject.ATTRIBUTE_TASK_ESTIMATED_FINISH_DATE, projectDate);
  			attributeMap.put(DomainObject.ATTRIBUTE_TASK_ESTIMATED_DURATION, "0.0");
  			attributeMap.put(DomainObject.ATTRIBUTE_PROJECT_VISIBILITY, projectVisibility);
  			attributeMap.put(DomainObject.ATTRIBUTE_CURRENCY, baseCurrency);
  			attributeMap.put(SCHEDULE_FROM, projectScheduleFrom);
  			attributeMap.put(DomainObject.ATTRIBUTE_DEFAULT_CONSTRAINT_TYPE, defaultConstraintType);
  			

  			attributeMap.put(DecConstants.ATTRIBUTE_DECSITENAME, SiteName);
  			attributeMap.put(DecConstants.ATTRIBUTE_DECPROJECTTYPE, decProjectType);
  			attributeMap.put(DecConstants.ATTRIBUTE_DECPROJECTSTATUS, DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_INPROGRESS);//decProjectStatus - In-Progress
  			
  			//Baseline attributes should not have any values while project creation.
  			attributeMap.put(DomainObject.ATTRIBUTE_BASELINE_INITIAL_START_DATE, ProgramCentralConstants.EMPTY_STRING);
  			attributeMap.put(DomainObject.ATTRIBUTE_BASELINE_INITIAL_END_DATE, ProgramCentralConstants.EMPTY_STRING);
  			attributeMap.put(DomainObject.ATTRIBUTE_BASELINE_CURRENT_START_DATE, ProgramCentralConstants.EMPTY_STRING);
  			attributeMap.put(DomainObject.ATTRIBUTE_BASELINE_CURRENT_END_DATE, ProgramCentralConstants.EMPTY_STRING);

  			if("Clone".equalsIgnoreCase(createProject) || "Template".equalsIgnoreCase(createProject)){
  				
  				SimpleDateFormat dateFormat = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(),Locale.US);
  				Calendar constraintDate = Calendar.getInstance();
  				Date newDate = null;
  				newDate = dateFormat.parse(projectDate);
  				constraintDate.setTime(newDate);
  				if(defaultConstraintType.equalsIgnoreCase(ATTRIBUTE_TASK_CONSTRAINT_TYPE_RANGE_ASAP)){
  					constraintDate.set(Calendar.HOUR_OF_DAY, 8);
  				} else {
  					constraintDate.set(Calendar.HOUR_OF_DAY, 17);
  				}
  				constraintDate.set(Calendar.MINUTE, 0);
  				constraintDate.set(Calendar.SECOND, 0);
  				projectDate = dateFormat.format((constraintDate.getTime()));
  				attributeMap.put(DomainObject.ATTRIBUTE_TASK_CONSTRAINT_DATE, projectDate);
  			}

  			//get auto name 
  			if(ProgramCentralUtil.isNullString(projectName) && projectAutoName.equalsIgnoreCase("true")){
  				String symbolicTypeName = PropertyUtil.getAliasForAdmin(context, "Type", projectSpaceType, true);
  				String symbolicPolicyName = PropertyUtil.getAliasForAdmin(context, "Policy", projectPolicy, true);
  				
  				projectName = FrameworkUtil.autoName(context,
  						symbolicTypeName,
  						null,
  						symbolicPolicyName,
  						null,
  						null,
  						true,
  						true);
  			}

  			//builds basic project info map
  			basicProjectInfo.put("name", projectName);
  			basicProjectInfo.put("type", projectSpaceType);
  			basicProjectInfo.put("policy", projectPolicy);
  			basicProjectInfo.put("vault", projectVault);
  			basicProjectInfo.put("description", projectDescrption);
  			
  			//Builds related project info map
  			relatedProjectInfo.put("programId", programId);
  			relatedProjectInfo.put("businessUnitId", businessUnitId);
  			relatedProjectInfo.put("businessGoalId", businessGoalId);
            relatedProjectInfo.put("deliverableId", deliverabletId);

  			boolean isCopyFolderData	= true;
  			boolean isCopyFinancialData = true;
			boolean keepSourceConstraints = true;
			boolean keepSourceColors = true;

  			if(ProgramCentralUtil.isNullString(copyFolderData) || "false".equalsIgnoreCase(copyFolderData)){
  				isCopyFolderData = false;
  			}

  			if(ProgramCentralUtil.isNullString(copyFinancialData) || "false".equalsIgnoreCase(copyFinancialData)){
  				isCopyFinancialData = false;
  			}

			if(ProgramCentralUtil.isNullString(sKeepSourceConstraints) || "false".equalsIgnoreCase(sKeepSourceConstraints)){
				keepSourceConstraints = false;
			}
			//Can Comment iF as both statement in If and Else are same
			if(ProgramCentralUtil.isNullString(sKeepSourceColors) || "false".equalsIgnoreCase(sKeepSourceColors)){
				PropertyUtil.setGlobalRPEValue(context, "CopyColorAttribute", "true");
			}else{
				PropertyUtil.setGlobalRPEValue(context, "CopyColorAttribute", "true");
			}
			
			
			ContentReplicateOptions selectedOptionForReferenceDocument = ContentReplicateOptions.COPY;
			if(ProgramCentralUtil.isNullString(refernceDocument) || "Reference".equalsIgnoreCase(refernceDocument)){
				selectedOptionForReferenceDocument = ContentReplicateOptions.CONNECT_EXISTING;
			}

  			//Create new project object.
  			if("Blank".equalsIgnoreCase(createProject) || 
  					"Import".equalsIgnoreCase(createProject)){

  				newProject = project.createBlankProject(context, 
  						basicProjectInfo, 
  						attributeMap, 
  						relatedProjectInfo);

  			}else if("Clone".equalsIgnoreCase(createProject)){
  				boolean isConnectRelatedProject = false;
  				if(ProgramCentralUtil.isNotNullString(connectRelatedProjects) &&
  						connectRelatedProjects.equalsIgnoreCase("True")){
  					isConnectRelatedProject = true;
  				}

  				//create new project from existing object.
  				newProject = project.clone(context, 
  						selectedProjectId, 
  						basicProjectInfo,
  						relatedProjectInfo, 
  						attributeMap,
  						isConnectRelatedProject,
  						isCopyFolderData,
  						isCopyFinancialData,
						keepSourceConstraints);

  			}else if("Template".equalsIgnoreCase(createProject)){
  				boolean  isTemplateTaskAutoName = false;
  				String questionResponseValue 	= (String) CacheUtil.getCacheObject(context, "QuestionsResponse");
  				String resourceTemplateId 	    = (String)programMap.get("ResourceTemplate");

  				Map <String,String>questionResponseMap = new HashMap<String,String>();
  				if(ProgramCentralUtil.isNotNullString(questionResponseValue)){
  					StringList questionResponseValueList = FrameworkUtil.split(questionResponseValue, "|");
  					for(int i=0;i<questionResponseValueList.size();i++){
  						String questionRValue = (String)questionResponseValueList.get(i);
  						StringList questionActualRList = FrameworkUtil.split(questionRValue, "=");
  						questionResponseMap.put((String)questionActualRList.get(0), (String)questionActualRList.get(1));
  					}
  				}


  				//update related info
  				relatedProjectInfo.put("resourceTemplateId", resourceTemplateId);

  				newProject = project.cloneTemplateToCreateProject(context, 
  						selectedProjectId, 
  						basicProjectInfo, 
  						relatedProjectInfo, 
  						attributeMap,
  						questionResponseMap, 
  						isTemplateTaskAutoName,
  						isCopyFolderData,
						isCopyFinancialData,
						keepSourceConstraints,
                        selectedOptionForReferenceDocument, calendarIds);
  			}
  			//Get new project ID
  			String newProjectId = newProject.getObjectId();
  			if(!ProgramCentralUtil.isNullString(ProjectAdministrator)){//Project Admin Owner setting
  				newProject.setOwner(context, ProjectAdministrator);
  				String memberRELID = newProject.getInfo(context, "from[" + DecConstants.RELATIONSHIP_MEMBER + "].id");//Member owner connection id
  				MqlUtil.mqlCommand(context, "mod connection $1 $2 $3", memberRELID, "decProjectMemberRole", "PIM");//멤버역할 PIM 설정
  			}
  			
  			returnMap.put("id", newProjectId);
            if(!"Template".equalsIgnoreCase(createProject)) {
  			// If only one calendar is selected then that will be connected as Default Calendar
  			if(calendarIds.size()==1){
  				String defaultCalendarId = calendarIds.get(0) +"|DefaultCalendar";
  				calendarIds.remove(0);
  				calendarIds.add(defaultCalendarId);
  			}
  			newProject.addCalendars(context, calendarIds);
  			
  			boolean isOngoing = decProjectType.equalsIgnoreCase("ongoing");
  			if(isOngoing) {
  				if(ProgramCentralUtil.isNotNullString(BiddingProject)) {
  					DomainObject biddingObject = DomainObject.newInstance(context,BiddingProject);
  	  				DomainObject ongoingObject = DomainObject.newInstance(context,newProjectId);
  	  				ongoingObject.setAttributeValues(context, biddingObject.getAttributeMap(context));//입찰 attribute 복사
  	  				DomainRelationship.connect(context, biddingObject,DecConstants.RELATIONSHIP_DECPROJECTEXECUTIONREL,ongoingObject);
  	  				ongoingObject.setState(context, ProgramCentralConstants.STATE_PROJECT_SPACE_CREATE);
  	  				ongoingObject.setAttributeValue(context,DecConstants.ATTRIBUTE_DECPROJECTTYPE, decProjectType);
  	  				ongoingObject.setAttributeValue(context,DecConstants.ATTRIBUTE_DECPROJECTSTATUS, DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_INPROGRESS); //decProjectStatus - In-Progress
  				}
  			}
  			
  			HashMap setZero = new HashMap();
  			setZero.put("decTotalCost",0);
  			setZero.put("decTotalCost_USD",0);
  			setZero.put("decOurCompanyCost",0);
  			setZero.put("decOurCompanyCost_USD",0);
  			newProject.setAttributeValues(context, setZero);
  			
  			// Code Master 복제
//  			cloneCodeMaster(context, newProjectId);
  			decCodeMaster_mxJPO codeJPO = new decCodeMaster_mxJPO();
  			codeJPO.cloneCodeMaster(context, newProjectId, null);
  			
  			// Added by hslee on 2023.06.16 --- [s]
  			if ( isOngoing )
  			{
  				String newProjectName = newProject.getInfo(context, DecConstants.SELECT_NAME);
  				
  				// Get I/F Data
  				doInterfaceProject(context, newProjectName);
  				
  				decKeyQty_mxJPO keyQtyJPO = new decKeyQty_mxJPO();
  				keyQtyJPO.cloneKeyQtyMaster(sqlSession, newProjectName, null);
  			}
  			// Added by hslee on 2023.06.16 --- [e]
  			
  			ContextUtil.commitTransaction(context);
  			sqlSession.commit(); // Added by hslee on 2023.06.20
  			
  			//required for Calendars
  			Task rollup = new Task(newProjectId);
  			rollup.rollupAndSave(context);
			}
  		}catch(Exception ex){
  			ContextUtil.abortTransaction(context);
  			ex.printStackTrace();
  			if(ex.getMessage().contains("No create access")){
  				throw new Exception(EnoviaResourceBundle.getProperty(context,ProgramCentralConstants.PROGRAMCENTRAL, 
  						"emxProgramCentral.Project.NoCreateAccess", context.getSession().getLanguage()));
  			}
  			else{
  				throw  ex;
  			}
  		}finally{
  			PropertyUtil.setGlobalRPEValue(context, "CopyColorAttribute", "true");
  		}

  		return returnMap;
  	}
    
    @com.matrixone.apps.framework.ui.ExcludeOIDProgramCallable
	public StringList includeBiddingProject(Context context,String[]args)throws Exception
	{
		StringList slFinalList = new StringList();
		try{
			StringList slSelect = new StringList(2);
			slSelect.addElement(DomainObject.SELECT_ID);
			slSelect.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTTYPE);
			
			String typePattern = ProgramCentralConstants.TYPE_PROJECT_SPACE;			
			MapList mpProjectList = DomainObject.findObjects(context,
					typePattern,
					null,
					null,
					slSelect);                                   

			for (Iterator iterator = mpProjectList.iterator(); iterator.hasNext();) {
				Map projectInfoMap = (Map) iterator.next();
				String objectId = (String)projectInfoMap.get(DomainObject.SELECT_ID);				
				String isDecProjectType = (String)projectInfoMap.get(DecConstants.SELECT_ATTRIBUTE_DECPROJECTTYPE);
				
				if("bidding".equalsIgnoreCase(isDecProjectType)){
					slFinalList.addElement(objectId);
				}
			}
			return slFinalList;
		}catch(Exception e){
			e.printStackTrace();
			throw new MatrixException(e);
		}
	}
    
    @com.matrixone.apps.framework.ui.ExcludeOIDProgramCallable
	public StringList includeCompleteBiddingProject(Context context,String[]args)throws Exception
	{
		StringList slFinalList = new StringList();
		try{
			StringList slSelect = new StringList(2);
			slSelect.addElement(DomainObject.SELECT_ID);
			slSelect.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTTYPE);
			slSelect.add(DomainObject.SELECT_CURRENT);
			
			String typePattern = ProgramCentralConstants.TYPE_PROJECT_SPACE;			
			MapList mpProjectList = DomainObject.findObjects(context,
					typePattern,
					null,
					null,
					slSelect);                                   

			for (Iterator iterator = mpProjectList.iterator(); iterator.hasNext();) {
				Map projectInfoMap = (Map) iterator.next();
				String objectId = (String)projectInfoMap.get(DomainObject.SELECT_ID);				
				String isDecProjectType = (String)projectInfoMap.get(DecConstants.SELECT_ATTRIBUTE_DECPROJECTTYPE);
				String objectCurrent= (String)projectInfoMap.get(DomainObject.SELECT_CURRENT);

				if("bidding".equalsIgnoreCase(isDecProjectType) && ProgramCentralConstants.STATE_PROJECT_SPACE_COMPLETE.equalsIgnoreCase(objectCurrent)){
					slFinalList.addElement(objectId);
				}
			}
			return slFinalList;
		}catch(Exception e){
			e.printStackTrace();
			throw new MatrixException(e);
		}
	}
    
	@com.matrixone.apps.framework.ui.ExcludeOIDProgramCallable
	public StringList includeProjectStatusWinProject(Context context,String[]args)throws Exception
	{
		StringList slFinalList = new StringList();
		try{
			StringList slSelect = new StringList(2);
			slSelect.addElement(DomainObject.SELECT_ID);
			slSelect.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTSTATUS);
			
			String typePattern = ProgramCentralConstants.TYPE_PROJECT_SPACE;			
			MapList mpProjectList = DomainObject.findObjects(context,
					typePattern,
					null,
					null,
					slSelect);                                   

			for (Iterator iterator = mpProjectList.iterator(); iterator.hasNext();) {
				Map projectInfoMap = (Map) iterator.next();
				String objectId = (String)projectInfoMap.get(DomainObject.SELECT_ID);				
				String projectStatus = (String)projectInfoMap.get(DecConstants.SELECT_ATTRIBUTE_DECPROJECTSTATUS);

				if(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_WIN.equalsIgnoreCase(projectStatus)){
					slFinalList.addElement(objectId);
				}
			}
			return slFinalList;
		}catch(Exception e){
			e.printStackTrace();
			throw new MatrixException(e);
		}
	}
	
	public StringList includeProgressProject(Context context,String[]args)throws Exception
	{
		StringList slFinalList = new StringList();
		try{
			String sWhere ="current != 'Complete' && current != 'Archive' && current != 'Hold' && current != 'Cancel'";
			String typePattern = ProgramCentralConstants.TYPE_PROJECT_SPACE;	
			StringList slSelect = new StringList(3);
			slSelect.addElement(DomainObject.SELECT_ID);
			slSelect.addElement(DomainObject.SELECT_NAME);
			slSelect.addElement("from[Member|to.name=="+context.getUser()+"]");
			MapList mpProjectList = DomainObject.findObjects(context,
					typePattern,
					null,
					sWhere,
					slSelect);                                   

			for (Iterator iterator = mpProjectList.iterator(); iterator.hasNext();) {
				Map projectInfoMap = (Map) iterator.next();
				String objectId = (String)projectInfoMap.get(DomainObject.SELECT_ID);	
				String objectName = (String)projectInfoMap.get(DomainObject.SELECT_NAME);
				String isMember = (String)projectInfoMap.get("from[Member]");
				
				if(isMember!=null) {
					if(isMember.equalsIgnoreCase("TRUE")) {
						slFinalList.addElement(objectId);
					}
				} 
			}
			return slFinalList;
		}catch(Exception e){
			e.printStackTrace();
			throw new MatrixException(e);
		}
	}
	
	public boolean isEPCTypeContainE(Context context, String args[]) throws Exception {
	    //System Admin,Proejct Admin 만 true
    	Map programMap = JPO.unpackArgs(args);
    	String objectId = (String) programMap.get("objectId");
    	DomainObject object = new DomainObject(objectId);
    	String EPCType = object.getAttributeValue(context, DecConstants.ATTRIBUTE_DECEPCTYPE);
    	
    	boolean isEPCType = false;

    	if(EPCType.contains("E")) {
    		isEPCType = true;
    	}
    	
		return isEPCType;
	}
	
	public boolean isEPCTypeContainP(Context context, String args[]) throws Exception {
	    //System Admin,Proejct Admin 만 true
    	Map programMap = JPO.unpackArgs(args);
    	String objectId = (String) programMap.get("objectId");
    	DomainObject object = new DomainObject(objectId);
    	String EPCType = object.getAttributeValue(context, DecConstants.ATTRIBUTE_DECEPCTYPE);
    	
    	boolean isEPCType = false;

    	if(EPCType.contains("P")) {
    		isEPCType = true;
    	}
    	
		return isEPCType;
	}
	
	public boolean isEPCTypeContainC(Context context, String args[]) throws Exception {
	    //System Admin,Proejct Admin 만 true
    	Map programMap = JPO.unpackArgs(args);
    	String objectId = (String) programMap.get("objectId");
    	DomainObject object = new DomainObject(objectId);
    	String EPCType = object.getAttributeValue(context, DecConstants.ATTRIBUTE_DECEPCTYPE);
    	
    	boolean isEPCType = false;

    	if(EPCType.contains("C")) {
    		isEPCType = true;
    	}
    	
		return isEPCType;
	}
	
    public boolean isSystemAdmin(Context context, String args[]) throws Exception {
    //System Admin 만 true    
		boolean isSystemAdmin = true;
		if(!context.isAssigned("decSystemAdmin")) {
			isSystemAdmin = false;
		}
		return isSystemAdmin;
  	 }
    
    public boolean isAdmins(Context context, String args[]) throws Exception {
    //System Admin,Proejct Admin 만 true
    	Map programMap = JPO.unpackArgs(args);
    	String objectId = (String) programMap.get("objectId");
    	DomainObject object = new DomainObject(objectId);
    	String loginUser = context.getUser();
    	String owner = object.getInfo(context, "owner");
    	
		boolean isAdmin = false;

		if(context.isAssigned("decSystemAdmin") || loginUser.equalsIgnoreCase(owner)) {
			isAdmin = true;
		}
		return isAdmin;
  	 }
    
    public String setProjectName(Context context, String args[]) throws Exception {
	//완료된 입찰 프로젝트에서 수행 프로젝트를 생성하는 폼에 default값으로 현재 프로젝트 이름 입력    
    	String name = "";
    	
    	Map programMap 				= (HashMap) JPO.unpackArgs(args);
    	Map requestMap 				= (HashMap) programMap.get("requestMap");
    	String objectId				= (String) requestMap.get("objectId");
		
		if(ProgramCentralUtil.isNotNullString(objectId)) {
			DomainObject parentObject = DomainObject.newInstance(context, objectId);
	    	name = parentObject.getName(context);
		}
		return name;
  	 }
    
    public void updateFunctionProject(Context context, String args[]) throws Exception {
    	//오류 방지용
  	}
    
    public void setDBColumnUpdate(Context context, String args[]) throws Exception {
    	Map programMap = (HashMap) JPO.unpackArgs(args);
    	Map paramMap = (HashMap) programMap.get("paramMap");
    	Map columnMap = (HashMap) programMap.get("columnMap");
    	Map requestMap = (HashMap) programMap.get("requestMap");
    	try (SqlSession sqlSession = decSQLSessionFactory.getSession()){
    		/*
    		String strMsg = EnoviaResourceBundle.getProperty(context, ProgramCentralConstants.PROGRAMCENTRAL,
                    "emxProgramCentral.BusinessUnitDialog.AlertNumbers", context.getSession().getLanguage());
            MqlUtil.mqlCommand(context, "warning $1", strMsg);
            
            */
    		String newValue = (String) paramMap.get("New Value");
    		String cutOffWeek = (String) paramMap.get("objectId");
    		String columnName = (String) columnMap.get("name");
    		String objectId = (String) requestMap.get("objectId");
    		
    		if(ProgramCentralUtil.isNullString(newValue) || newValue.equalsIgnoreCase("")) {//빈값 입력시 자동으로 0 처리
    			newValue = "0";
    		}
    		
    		DomainObject object = new DomainObject(objectId);
    		String objectName = object.getInfo(context, "name");
    		Map selectParamMap = new HashMap();
    		selectParamMap.put("SITE_CD",objectName); 
    		selectParamMap.put("CUT_OFF_WEEK",cutOffWeek); 
			List<Map> resultList = sqlSession.selectList("Project.selectSafetyStaticsOne", selectParamMap);
    		HashMap hm = (HashMap) resultList.get(0);
    		hm.put("SITE_CD", objectName);
    		hm.put("CUT_OFF_WEEK",cutOffWeek);
    		if(columnName.equalsIgnoreCase("NoAccidentHour")) {
    			hm.put("NO_ACCIDENT_HOUR", Integer.valueOf(newValue));
    		} else if(columnName.equalsIgnoreCase("Death")) {
    			hm.put("DEATH", Integer.valueOf(newValue));
    		} else if(columnName.equalsIgnoreCase("Injury")) {
    			hm.put("INJURY", Integer.valueOf(newValue));
    		} else if(columnName.equalsIgnoreCase("NearMiss")) {
    			hm.put("NEAR_MISS", Integer.valueOf(newValue));
    		} else if(columnName.equalsIgnoreCase("Uauc")) {
    			hm.put("UA_UC", Integer.valueOf(newValue));
    		} else if(columnName.equalsIgnoreCase("PeopleInput")) {
    			hm.put("PEOPLE_INPUT", Integer.valueOf(newValue));
    		} 
    		int updatedRow = 0;
    		updatedRow = sqlSession.update("Project.updateSafetyStatics2", hm);
    		
    		sqlSession.commit();
    		
    	} catch(Exception e){
    		e.printStackTrace();
    	}
  	}
    
    public void setDBColumnUpdate2(Context context, String args[]) throws Exception {
    	Map programMap = (HashMap) JPO.unpackArgs(args);
    	Map paramMap = (HashMap) programMap.get("paramMap");
    	Map columnMap = (HashMap) programMap.get("columnMap");
    	Map requestMap = (HashMap) programMap.get("requestMap");
    	try (SqlSession sqlSession = decSQLSessionFactory.getSession()){
    		/*
    		String strMsg = EnoviaResourceBundle.getProperty(context, ProgramCentralConstants.PROGRAMCENTRAL,
                    "emxProgramCentral.BusinessUnitDialog.AlertNumbers", context.getSession().getLanguage());
            MqlUtil.mqlCommand(context, "warning $1", strMsg);
            
            */
    		String newValue = (String) paramMap.get("New Value");
    		String cutOffWeek = (String) paramMap.get("objectId");
    		String columnName = (String) columnMap.get("name");
    		String objectId = (String) requestMap.get("objectId");
    		
    		if(newValue.contains("-")) {
    			newValue = "";
    		}
    		
    		DomainObject object = new DomainObject(objectId);
    		String objectName = object.getInfo(context, "name");
    		Map selectParamMap = new HashMap();
    		selectParamMap.put("SITE_CD",objectName); 
    		selectParamMap.put("CUT_OFF_WEEK",cutOffWeek); 
			List<Map> resultList = sqlSession.selectList("Project.selectProgressOneForUpdate", selectParamMap);
			
    		HashMap hm = (HashMap) resultList.get(0);
    	
    		Iterator<String> iter = hm.keySet().iterator();
            
            while(iter.hasNext()) {
                String key = iter.next();
                String value = (String) hm.get(key);
                
                if(value.contains("-")) {
                	hm.put(key, "");
                }
            }
    		
    		hm.put("SITE_CD", objectName);
    		hm.put("CUT_OFF_WEEK",cutOffWeek);
    		if(columnName.equalsIgnoreCase("EngineeringPlan")) {
    			hm.put("ENG_PLAN", newValue);
    		} else if(columnName.equalsIgnoreCase("EngineeringActual")) {
    			hm.put("ENG_ACTUAL", newValue);
    		} else if(columnName.equalsIgnoreCase("ProcurementPlan")) {
    			hm.put("PROC_PLAN", newValue);
    		} else if(columnName.equalsIgnoreCase("ProcurementActual")) {
    			hm.put("PROC_ACTUAL", newValue);
    		} else if(columnName.equalsIgnoreCase("ConstructionPlan")) {
    			hm.put("CON_PLAN", newValue);
    		} else if(columnName.equalsIgnoreCase("ConstructionActual")) {
    			hm.put("CON_ACTUAL", newValue);
    		} else if(columnName.equalsIgnoreCase("CommissioningPlan")) {
    			hm.put("COMM_PLAN", newValue);
    		} else if(columnName.equalsIgnoreCase("CommissioningActual")) {
    			hm.put("COMM_ACTUAL", newValue);
    		} else if(columnName.equalsIgnoreCase("OverallPlan")) {
    			hm.put("OVERALL_PLAN", newValue);
    		} else if(columnName.equalsIgnoreCase("OverallActual")) {
    			hm.put("OVERALL_ACTUAL", newValue);
    		} 
    		int updatedRow = 0;
    		updatedRow = sqlSession.update("Project.updateProgress2", hm);
    		
    		sqlSession.commit();
    		
    	} catch(Exception e){
    		e.printStackTrace();
    	}
  	}
    public void setDBColumnUpdateConstructionKPI(Context context, String args[]) throws Exception {
    	setDBColumnUpdateByProjectData(context, args, "updateImportConstructionKPI");
    }
    public void setDBColumnUpdateByProjectData(Context context, String args[], String sMapperId) throws Exception {
    	Map programMap = (HashMap) JPO.unpackArgs(args);
    	Map paramMap = (HashMap) programMap.get("paramMap");
    	Map columnMap = (HashMap) programMap.get("columnMap");
    	Map requestMap = (HashMap) programMap.get("requestMap");
    	try (SqlSession sqlSession = decSQLSessionFactory.getSession()){
    		/*
    		String strMsg = EnoviaResourceBundle.getProperty(context, ProgramCentralConstants.PROGRAMCENTRAL,
                    "emxProgramCentral.BusinessUnitDialog.AlertNumbers", context.getSession().getLanguage());
            MqlUtil.mqlCommand(context, "warning $1", strMsg);
            
            */
    		String newValue = (String) paramMap.get("New Value");
    		String sCOLUMNID = (String) paramMap.get("objectId");
    		String columnName = (String) columnMap.get("name");
    		String sPSOID = (String) requestMap.get("objectId");
    		DomainObject doPS = DomainObject.newInstance(context,sPSOID);
    		doPS.open(context);
    		HashMap hmUpdateData = new HashMap();

            hmUpdateData.put("ID",sCOLUMNID); 
            hmUpdateData.put("SITE_CD",doPS.getName()); 
    		hmUpdateData.put(columnName.toUpperCase(), newValue);
    		int updatedRow = 0;
    		updatedRow = sqlSession.update("Project." + sMapperId, hmUpdateData);
    		
    		sqlSession.commit();
    		
    	} catch(Exception e){
    		e.printStackTrace();
    	}
  	}
    
    public boolean isCompleteBidding(Context context, String args[]) throws Exception {
    	boolean flag = false;
    	
    	Map programMap 				= (HashMap) JPO.unpackArgs(args);
    	String objectId				= (String) programMap.get("objectId");
		
		if(ProgramCentralUtil.isNotNullString(objectId)) {
			flag = true;
		}
		return flag;
  	 }
    public boolean isNotCompleteBidding(Context context, String args[]) throws Exception {
    	boolean flag = false;
    	
    	Map programMap 				= (HashMap) JPO.unpackArgs(args);
    	String objectId				= (String) programMap.get("objectId");
		
		if(ProgramCentralUtil.isNullString(objectId)) {
			flag = true;
		}
		return flag;
  	 }
    
    public MapList getProjectSelect(Context context, String[] args) throws Exception
    {
    	HashMap programMap = (HashMap)JPO.unpackArgs(args);
    	return getProjectSelect(context, programMap);
    }

	public MapList getProjectSelect(Context context, Map programMap) throws Exception {
		String sObjectId = (String) programMap.get("objectId");//command에서 MapList 불러올때
    	String select = (String) programMap.get("select");
    	
    	boolean isSafetyOrProgress = false;
    	if(select.equalsIgnoreCase("Project.selectSafetyStatics") || select.equalsIgnoreCase("Project.selectProgress")) {
    		isSafetyOrProgress = true;
    	}
    	
    	if(sObjectId==null) {//table에서 List 불러올때
    		HashMap paramList = (HashMap)programMap.get("paramList");
    		sObjectId = (String) paramList.get("objectId");
    	}
    	
    	try (SqlSession sqlSession = decSQLSessionFactory.getSession()) {
    		MapList projectBizList = new MapList();
    		DomainObject object = new DomainObject(sObjectId);
    		Map selectParamMap = new HashMap();
    		
    		selectParamMap.put("SITE_CD", object.getInfo(context, "name"));
    		if(isSafetyOrProgress) {
    			selectParamMap.put("SITE_CD", object.getInfo(context, "name"));
    			
    			// Added by hslee on 2023.07.24 --- [s]
    			// 프로젝트 초기 화면에서 최신 공정률(overall) 조회
    			String MAX_CUT_OFF_DATE = (String) programMap.get("MAX_CUT_OFF_DATE");
    			if ( MAX_CUT_OFF_DATE != null )
    			{
    				selectParamMap.put("MAX_CUT_OFF_DATE", MAX_CUT_OFF_DATE);
    			}
    			// Added by hslee on 2023.07.24 --- [e]
    		}
    		List<Map> resultList = sqlSession.selectList(select, selectParamMap);
    		for(int i=0;resultList.size()>i;i++) {
    			HashMap hm = (HashMap) resultList.get(i);
    			if(isSafetyOrProgress) {
    				String id = (String) hm.get("CUT_OFF_WEEK");
    				hm.put("id", id);
        		}
    			projectBizList.add(hm);
    		}
    		return projectBizList;
    	} catch(Exception e) {
    		e.printStackTrace();
    		throw e;
    	}
	}
	
	public MapList getProjectComparison(Context context, String[] args) throws Exception
    {
    	HashMap programMap = (HashMap)JPO.unpackArgs(args);
    	return getProjectComparison(context, programMap);
    }

	public MapList getProjectComparison(Context context, Map programMap) throws Exception {
		MapList projectBizList = new MapList();
		String cmd = (String) programMap.get("portalCmdName");
		String projectName = (String) programMap.get("projectName");
		String[] projectNameList = projectName.split("\\|"); 
		List<Map> resultList = null;
		
		
    	try (SqlSession sqlSession = decSQLSessionFactory.getSession()) {
    		
    		Map selectParamMap = new HashMap();

    		for(int i=0;i<projectNameList.length;i++) {
    			selectParamMap.put("PROJECT_NAME" + String.valueOf(i+1), projectNameList[i]);
    		}
    		
    		if(cmd.equalsIgnoreCase("decProjectMaterialComparisonPartCd")) {
    			if(projectNameList.length == 2) {
    				resultList = sqlSession.selectList("Project.selectProjectMaterialComparisonPartCd2", selectParamMap);
    			} else {
    				resultList = sqlSession.selectList("Project.selectProjectMaterialComparisonPartCd3", selectParamMap);
    			}
    		} else if(cmd.equalsIgnoreCase("decProjectMaterialComparisonCommodityCd")) {
    			if(projectNameList.length == 2) {
    				resultList = sqlSession.selectList("Project.selectProjectMaterialComparisonCommodityCd2", selectParamMap);
    			} else {
    				resultList = sqlSession.selectList("Project.selectProjectMaterialComparisonCommodityCd3", selectParamMap);
    			}
    		} else if(cmd.equalsIgnoreCase("decProjectMaterialComparisonIdentCd")) {
    			if(projectNameList.length == 2) {
    				resultList = sqlSession.selectList("Project.selectProjectMaterialComparisonIdentCd2", selectParamMap);
    			} else {
    				resultList = sqlSession.selectList("Project.selectProjectMaterialComparisonIdentCd3", selectParamMap);
    			}
    		}

    		for(int i=0;resultList.size()>i;i++) {
    			HashMap hm = (HashMap) resultList.get(i);
    			projectBizList.add(hm);
    		}
    		return projectBizList;
    	} catch(Exception e) {
    		e.printStackTrace();
    		throw e;
    	}
	}
    
	private Map generateMaterialComparisonColumnMap(String projectName) throws Exception{
		try {
			Map columnMap = new HashMap();
			columnMap.put("label", projectName);
			if(projectName.matches("[-+]?\\d*\\.?\\d+")) {//Project Code가 숫자일 경우
				columnMap.put("name", "Convert"+projectName);//숫자로 table name을 설정하면 오류 발생
			} else {
				columnMap.put("name", projectName);
			}
			
			Map settingMap = new HashMap();
			settingMap.put("Registered Suite", "ProgramCentral");
			settingMap.put("Column Type", "program");
			settingMap.put("program", "emxProjectSpace");
			settingMap.put("function", "getDBDataList");
			settingMap.put("columnName", projectName);
			settingMap.put("Number Format", "true");
			settingMap.put("format", "number");
			settingMap.put("dynamicColumnName", projectName);
			
			columnMap.put("settings", settingMap);

			return columnMap;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
	
	public MapList getDynamicMaterialComparisonColumn(Context context, String[] args) throws Exception{
		try {
			Map programMap = JPO.unpackArgs(args);
			Map requestMap = (Map) programMap.get("requestMap");
			
			String[] projectName = String.valueOf(requestMap.get("projectName")).split("\\|"); 
			
			MapList columnList = new MapList();
			
			for(int i=0;i < projectName.length;i++) {
				columnList.add(generateMaterialComparisonColumnMap(projectName[i]));
			}
			
			return columnList;
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		
    }
	
    /*
    public List getDBColumn(Context context, String[] args) throws Exception
    {
    	List<String> ls;
		try {
			HashMap programMap = (HashMap)JPO.unpackArgs(args);
			// get the columnMap    	 
			HashMap columnMap = (HashMap)programMap.get("columnMap");
			// get the settingsMap
			HashMap settingsMap = (HashMap)columnMap.get("settings");
			// Modified by hslee on 2023.06.20 --- [s]
			String format = (String) settingsMap.get("format");
			boolean isDateFormat = "date".equalsIgnoreCase(format);
			// Modified by hslee on 2023.06.20 --- [e]
			String key = (String) settingsMap.get("key");
			MapList mp = (MapList) programMap.get("objectList");//command에서 불러온 MapList 불러오기

			ls = new Vector<String>();
			
			// Modified by hslee on 2023.06.20 --- [s]
			SimpleDateFormat ifDateFormat = new SimpleDateFormat("yyyyMMdd");
			SimpleDateFormat inputDateFormat = new SimpleDateFormat(eMatrixDateFormat.getInputDateFormat(), Locale.US);
			// Modified by hslee on 2023.06.20 --- [e]
			
			for(int i=0;i<mp.size();i++) {
				HashMap<String, Object> hm = (HashMap) mp.get(i);
				Object obj = hm.get(key);
				String str = null;
				
				if (obj instanceof BigDecimal || obj instanceof Timestamp) {
					str = String.valueOf(obj);
				} else {
					str = (String) obj;
				}
				
				// Modified by hslee on 2023.06.20 --- [s]
				if ( isDateFormat )
				{
					str = DecDateUtil.changeDateFormat(str, ifDateFormat, inputDateFormat);
				}
				// Modified by hslee on 2023.06.20 --- [e]
				
				ls.add(str);
			}
			return ls;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw e;
		}
    	
    }
    */
    
    // Modified by thok on 2023.05.08 --- [E]
    
    public String getImageHolder(Context context, String[] args) throws Exception {
    	return getImageSource(context, args, false);
    }
    
    public String getDecImageSource (Context context, String[] args) throws Exception {
    	return getImageSource(context, args, true);
    }
    
    /**
     * jhlee Add 05-25 오브젝트의 holder 이미지 뽑아내서 img태그 리턴
     * isDec가 true 일경우 decImageHolder의 이미지
     * isDec가 false 일경우 OOTB 'Image Holder'의 이미지
     * @param context
     * @param args
     * @param isDec
     * @return
     * @throws Exception
     */
    public String getImageSource(Context context, String[] args, boolean isDec) throws Exception {
    	StringBuilder sbResult  = new StringBuilder();
        
    	Map programMap = JPO.unpackArgs(args);
    	Map paramMap = (Map)programMap.get("paramMap");
    	String sObjectId = (String)paramMap.get("objectId");
    	String sStyle = DecStringUtil.nullToEmpty(paramMap.get("style"));
    	String sImageType = (String)paramMap.get("imageType");
        /*
         * Refactored by hslee on 2023.07.11
    	ArrayList bopArrayList  = new ArrayList();
    	
    	String sFileName = DecConstants.EMPTY_STRING;
    	String sImageHolderId = DecConstants.EMPTY_STRING;
    	DomainObject doObject = DomainObject.newInstance(context, sObjectId);
    	try {
    		if(isDec) {
    	    	String sImageType = (String)paramMap.get("imageType");
    			sFileName = doObject.getInfo(context, "to[" + DecConstants.RELATIONSHIP_DECIMAGEHOLDER + "|from." + DecConstants.SELECT_ATTRIBUTE_DECIMAGETYPE + "=='" + sImageType + "'].from." + DecConstants.SELECT_ATTRIBUTE_PRIMARY_IMAGE, false);
    	    	sImageHolderId = doObject.getInfo(context, "to[" + DecConstants.RELATIONSHIP_DECIMAGEHOLDER + "|from." + DecConstants.SELECT_ATTRIBUTE_DECIMAGETYPE + "=='" + sImageType + "'].from.id", false);
    		}else {
    			sFileName = doObject.getInfo(context, "to[" + DecConstants.MVL_RELATIONSHIP_IMAGE_HOLDER + "].from." + DecConstants.SELECT_ATTRIBUTE_PRIMARY_IMAGE, false);
    	    	sImageHolderId = doObject.getInfo(context, "to[" + DecConstants.MVL_RELATIONSHIP_IMAGE_HOLDER + "].from.id");
    		}
	    	HashMap objectMap = new HashMap();
			objectMap.put("id", sObjectId);
			MapList objectList = new MapList();
			objectList.add(objectMap);	
			BusinessObjectProxy bop = new BusinessObjectProxy(sImageHolderId, DecConstants.MVL_FORMAT_MX_IMAGE, sFileName, false, false);
			bopArrayList.add(bop);
			
			String[] tmpImageUrls = ImageRequestData.getImageURLS(context, context.getDocumentURL("", true), bopArrayList);
			
			if(tmpImageUrls.length>0){
				sURLPrimaryImage = tmpImageUrls[0];
				if(UIUtil.isNullOrEmpty(sURLPrimaryImage)) {
					sURLPrimaryImage = "../common/images/No image_JDW.jpg";
				}
			}else{
				sURLPrimaryImage = "../common/images/No image_JDW.jpg";
			}
		}catch(Exception e){
			sURLPrimaryImage = "../common/images/No image_JDW.jpg";
		}
		*/
        
    	String sURLPrimaryImage = getImageSourceOnly(context, sObjectId, sImageType, isDec);
	    sbResult.append("<img id='divDropPrimaryImage' src='").append(sURLPrimaryImage).append("' border='1' style='vertical-align:middle;border: 1px solid #bababa;box-shadow:1px 1px 2px #ccc;").append(sStyle).append("'></img>");
	    
	    return sbResult.toString();
    }
    
    public String getImageSourceOnly(Context context, String[] args) throws Exception {
		Map programMap = JPO.unpackArgs(args);
		String objectId = (String) programMap.get("objectId");
		String imageType = (String) programMap.get("imageType");
		boolean isDec = Boolean.valueOf( (String) programMap.get("isDec") );
		
		return getImageSourceOnly(context, objectId, imageType, isDec);
    }
    
    public String getImageSourceOnly(Context context, String sObjectId, String sImageType, boolean isDec) throws Exception {
        String sURLPrimaryImage = "" ;
    	ArrayList bopArrayList  = new ArrayList();
    	String sFileName = DecConstants.EMPTY_STRING;
    	String sImageHolderId = DecConstants.EMPTY_STRING;
    	DomainObject doObject = DomainObject.newInstance(context, sObjectId);
    	try {
    		if(isDec) {
    			sFileName = doObject.getInfo(context, "to[" + DecConstants.RELATIONSHIP_DECIMAGEHOLDER + "|from." + DecConstants.SELECT_ATTRIBUTE_DECIMAGETYPE + "=='" + sImageType + "'].from." + DecConstants.SELECT_ATTRIBUTE_PRIMARY_IMAGE, false);
    	    	sImageHolderId = doObject.getInfo(context, "to[" + DecConstants.RELATIONSHIP_DECIMAGEHOLDER + "|from." + DecConstants.SELECT_ATTRIBUTE_DECIMAGETYPE + "=='" + sImageType + "'].from.id", false);
    		}else {
    			sFileName = doObject.getInfo(context, "to[" + DecConstants.MVL_RELATIONSHIP_IMAGE_HOLDER + "].from." + DecConstants.SELECT_ATTRIBUTE_PRIMARY_IMAGE, false);
    	    	sImageHolderId = doObject.getInfo(context, "to[" + DecConstants.MVL_RELATIONSHIP_IMAGE_HOLDER + "].from.id");
    		}
	    	HashMap objectMap = new HashMap();
			objectMap.put("id", sObjectId);
			MapList objectList = new MapList();
			objectList.add(objectMap);	
			BusinessObjectProxy bop = new BusinessObjectProxy(sImageHolderId, DecConstants.MVL_FORMAT_MX_IMAGE, sFileName, false, false);
			bopArrayList.add(bop);
			
			String[] tmpImageUrls = ImageRequestData.getImageURLS(context, context.getDocumentURL("", true), bopArrayList);
			
			if(tmpImageUrls.length>0){
				sURLPrimaryImage = tmpImageUrls[0];
				if(UIUtil.isNullOrEmpty(sURLPrimaryImage)) {
					sURLPrimaryImage = "../common/images/No image_JDW.jpg";
				}
			}else{
				sURLPrimaryImage = "../common/images/No image_JDW.jpg";
			}
		}catch(Exception e){
			sURLPrimaryImage = "../common/images/No image_JDW.jpg";
		}
    
	    return sURLPrimaryImage;
    }
    
    /**
     * jhlee Add 05-25 Project Space의 CWP Task 정보만 뽑아서 리턴
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public MapList getCWPTask(Context context, String[] args) throws Exception {
    	return getTask(context, args, DecConstants.TYPE_DECCWPTASK);
    }
    public MapList getIWPTask(Context context, String[] args) throws Exception {
    	return getTask(context, args, DecConstants.TYPE_DECIWPTASK);
    }
    public MapList getTask(Context context, String[] args, String sGetTaskType) throws Exception {
    	MapList mlFilterDecTask = new MapList();
    	MapList mlDecTask = new MapList();
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
        	StringList slBusSelect = new StringList();
        	slBusSelect.add(DecConstants.SELECT_LEVEL);
        	slBusSelect.add(DecConstants.SELECT_TYPE);
        	slBusSelect.add(DecConstants.SELECT_NAME);
        	slBusSelect.add(DecConstants.SELECT_ID);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECDISCIPLINE);
        	slBusSelect.add(DecConstants.SELECT_CURRENT);
        	slBusSelect.add(DecConstants.SELECT_DESCRIPTION);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECKEYQUANTITYTYPE);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECKEYQUANTITYUOM);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_TASK_ESTIMATED_START_DATE);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECTASKFORECASTSTARTDATE);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_TASK_ACTUAL_START_DATE);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECKEYQUANTITYTOTAL);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECKEYQUANTITYCOMPLETED);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECPRIORITYGROUP);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECPRIORITYNO);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECSTAGE);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECSUBCONNO);
        	slBusSelect.add(DecConstants.SELECT_ATTRIBUTE_DECCWPACTIVITYTYPE);
        	slBusSelect.add("to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST + "].to." + DecConstants.SELECT_NAME);
        	slBusSelect.add("to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST + "].to." + DecConstants.SELECT_ID);
        	slBusSelect.add("from[" + DecConstants.RELATIONSHIP_SUBTASK + "].to." + DecConstants.SELECT_ID);
        	slBusSelect.add("from[" + DecConstants.RELATIONSHIP_SUBTASK + "].to." + DecConstants.SELECT_CURRENT);
        	slBusSelect.add("to[" + DecConstants.RELATIONSHIP_SUBTASK + "].from." + DecConstants.SELECT_ID);
        	slBusSelect.add("to[" + DecConstants.RELATIONSHIP_SUBTASK + "].from." + DecConstants.SELECT_NAME);
        	slBusSelect.add("to[" + DecConstants.RELATIONSHIP_SUBTASK + "].from." + DecConstants.SELECT_ATTRIBUTE_DECDISCIPLINE);
        	
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String sObjectId = (String) programMap.get("objectId");
            String sTaskId = null;
            String sLevel = null;
            String sTypePattern = null;
            String sCurrent = null;
            String sEstDate = null;
            String sForecastDate = null;
            String sProjectCode = null;
	    	String sParentKey = "to[" + DecConstants.RELATIONSHIP_SUBTASK + "].from.";
	    	String sMatrixFormat = eMatrixDateFormat.getEMatrixDateFormat();
            
            int iScheduleLevel = 0;
            if(DecStringUtil.equals(sGetTaskType, DecConstants.TYPE_DECCWPTASK)) {
            	sTypePattern = DecConstants.TYPE_DECCWPTASK + "," + DecConstants.TYPE_PHASE;
            }else if(DecStringUtil.equals(sGetTaskType, DecConstants.TYPE_DECIWPTASK)) {
            	sTypePattern = DecConstants.TYPE_DECIWPTASK + "," + DecConstants.TYPE_DECCWPTASK + "," + DecConstants.TYPE_PHASE;
            }
            DomainObject doObj = DomainObject.newInstance(context, sObjectId);
            
        	String emxTableRowIdExpr = (String)programMap.get("emxTableRowIdExpr");
        	StringList rowIdList = FrameworkUtil.splitString(emxTableRowIdExpr, ",");
        	if(!rowIdList.isEmpty()) {
            	String sCheckOID = rowIdList.get(0);
            	doObj = DomainObject.newInstance(context, sCheckOID);
        	}
        	String sFilterPlanStart = (String)programMap.get("CWP_Plan_Start");
        	String sFilterPlanEnd = (String)programMap.get("CWP_Plan_End");
        	long lFilterPlanStart	 = 0;
        	long lFilterPlanEnd		 = 0;
        	if(DecStringUtil.isNotEmpty(sFilterPlanStart)) {
            	Date dFilterPlanStart = DecDateUtil.autoChangeDate(sFilterPlanStart);
            	lFilterPlanStart = dFilterPlanStart.getTime();
        	}
        	if(DecStringUtil.isNotEmpty(sFilterPlanEnd)) {
            	Date dFilterPlanEnd = DecDateUtil.autoChangeDate(sFilterPlanEnd);
            	lFilterPlanEnd = dFilterPlanEnd.getTime() + 86400000;
        	}
        	
            String sObjType = doObj.getTypeName(context);
            StringList slIWPOIDList = new StringList();

        	if(DecStringUtil.equals(DecConstants.TYPE_PROJECT_SPACE, sObjType)) {
            	sProjectCode = doObj.getName();
        	}
        	
        	Map mObj = null;
        	Map mParent = null;
        	String sParentType = null;
            String sObjLevel = "0";
            
            Date date = new Date();
        	String sToday = DecDateUtil.changeDateFormat(date, DecDateUtil.IF_FORMAT);
        	Locale locale = context.getLocale();

        	MapList mlParent = doObj.getRelatedObjects(context,
								   DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
								   sTypePattern + "," + DecConstants.TYPE_PROJECT_SPACE, //pattern to match types
								   slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
								   null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
								   true, //get To relationships
								   false, //get From relationships
								   (short)0, //the number of levels to expand, 0 equals expand all.
								   DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
								   DecConstants.EMPTY_STRING, //where clause to apply to relationship, can be empty ""
								   0);
        	// 현재 오브젝트가 몇번쩨 레벨인지 가져옴
            for(Object o : mlParent) {
            	mParent = (Map)o;
            	sParentType = (String)mParent.get(DecConstants.SELECT_TYPE);
            	if(DecStringUtil.equals(DecConstants.TYPE_PROJECT_SPACE, sParentType)) {
                	sObjLevel = (String)mParent.get(DecConstants.SELECT_LEVEL);
                	sProjectCode = (String)mParent.get(DecConstants.SELECT_NAME);
            		break;
            	}
            }
            String sSummaryType = (String)programMap.getOrDefault("summaryType", DecConstants.EMPTY_STRING);
    		Map mParam = new HashMap();
    		mParam.put("SITE_CD", sProjectCode);
    		List lAllocationDataList = new ArrayList();
    		if(sSummaryType.equals("Field")){
    			lAllocationDataList = sqlSession.selectList("IF_Material.selectCWPSummaryFieldAllocation", mParam);
    		}else if(sSummaryType.equals("Shop")) {
    			lAllocationDataList = sqlSession.selectList("IF_Material.selectCWPSummaryShopAllocation", mParam);
    		}
    		Map<String, Map> mAllocationData = new HashMap();
    		String sCWPNo = null;
    		BigDecimal bdzero = BigDecimal.ZERO;
    		for(Object o : lAllocationDataList) {
            	Map mData = (Map)o;
            	sCWPNo = (String)mData.get("CWP_NO");
            	BigDecimal bdBOM = (BigDecimal)mData.getOrDefault("BOM", bdzero);
            	BigDecimal bdAllocation = (BigDecimal)mData.getOrDefault("ALLOCATION", bdzero);
            	BigDecimal bdStock1 = (BigDecimal)mData.getOrDefault("STOCK1", bdzero);
            	BigDecimal bdStock2 = (BigDecimal)mData.getOrDefault("STOCK2", bdzero);
            	mData.put("BOM", bdBOM.toString());
            	mData.put("ALLOCATION", bdAllocation.toString());
            	mData.put("STOCK1", bdStock1.toString());
            	mData.put("STOCK2", bdStock2.toString());
            	mAllocationData.put(sCWPNo, mData);
            }
    		
        	// CWP Task Tree메뉴에서 데이터 가져오는 program
            if(DecStringUtil.equals(sObjType, DecConstants.TYPE_DECCWPTASK)) {
                if(DecStringUtil.equals(sGetTaskType, DecConstants.TYPE_DECCWPTASK)) {
                	mObj = doObj.getInfo(context, slBusSelect);
                	sCurrent = (String)mObj.get(DecConstants.SELECT_CURRENT);
                	sEstDate = (String)mObj.get(DecConstants.SELECT_ATTRIBUTE_TASK_ESTIMATED_START_DATE);
                	sForecastDate = (String)mObj.get(DecConstants.SELECT_ATTRIBUTE_DECTASKFORECASTSTARTDATE);
                	sCurrent = getCWPTaskStateName(context, sForecastDate, sEstDate, sCurrent, sToday, locale);
                	mObj.put("scheduleLevel", Integer.valueOf(sObjLevel));
                	mObj.put("cmCurrent", sCurrent);
                	mlDecTask.add(mObj);
                }else if(DecStringUtil.equals(sGetTaskType, DecConstants.TYPE_DECIWPTASK)) {
                	MapList mlIWPTask = doObj.getRelatedObjects(context,
							DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
							DecConstants.TYPE_DECIWPTASK, //pattern to match types
							slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
							null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
							false, //get To relationships
							true, //get From relationships
							(short)0, //the number of levels to expand, 0 equals expand all.
							DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
							DecConstants.EMPTY_STRING, //where clause to apply to relationship, can be empty ""
							0);
                	Map mIWPTask = null;
                	for(Object o : mlIWPTask) {
                		mIWPTask = (Map)o;
                    	sLevel = (String)mIWPTask.get(DecConstants.SELECT_LEVEL);
                    	sCurrent = (String)mIWPTask.get(DecConstants.SELECT_CURRENT);
                    	sEstDate = (String)mIWPTask.get(DecConstants.SELECT_ATTRIBUTE_TASK_ESTIMATED_START_DATE);
                    	if(lFilterPlanStart != 0 || lFilterPlanEnd != 0) {
                        	Date dEstDate = DecDateUtil.autoChangeDate(sEstDate, sMatrixFormat);
                        	long lEstDate = dEstDate.getTime();
                        	if(lFilterPlanStart != 0 && lFilterPlanStart > lEstDate) {
                        		continue;
                        	}
                        	if(lFilterPlanEnd != 0 && lEstDate >= lFilterPlanEnd) {
                        		continue;
                        	}
                    	}
                    	sForecastDate = (String)mIWPTask.get(DecConstants.SELECT_ATTRIBUTE_DECTASKFORECASTSTARTDATE);
                    	sCurrent = getCWPTaskStateName(context, sForecastDate, sEstDate, sCurrent, sToday, locale);
                    	mIWPTask.put("scheduleLevel", Integer.valueOf(sObjLevel) + 1);
                    	mIWPTask.put("cmCurrent", sCurrent);
                	}
                	mlDecTask.addAll(mlIWPTask); 
                }
            // IWP Task Tree메뉴에서 데이터 가져오는 program
            }else if(DecStringUtil.equals(sObjType, DecConstants.TYPE_DECIWPTASK)) {
                int iLevel = Integer.valueOf(sObjLevel);
                if(DecStringUtil.equals(sGetTaskType, DecConstants.TYPE_DECCWPTASK)) {
                	String sCWPOID = doObj.getInfo(context, "to[" + DecConstants.RELATIONSHIP_SUBTASK + "].from.id");
                	doObj.setId(sCWPOID);
                	iLevel--;
                }
            	mObj = doObj.getInfo(context, slBusSelect);
            	sCurrent = (String)mObj.get(DecConstants.SELECT_CURRENT);
            	sEstDate = (String)mObj.get(DecConstants.SELECT_ATTRIBUTE_TASK_ESTIMATED_START_DATE);
            	sForecastDate = (String)mObj.get(DecConstants.SELECT_ATTRIBUTE_DECTASKFORECASTSTARTDATE);
            	sCurrent = getCWPTaskStateName(context, sForecastDate, sEstDate, sCurrent, sToday, locale);
            	mObj.put("scheduleLevel", iLevel);
            	mObj.put("cmCurrent", sCurrent);
            	mlDecTask.add(mObj);
            // Project Space / Phase Tree메뉴에서 가져오는 program
            }else {
                MapList mlSubTask = doObj.getRelatedObjects(context,
    											DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
    											sTypePattern, //pattern to match types
    											slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
    											null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
    											false, //get To relationships
    											true, //get From relationships
    											(short)0, //the number of levels to expand, 0 equals expand all.
    											DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
    											DecConstants.EMPTY_STRING, //where clause to apply to relationship, can be empty ""
    											0);
                Map mSubTask = null;
                String sType = null;
                for(Object o : mlSubTask) {
                	mSubTask = (Map)o;
                	sType = (String)mSubTask.get(DecConstants.SELECT_TYPE);
                	sLevel = (String)mSubTask.get(DecConstants.SELECT_LEVEL);
                	sTaskId = (String)mSubTask.get(DecConstants.SELECT_ID);
                	mSubTask.put("scheduleLevel", Integer.valueOf(sObjLevel) + Integer.valueOf(sLevel));
                	if(DecStringUtil.equals(sType, sGetTaskType)) {
                    	sCurrent = (String)mSubTask.get(DecConstants.SELECT_CURRENT);
                    	sEstDate = (String)mSubTask.get(DecConstants.SELECT_ATTRIBUTE_TASK_ESTIMATED_START_DATE);
                    	if(lFilterPlanStart != 0 || lFilterPlanEnd != 0) {
                        	Date dEstDate = DecDateUtil.autoChangeDate(sEstDate, sMatrixFormat);
                        	long lEstDate = dEstDate.getTime();
                        	if(lFilterPlanStart != 0 && lFilterPlanStart > lEstDate) {
                        		continue;
                        	}
                        	if(lFilterPlanEnd != 0 && lEstDate >= lFilterPlanEnd) {
                        		continue;
                        	}
                    	}
                    	sForecastDate = (String)mSubTask.get(DecConstants.SELECT_ATTRIBUTE_DECTASKFORECASTSTARTDATE);
                    	sCurrent = getCWPTaskStateName(context, sForecastDate, sEstDate, sCurrent, sToday, locale);
                    	mSubTask.put("cmCurrent", sCurrent);
                		mlDecTask.add(mSubTask);
                	}
                }
            }
            StringList slFilterLVInfo = new StringList();
            slFilterLVInfo.add((String)programMap.get("kw_LV1 Code"));
            slFilterLVInfo.add((String)programMap.get("kw_LV1 Desc"));
            slFilterLVInfo.add((String)programMap.get("kw_LV2 Code"));
            slFilterLVInfo.add((String)programMap.get("kw_LV2 Desc"));
            slFilterLVInfo.add((String)programMap.get("kw_LV3 Code"));
            slFilterLVInfo.add((String)programMap.get("kw_LV3 Desc"));
            slFilterLVInfo.add((String)programMap.get("kw_LV4 Code"));
            slFilterLVInfo.add((String)programMap.get("kw_LV4 Desc"));
            slFilterLVInfo.add((String)programMap.get("kw_LV5 Code"));
            slFilterLVInfo.add((String)programMap.get("kw_LV5 Desc"));
            slFilterLVInfo.add((String)programMap.get("kw_LV6 Code"));
            slFilterLVInfo.add((String)programMap.get("kw_LV6 Desc"));
            slFilterLVInfo.add((String)programMap.get("kw_LV7 Code"));
            slFilterLVInfo.add((String)programMap.get("kw_LV7 Desc"));

        	
            Map mOtherWhere = decFilterUtil.generateOtherWhereExpr(context, args, null);
    		String otherBusWhere = (String) mOtherWhere.get("busWhere");

            Map mSubTask = null;
            StringList slFilterOID = new StringList();
            if(DecStringUtil.isNotEmpty(otherBusWhere)) {
                MapList mlFilterTask = DomainObject.findObjects(context, sGetTaskType, DecConstants.SYMB_WILD, otherBusWhere + " && to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST + "].to.name == '" + sProjectCode + "'", new StringList(DecConstants.SELECT_ID));
                if(mlFilterTask.isEmpty()) {
                	return mlFilterTask;
                }
                for(Object o : mlFilterTask) {
                	mSubTask = (Map)o;
                	slFilterOID.add((String)mSubTask.get(DecConstants.SELECT_ID));
                }
            }
    		List<CompareRule> compareRuleList = new ArrayList<CompareRule>();
            if(DecStringUtil.isNotEmpty(programMap.get("Priority Group"))) 		compareRuleList.add(new CompareRule("Priority Group", DecConstants.SELECT_ATTRIBUTE_DECPRIORITYGROUP));
            if(DecStringUtil.isNotEmpty(programMap.get("Priority Number"))) 	compareRuleList.add(new CompareRule("Priority Number", DecConstants.SELECT_ATTRIBUTE_DECPRIORITYNO));
            if(DecStringUtil.isNotEmpty(programMap.get("Discipline"))) 			compareRuleList.add(new CompareRule("Discipline", DecConstants.SELECT_ATTRIBUTE_DECDISCIPLINE));
            if(DecStringUtil.isNotEmpty(programMap.get("CWP/IWP Stage"))) 		compareRuleList.add(new CompareRule("CWP/IWP Stage", DecConstants.SELECT_ATTRIBUTE_DECSTAGE));
            if(DecStringUtil.isNotEmpty(programMap.get("CWP/IWP Status"))) 		compareRuleList.add(new CompareRule("CWP/IWP Status", "cmCurrent"));
            if(DecStringUtil.isNotEmpty(programMap.get("Sub-Con"))) 			compareRuleList.add(new CompareRule("Sub-Con", DecConstants.SELECT_ATTRIBUTE_DECSUBCONNO));
            if(DecStringUtil.isNotEmpty(programMap.get("CWP Activity Type"))) 	compareRuleList.add(new CompareRule("CWP Activity Type", DecConstants.SELECT_ATTRIBUTE_DECCWPACTIVITYTYPE));
            if(DecStringUtil.isNotEmpty(programMap.get("BOQ Key Item"))) 		compareRuleList.add(new CompareRule("BOQ Key Item", DecConstants.SELECT_ATTRIBUTE_DECKEYQUANTITYTYPE));
            if(DecStringUtil.isNotEmpty(programMap.get("UOM"))) 				compareRuleList.add(new CompareRule("BOQ Key Item", DecConstants.SELECT_ATTRIBUTE_DECKEYQUANTITYUOM));
            
            
            String sCreateBy = (String)programMap.get("kw_Created by");
            String sUpdateBy = (String)programMap.get("kw_Updated by");
            StringList slCreateByOID = null;
            StringList slUpdateByOID = null;
            StringList slPersonParam = new StringList(DecConstants.SELECT_ID);
            slPersonParam.add(DecConstants.SELECT_NAME);
            slPersonParam.add(DecConstants.SELECT_ATTRIBUTE_FIRSTNAME);
            slPersonParam.add(DecConstants.SELECT_ATTRIBUTE_LASTNAME);
            MapList mlPerson = DomainObject.findObjects(context, DecConstants.TYPE_PERSON, DecConstants.SYMB_WILD, null, slPersonParam);
            Map<String, String> mPersonName = new HashMap();
            for(Object oPerson : mlPerson) {
            	Map<String, String> mPerson = (Map)oPerson;
            	mPersonName.put(mPerson.get(DecConstants.SELECT_NAME), mPerson.get(DecConstants.SELECT_ATTRIBUTE_FIRSTNAME) + " " + mPerson.get(DecConstants.SELECT_ATTRIBUTE_LASTNAME));
            }
            
            if(DecStringUtil.isNotEmpty(sCreateBy)) {
				slCreateByOID = new StringList();
    	    	Map mWhere = new HashMap();
    	    	mWhere.put("CHANGE_ACTION", "Create");
        		mWhere.put("SITE_CD", sProjectCode);
    	    	List mlCreateDataList = sqlSession.selectList("Project.selectLastUpdateCWPChangeRegister", mWhere);
        		if(mlCreateDataList != null && !mlCreateDataList.isEmpty()) {
        			for(Object o : mlCreateDataList) {
        				Map mData = (Map)o;
        				String sOID = (String)mData.get("CWP_OID");
        				String sUser = (String)mData.get("CHANGE_USER");
        				if(DecStringUtil.containsIgnoreCase(mPersonName.get(sUser), sCreateBy)) {
            				slCreateByOID.add(sOID);
        				}
        			}
        		}
            }
            if(DecStringUtil.isNotEmpty(sUpdateBy)) {
				slUpdateByOID = new StringList();
    	    	Map mWhere = new HashMap();
    	    	mWhere.put("CHANGE_ACTION", "Modify");
        		mWhere.put("SITE_CD", sProjectCode);
    	    	List mlUpdateDataList = sqlSession.selectList("Project.selectLastUpdateCWPChangeRegister", mWhere);
        		if(mlUpdateDataList != null && !mlUpdateDataList.isEmpty()) {
        			for(Object o : mlUpdateDataList) {
        				Map mData = (Map)o;
        				String sOID = (String)mData.get("CWP_OID");
        				String sUser = (String)mData.get("CHANGE_USER");
        				if(DecStringUtil.containsIgnoreCase(mPersonName.get(sUser), sUpdateBy)) {
            				slUpdateByOID.add(sOID);
        				}
        			}
        		}
            }
            
            StringList slOID = new StringList();
	    	Set<String> setParam = new HashSet<String>();
	    	StringList slParam = new StringList();
	    	StringBuilder sbParentKey = new StringBuilder();
            for(Object o : mlDecTask) {
            	mSubTask = (Map)o;
            	String sOID = (String)mSubTask.get(DecConstants.SELECT_ID);
                Map<String, String> compareResultMap = CompareUtil.compareElementToLowerCase(programMap, mSubTask, compareRuleList, CompareRule.COMPARE_TYPE.COMPARE);
                if(DecConstants.SYMB_NA.equalsIgnoreCase(compareResultMap.get("Action"))) {
                	if(slFilterOID.isEmpty() || slFilterOID.contains(sOID)) { // 필터 위 프레임 조건 확인
	                    if(slCreateByOID == null || slCreateByOID.contains(sOID)) { // 필터 아래 프레임 Create By
	                       	if(slUpdateByOID == null || slUpdateByOID.contains(sOID)) { // 필터 아래 프레임 Update By
			               		iScheduleLevel = (Integer)mSubTask.get("scheduleLevel");
			               		int j = 0;
			               		for(int i=0; i<7; i++) {
			            			int iDifferenceLevel = iScheduleLevel - (i+1);
			               			String sCode = slFilterLVInfo.get(j);
			               			String sDesc = slFilterLVInfo.get(j+1);
			            			sbParentKey.setLength(0);
			               			if((DecStringUtil.isNotEmpty(sCode) || DecStringUtil.isNotEmpty(sDesc)) && iDifferenceLevel > 0) {
			                   			for(int k=0; k<iDifferenceLevel; k++) {
			                   				sbParentKey.append(sParentKey);
			                   			}
			                   			setParam.add(sbParentKey.toString() + DecConstants.SELECT_NAME);
			                   			setParam.add(sbParentKey.toString() + DecConstants.SELECT_DESCRIPTION);
			               			}
			               			j+=2;
			               		}
			               		sCWPNo = (String)mSubTask.get(DecConstants.SELECT_NAME);
			               		if(DecStringUtil.isNotEmpty(sSummaryType)) {
			               			if(!mAllocationData.isEmpty() && mAllocationData.get(sCWPNo) != null) {
						               	mSubTask.putAll(mAllocationData.get(sCWPNo));
						                mlFilterDecTask.add(mSubTask);
						                slOID.add(sOID);
			               			}
			               		}else{
					                mlFilterDecTask.add(mSubTask);
					                slOID.add(sOID);
			               		}
	                       	}
	                    }
                	}
                }
            }
	    	slParam.addAll(setParam);
	    	mlDecTask.clear();
	    	if(!setParam.isEmpty()) {
	            BusinessObjectWithSelectList objectWithSelectList = ProgramCentralUtil.getObjectWithSelectList(context, slOID.toStringArray(), slParam);
	            for(int i = 0; i<objectWithSelectList.size(); i++) {
	            	BusinessObjectWithSelect bow = objectWithSelectList.get(i);
                	mSubTask = (Map)mlFilterDecTask.get(i);
        			int j = 0;
	    			boolean bValidate = true;
        			for(int k=0; k<7; k++) {
            			iScheduleLevel = (Integer)mSubTask.get("scheduleLevel");
    	    			int iDifferenceLevel = iScheduleLevel - (k+1);
        				String sFilterCode = slFilterLVInfo.get(j);
        				String sFilterDesc = slFilterLVInfo.get(j+1);
    	    			sbParentKey.setLength(0);
        				if((DecStringUtil.isNotEmpty(sFilterCode) || DecStringUtil.isNotEmpty(sFilterDesc)) && iDifferenceLevel > 0) {
        	    			for(int l=0; l<iDifferenceLevel; l++) {
        	    				sbParentKey.append(sParentKey);
        	    			}
        	    			String sCode = bow.getSelectData(sbParentKey.toString() + DecConstants.SELECT_NAME);
        	    			String sDesc = bow.getSelectData(sbParentKey.toString() + DecConstants.SELECT_DESCRIPTION);
        	    			if(DecStringUtil.isNotEmpty(sFilterCode) && !DecStringUtil.containsIgnoreCase(sCode, sFilterCode)) {
        	    				bValidate = false;
        	    				break;
        	    			}
        	    			if(DecStringUtil.isNotEmpty(sFilterDesc) && !DecStringUtil.containsIgnoreCase(sDesc, sFilterDesc)) {
        	    				bValidate = false;
        	    				break;
        	    			}
        				}
        				j+=2;
        			}
        			if(bValidate) {
        				mlDecTask.add(mSubTask);
        			}
	            }
	    	}else {
	    		mlDecTask = mlFilterDecTask;
	    	}
            
        }catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return mlDecTask;
    }
    
    public List<Map> getCWPTaskHistoryList(Context context, String[] args) throws Exception {
    	MapList mlReturn = new MapList();
    	List<Map> lReturn = null;
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
    		Map mWhere = new HashMap();
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String sObjectId = (String) programMap.get("objectId");
            DomainObject doObj = DomainObject.newInstance(context, sObjectId);
            String emxTableRowIdExpr = (String)programMap.get("emxTableRowIdExpr");
        	StringList rowIdList = FrameworkUtil.splitString(emxTableRowIdExpr, ",");
        	if(!rowIdList.isEmpty()) {
            	String sCheckOID = rowIdList.get(0);
            	doObj = DomainObject.newInstance(context, sCheckOID);
        	}
            String sObjType = doObj.getTypeName(context);
        	
            Map mOtherWhere = decFilterUtil.generateOtherWhereExpr4RDB(context, args);
    		String otherBusWhere = (String) mOtherWhere.get("busWhere");
    		Pattern busPattern = Pattern.compile("(.*?) LIKE '(.*?)'");
			Matcher matcher = busPattern.matcher(otherBusWhere);
			while (matcher.find()) {
	            String key = matcher.group(1);
	            String value = matcher.group(2);
	            mWhere.put(key, value);
	        }
    		
            if(DecStringUtil.equals(DecConstants.TYPE_PROJECT_SPACE, sObjType)) {
        		mWhere.put("SITE_CD", doObj.getInfo(context, DecConstants.SELECT_NAME));
        		lReturn = sqlSession.selectList("Project.selectCWPChangeRegisterDESCChangeDate", mWhere);
            }else if(DecStringUtil.equals(DecConstants.TYPE_DECCWPTASK, sObjType)) {
            	mWhere.clear();
        		mWhere.put("CWP_OID", sObjectId);
        		lReturn = sqlSession.selectList("Project.selectCWPChangeRegisterforOIDDESCChangeDate", mWhere);
            }
    		mlReturn.addAll(lReturn);
    	}catch (FrameworkException e) {
			throw e;
		}catch (Exception e) {
			throw e;
		}
    	return mlReturn;
    }
    
    public List<Map> getIWPTaskHistoryList(Context context, String[] args) throws Exception {
    	MapList mlReturn = new MapList();
    	List<Map> lData = null;
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
    		Map mWhere = new HashMap();
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String sObjectId = (String) programMap.get("objectId");
            DomainObject doCWPTask = DomainObject.newInstance(context, sObjectId);
            StringList slIWPOIDList = doCWPTask.getInfoList(context, "from[" + DecConstants.RELATIONSHIP_SUBTASK + "].to.id");
            String sPSOID = doCWPTask.getInfo(context, "to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST + "].to.id");
            DomainObject doPS = DomainObject.newInstance(context, sPSOID);
    		mWhere.put("SITE_CD", doPS.getInfo(context, DecConstants.SELECT_NAME));
    		lData = sqlSession.selectList("Project.selectIWPChangeRegisterDESCChangeDate", mWhere);
    		for(Map mData : lData) {
    			String sIWPOID = (String)mData.get("IWP_OID");
    			if(slIWPOIDList.contains(sIWPOID)) {
            		mlReturn.add(mData);
    			}
    		}
    	}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return mlReturn;
    }
    public List<Map> getConstructionKPIList(Context context, String[] args) throws Exception {
    	MapList mlReturn = new MapList();
    	List<Map> lReturn = null;
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
    		Map mWhere = new HashMap();
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String sObjectId = (String) programMap.get("objectId");
            
            
            DomainObject doPS = DomainObject.newInstance(context, sObjectId);
            String sConstructionItem = (String)programMap.get("BOQ Key Item");
            String sDiscipline = (String)programMap.get("Discipline");
    		mWhere.put("SITE_CD", doPS.getInfo(context, DecConstants.SELECT_NAME));
    		mWhere.put("CONSTRUCTION_ITEM", sConstructionItem);
    		mWhere.put("DISCIPLINE", sDiscipline);
            String sUnitOID = (String)programMap.get("Unit");
            if(sUnitOID != null) {
            	String[] sArrUnitOID = DecStringUtil.split(sUnitOID,"|");
            	for(String sUnitID : sArrUnitOID) {
            		mWhere.put("UNIT_ID", sUnitOID);
            		mlReturn.addAll(sqlSession.selectList("Project.selectConstructionKPI", mWhere));
            	}
            }else {
        		lReturn = sqlSession.selectList("Project.selectConstructionKPI", mWhere);
        		mlReturn.addAll(lReturn);
            }
            
    	}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return mlReturn;
    }
    public StringList getDBDataList(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
    	try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	Map mObject = null;
	    	String sColumnName = (String)settings.get("columnName");
	    	String sExcept = (String)settings.get("except");
	    	String sGetInfo = (String)settings.get("getInfo");
	    	String parseDateFormat = (String)settings.get("parseDateFormat"); // Added by hslee on 2023.08.07
	    	String changeDateFormat = (String)settings.get("changeDateFormat"); // Added by hslee on 2023.08.07
	    	Object oData = null;
	    	String sData = DecConstants.EMPTY_STRING;
	    	Date dData = null;
	    	SimpleDateFormat ev6DisplaySdf = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(), Locale.US);
	    	if(DecStringUtil.equals(sExcept, "time")) {
	    		ev6DisplaySdf = new SimpleDateFormat("yyyy. M. d");
	    	}
	    	Timestamp tsData = null;
	    	DomainObject doObj = DomainObject.newInstance(context);
	    	
	    	// Modified by thok on 2023.10.27[S] Dicipline 표기 변경
	    	HashMap discipline = new HashMap();
	    	if(sColumnName.equalsIgnoreCase("DCPLN_CD")) {
	    		Map paramList = (Map)programMap.get("paramList");
	    		String parentOID = (String) paramList.get("parentOID");
	    		DomainObject projectObject = new DomainObject(parentOID); 
	    		
	    		String projectId = projectObject.getInfo(context, DecConstants.NAME);
	    		String projectType = projectObject.getInfo(context, "type");
	    		
	    		String sWhere = DecConstants.EMPTY_STRING;
	    		StringList busCodeMasterSelects = new StringList();
	    		busCodeMasterSelects.add(DomainConstants.SELECT_NAME);
	    		if(DomainObject.TYPE_PROJECT_SPACE.equalsIgnoreCase(projectType)) {
	    			sWhere = DecConstants.SELECT_REVISION + "=='" + projectId + "_FMCS Discipline'";
	    			busCodeMasterSelects.add("to[decCodeDetailRelAdd].from.description");
	    		} else {
	    			sWhere = DecConstants.SELECT_REVISION + "=='FMCS Discipline'";
	    			busCodeMasterSelects.add("to[decCodeDetailRelAddTemplate].from.description");
	    		}
	    		
	    		MapList MlCodeMaster = DomainObject.findObjects(context,DecConstants.TYPE_DECCODEDETAIL,null,sWhere,busCodeMasterSelects);//'ProjectName' 인 기본 codeDetail데이터 조회		

	    		HashMap code = new HashMap();
	    				
	    		for(Object obj : MlCodeMaster){
	    			code = (HashMap) obj;
	    			if(DomainObject.TYPE_PROJECT_SPACE.equalsIgnoreCase(projectType)) {
	    				discipline.put(code.get(DomainConstants.SELECT_NAME), code.get("to[decCodeDetailRelAdd].from.description"));
	    			} else {
	    				discipline.put(code.get(DomainConstants.SELECT_NAME), code.get("to[decCodeDetailRelAddTemplate].from.description"));
	    			}
	    		}
	    	}
	    	// Modified by thok on 2023.10.27[E]
	    	
	    	for(Object o : mlObject) {
	    		sData = null; // Modified by hslee on 2023.06.23
	    		dData = null; // Modified by jhlee on 2023.07.11
	    		mObject = (Map)o;
	    		oData = mObject.get(sColumnName);
	    		if(oData instanceof String) {
	    			sData = (String)oData;
	    			if(DecStringUtil.equals(sExcept, "OIDName")) {
	    				doObj.setId(sData);
	    				try {
		    				doObj.open(context);
	    				}catch (Exception e) {
	    					// 오브젝트가 존재하지 않을경우
	    		    		slReturn.add("delete");
	    		    		continue;
						}
	    				if(DecStringUtil.isNotEmpty(sGetInfo)) {
	    					sData = doObj.getDescription(context);
	    				}else {
		    				sData = doObj.getName();
	    				}
	    			}else if(DecStringUtil.equals(sExcept, "string")) {
	    				// do nothing...
	    			}else {
	    				// Modified by hslee on 2023.08.07 --- [s]
	    				if ( StringUtils.isNotEmpty(parseDateFormat) )
	    				{
	    					dData = DecDateUtil.autoChangeDate(sData, parseDateFormat);
	    				}
	    				else
	    				{
	    					dData = DecDateUtil.autoChangeDate(sData);
	    				}
	    				// Modified by hslee on 2023.08.07 --- [e]
	    			}
	    			
	    			// Modified by thok on 2023.10.27[S]
	    			if(sColumnName.equalsIgnoreCase("DCPLN_CD")){
	    				sData = (String) discipline.get(sData);
	    			}
	    			// Modified by thok on 2023.10.27[E]
	    		}else if(oData instanceof Timestamp) {
    				tsData = (Timestamp)oData;
    				dData = DecDateUtil.autoChangeDate(tsData.toString());
    			}else if(oData instanceof BigDecimal) {
    				sData = String.valueOf(oData);
    				mObject.put(sColumnName, sData);
    			}
    			if(dData!= null) {
    				// Modified by hslee on 2023.08.07 --- [s]
    				if ( StringUtils.isNotEmpty(changeDateFormat) )
    				{
    					if ( "ootb".equalsIgnoreCase(changeDateFormat) )
    					{
    						sData = DecDateUtil.changeDateFormat(dData, eMatrixDateFormat.getInputDateFormat());
    					}
    					else
    					{
    						sData = DecDateUtil.changeDateFormat(dData, changeDateFormat);
    					}
    				}
    				else
    				{
    					sData = DecDateUtil.changeDateFormat(dData, ev6DisplaySdf);
    				}
    				// Modified by hslee on 2023.08.07 --- [e]
    			}
	    		slReturn.add(sData);
	    	}
    	}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return slReturn;
    }
    
    public StringList getObjectColumn(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
    	try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	Map mObject = null;
	    	String sColumnName = (String)settings.get("columnName");
	    	Object oData = null;
	    	String sData = DecConstants.EMPTY_STRING;
	    	for(Object o : mlObject) {
	    		mObject = (Map)o;
	    		oData = mObject.get(sColumnName);
	    		
	    		sData = (String)oData;
	    		
	    		slReturn.add(sData);
	    	}
    	}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return slReturn;
    }
    
    private StringList getMemberProjectList(Context context, String[] args) throws Exception {
    	StringList countryList = new StringList();
		try {
			Map programMap = JPO.unpackArgs(args);
			MapList objectList = (MapList) programMap.get("objectList");
			
			MapList allCountryList = getCountryList(context, "");
			Map<String,Map> allCountryMap = decListUtil.getSelectKeyDataMapForMapList(allCountryList, "attribute[Country Code (2 Letter)]");
			
			Map map = null;
			Map tempCountryMap = null;
			String id = null;
			String countryCode = null;
			
			for (Object obj : objectList)
			{
				map = (Map) obj;
				id = (String) map.get(DecConstants.SELECT_ID);
				countryCode = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", id, DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE);
				tempCountryMap = allCountryMap.get(countryCode);
				
				if ( tempCountryMap != null )
				{
					countryList.add( (String) tempCountryMap.get(DecConstants.SELECT_NAME) );
				}
				else
				{
					countryList.add( countryCode );
				}
			}
			return countryList;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public StringList getProjectCodeMember(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
        try {
                Map programMap = JPO.unpackArgs(args);
                MapList mlObject = (MapList)programMap.get("objectList");
                Map mObject = null;

                for(Object o : mlObject) {
                	if(o instanceof Hashtable) {
                		mObject = (Hashtable) o;
                	} else {
                		mObject = (HashMap) o; 
                	}
                	
                    String objectId = (String) mObject.get("projectId");
                    if ( StringUtils.isEmpty(objectId) )
                    {
                    	objectId = (String) mObject.get(DecConstants.SELECT_ID); // Added by hslee on 2023.08.24
                    }
                    String projectCode =(String) mObject.get(DecConstants.SELECT_NAME);
                    String isProjectMember = (String) mObject.get("from[Member]");
                    if(ProgramCentralUtil.isNullString(isProjectMember)) {
                    	isProjectMember = "FALSE";
                    }
                    if(isProjectMember.equalsIgnoreCase("TRUE")) {
                    	StringBuffer sb = new StringBuffer();
                    	
                        sb.append("<a href=\"javascript:window.open('../common/emxTree.jsp?objectId=");
                        sb.append(XSSUtil.encodeForHTML(context, objectId));
                        sb.append("&amp;mode=replace");
                        sb.append("&amp;AppendParameters=true");
                        sb.append("&amp;reloadAfterChange=true','_self')\">");
                        sb.append(projectCode);
                        sb.append("</a>");
                        /*
                        sb.append("<span onclick=\"javascript:location.href = '../common/emxTree.jsp?objectId=");
                        sb.append(XSSUtil.encodeForHTML(context, objectId));
                        sb.append("&amp;mode=replace");
                        sb.append("&amp;AppendParameters=true");
                        sb.append("&amp;reloadAfterChange=true';\">");
                        sb.append(projectCode);
                        sb.append("</span>");
                        
                        
                    	sb.append("<a href=\"../common/emxTree.jsp?objectId=");
                        sb.append(XSSUtil.encodeForHTML(context, objectId));
                        sb.append("&amp;mode=replace");
                        sb.append("&amp;AppendParameters=true");
                        sb.append("&amp;reloadAfterChange=true\">");
                        sb.append(projectCode);
                        sb.append("</a>");
                		slReturn.add(sb.toString());
                		*/
                		slReturn.add(sb.toString());
                    } else {
                    	slReturn.add("<span>"+projectCode+"</span>");
                    }
                    
                    
                }
        } catch (Exception e) {
                        e.printStackTrace();
                        throw e;
                }
        return slReturn;
    }
    
    public StringList getProjectCheckBox(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
        try {
                Map programMap = JPO.unpackArgs(args);
                MapList mlObject = (MapList)programMap.get("objectList");
                Map mObject = null;
                int cnt = 0;
                for(Object o : mlObject) {
                	if(o instanceof Hashtable) {
                		mObject = (Hashtable) o;
                	} else {
                		mObject = (HashMap) o; 
                	}
                	
                    String objectId = (String) mObject.get("projectId");
                    StringBuffer sb = new StringBuffer();
                    sb.append("<input type=\"checkbox\" ");
                    sb.append("name=\"emxTableRowIdActual\" ");
                    sb.append("class=\"small\" ");
                    sb.append("id=\"rmbrow-0," + String.valueOf(cnt) + "\" ");
                    sb.append("value=\"|" + XSSUtil.encodeForHTML(context, objectId) + "||0," + String.valueOf(cnt) + "\" ");
                    sb.append("onclick=\"doFreezePaneCheckboxClick(this, event); doCheckSelectAll();\"></input>");
            		slReturn.add(sb.toString());
            		
            		cnt++;
                }
        } catch (Exception e) {
                        e.printStackTrace();
                        throw e;
                }
        return slReturn;
    }
    
    public StringList getProjectTypeStatus(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
    	try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	Map mObject = null;
	    	String sColumnName = (String)settings.get("columnName");
	    	String sProject = (String)settings.get("project");
	    	Object oData = null;
	    	String sData = DecConstants.EMPTY_STRING;
	    	for(Object o : mlObject) {
	    		mObject = (Map)o;
	    		oData = mObject.get(sColumnName);
	    		
	    		sData = (String)oData;
	    		
	    		if(sProject.equalsIgnoreCase("type")) {
	    			if(sData.equalsIgnoreCase("bidding")) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectType.bidding", context.getSession().getLanguage());
	    			} else if(sData.equalsIgnoreCase("ongoing")) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectType.ongoing", context.getSession().getLanguage());
	    			}
	    		} else if(sProject.equalsIgnoreCase("status")) {
	    			if(sData.equalsIgnoreCase(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_INPROGRESS)) {
	    				sData = sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectStatus.In-Progress", context.getSession().getLanguage());
	    			} else if(sData.equalsIgnoreCase(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_WIN)) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectStatus.Win", context.getSession().getLanguage());
	    			} else if(sData.equalsIgnoreCase(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_WITHDRAW)) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectStatus.Withdraw", context.getSession().getLanguage());
	    			} else if(sData.equalsIgnoreCase(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_EXCLUDE)) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectStatus.Exclude", context.getSession().getLanguage());
	    			} else if(sData.equalsIgnoreCase(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_FAIL)) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectStatus.Fail", context.getSession().getLanguage());
	    			} else if(sData.equalsIgnoreCase(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_COMPLETED)) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectStatus.Completed", context.getSession().getLanguage());
	    			} else if(sData.equalsIgnoreCase(DecConstants.ATTRIBUTE_DECPROJECTSTATUS_RANGE_HOLD)) {
	    				sData = EnoviaResourceBundle.getProperty(context, "Framework","emxFramework.Range.decProjectStatus.Hold", context.getSession().getLanguage());
	    			}
	    		} else if(sProject.equalsIgnoreCase("PIM")) {
	    			String projectId = sData;
	    			StringBuilder PIMName = new StringBuilder();
	    			DomainObject proejctObject = new DomainObject(projectId);
	    	        StringList PIMList = proejctObject.getInfoList(context, "from[Member|attribute[decProjectMemberRole]==PIM].to",false);
	    	        for(String PIM : PIMList){
	    	        	PIM = PersonUtil.getFullName(context, PIM);//name값으로 full name 불러오기
	    	        	PIMName.append(PIM + ",");//복수일 경우 컴마(,) 로 구분
	    	        }
	    	        
	    	        if(PIMName.length() > 0){//PIM이 존재 할 경우 삭제
	    	        	PIMName.deleteCharAt(PIMName.length() - 1);//마지막에 컴마(,) 제거
	    	        }
	    	        
	    	        sData = PIMName.toString();
	    		}
	    		
	    		slReturn.add(sData);
	    	}
    	}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return slReturn;
    }
    
    public StringList getProjectDetail(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
        try {
                Map programMap = JPO.unpackArgs(args);
                MapList mlObject = (MapList)programMap.get("objectList");
                Map mObject = null;

                for(Object o : mlObject) {
                	if(o instanceof Hashtable) {
                		mObject = (Hashtable) o;
                	} else {
                		mObject = (HashMap) o; 
                	}
                	
                    String objectId = (String) mObject.get(DecConstants.SELECT_ID);
                    
                    DomainObject object = new DomainObject(objectId);
                    StringList memberList = object.getInfoList(context, "from[Member].to");
                    
                    if(memberList.contains(context.getUser())) {
                    	StringBuffer sb = new StringBuffer();
                        sb.append("<a href=\"javascript:window.open('../common/emxTree.jsp?objectId=");
                        sb.append(XSSUtil.encodeForHTML(context, objectId));
                        sb.append("&amp;mode=replace");
                        sb.append("&amp;AppendParameters=true");
                        sb.append("&amp;reloadAfterChange=true')\">");
                        sb.append("<img src=\"../widget/images/MyApps/ENOMABO_AP_AppIcon.png\" style=\"width:3vh; height:3vh;\"/>");
                        sb.append("</a>");
                		slReturn.add(sb.toString());
                    } else {
                    	slReturn.add("<span></span>");
                    }
                    
                    
                }
        } catch (Exception e) {
                        e.printStackTrace();
                        throw e;
                }
        return slReturn;
    }
    /*
    public StringList getProjectDashboard(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
        try {
                Map programMap = JPO.unpackArgs(args);
                MapList mlObject = (MapList)programMap.get("objectList");
                Map mObject = null;

                for(Object o : mlObject) {
                	if(o instanceof Hashtable) {
                		mObject = (Hashtable) o;
                	} else {
                		mObject = (HashMap) o; 
                	}
                	String objectId = (String) mObject.get(DecConstants.SELECT_ID);
                	DomainObject object = new DomainObject(objectId);
                	StringList memberList = object.getInfoList(context, "from[Member].to");
                	
                	if(memberList.contains(context.getUser())) {
                		String dashboardURL = object.getAttributeValue(context, DecConstants.ATTRIBUTE_DECDASHBOARDURL);
                    	if(dashboardURL.length() > 0) {
                    		StringBuffer sb = new StringBuffer();
                    		sb.append("<a href=\"javascript:window.open('");
                    		sb.append(XSSUtil.encodeForHTML(context, dashboardURL));
                    		sb.append("')\">");
                            sb.append("<img src=\"../widget/images/MyApps/X3DDASH_AP_AppIcon.svg\" style=\"width:3vh; height:3vh;\"/>");
                            sb.append("</a>");
                    		slReturn.add(sb.toString());
                    	} else {
                    		StringBuffer sb = new StringBuffer();
                    		sb.append("<a href=\"javascript:alert('");
                    		sb.append(EnoviaResourceBundle.getProperty(context, ProgramCentralConstants.PROGRAMCENTRAL, "emxProgramCentral.Alert.Project.NoDashboard", context.getSession().getLanguage()));
                    		sb.append("')\">");
                    		sb.append("<img src=\"../widget/images/MyApps/X3DDASH_AP_AppIcon.svg\" style=\"width:3vh; height:3vh;\"/>");
                    		sb.append("</a>");
                    		slReturn.add(sb.toString());
                    	}
                	} else {
                		slReturn.add("<span></span>");
                	}
                	
                }
        } catch (Exception e) {
                        e.printStackTrace();
                        throw e;
                }
        return slReturn;
    }
    
    public MapList getMasterListLVColumn(Context context, String[] args) throws Exception {
    	return getLVColumn(context, args, "Master");
    }

    public MapList getPlanListLVColumn(Context context, String[] args) throws Exception {
    	return getLVColumn(context, args, "Plan");
    }
    
    public MapList getLVColumn(Context context, String[] args, String sKeyword) throws Exception {
    	MapList mlReturn = new MapList();
    	
    	Map paramMap = (Map)JPO.unpackArgs(args);
    	MapList mlObject = (MapList)paramMap.get("objectList");
    	Map mObject = (Map)mlObject.get(0);
    	String sProjectSpaceOID = (String)mObject.get(DecConstants.SELECT_ID);
    	DomainObject doProjectSpace = DomainObject.newInstance(context, sProjectSpaceOID);
    	
    	StringList slBusSelect = new StringList();
    	slBusSelect.add(DecConstants.SELECT_LEVEL);
    	slBusSelect.add(DecConstants.SELECT_TYPE);
    	slBusSelect.add(DecConstants.SELECT_NAME);
    	slBusSelect.add(DecConstants.SELECT_ID);
    	
    	MapList mlCWPTask = doProjectSpace.getRelatedObjects(context,
				DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
				DecConstants.TYPE_DECCWPTASK + "," + DecConstants.TYPE_PHASE, //pattern to match types
				slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
				null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
				false, //get To relationships
				true, //get From relationships
				(short)0, //the number of levels to expand, 0 equals expand all.
				DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
				DecConstants.EMPTY_STRING,
				0); //where clause to apply to relationship, can be empty ""
    	Map mCWPTask = null;
    	String sType = DecConstants.EMPTY_STRING;
    	int iCWPLevel = 0;
    	for(Object oCWPTask : mlCWPTask) {
    		mCWPTask = (Map)oCWPTask;
    		sType = (String)mCWPTask.get(DecConstants.SELECT_TYPE);
    		if(DecStringUtil.equals(sType, DecConstants.TYPE_DECCWPTASK)) {
    			// CWP Task의 레벨 정보 저장
    			iCWPLevel = Integer.valueOf((String)mCWPTask.get(DecConstants.SELECT_LEVEL));
        		break;
    		}
    	}
    	StringList slColumnName = new StringList();
    	if(DecStringUtil.equals(sKeyword, "Plan")) {
	    	slColumnName.add("LV1 Code");
	    	slColumnName.add("LV1 Desc");
	    	slColumnName.add("LV2 Code");
	    	slColumnName.add("LV2 Desc");
    	}
    	else if(DecStringUtil.equals(sKeyword, "Master")) {
        	slColumnName.add("LV1 Code");
        	slColumnName.add("LV1 Desc");
        	slColumnName.add("LV2 Code");
        	slColumnName.add("LV2 Desc");
        	slColumnName.add("LV3 Code");
        	slColumnName.add("LV3 Desc");
        	slColumnName.add("LV4 Code");
        	slColumnName.add("LV4 Desc");
        	slColumnName.add("LV5 Code");
        	slColumnName.add("LV5 Desc");
        	slColumnName.add("LV6 Code");
        	slColumnName.add("LV6 Desc");
        	slColumnName.add("LV7 Code");
        	slColumnName.add("LV7 Desc");
    	}
    	
    	Map mColumn = new HashMap();
		Map<String, String> mSetting = new HashMap();
		
		String sLevel = DecConstants.EMPTY_STRING;
		int iLevel = 0;

		// LV1 부터 LV7까지 컬럼생성
		for(String sColumnName : slColumnName) {
			mSetting.put("Column Type", "programHTMLOutput");
			mSetting.put("Registered Suite", "ProgramCentral");
			mSetting.put("program", "emxProjectSpace");
			mColumn.put("name", sColumnName);
			mColumn.put("label", sColumnName);
			sLevel = sColumnName.replaceAll("[^0-9]", DecConstants.EMPTY_STRING);
			iLevel = Integer.valueOf(sLevel);
			mSetting.put("level", sLevel);
			if(DecStringUtil.contains(sColumnName, "Code")) {
				// LV Code 일경우
				mSetting.put("function", "getLVCode");
				mSetting.put("Update Program", "emxProjectSpace");
				mSetting.put("Update Function", "updateLVCode");
			}else {
				// LV Desc 일경우
				mSetting.put("function", "getLVDesc");
				mSetting.put("Update Program", "emxProjectSpace");
				mSetting.put("Update Function", "updateLVDesc");
			}
			if(iCWPLevel == iLevel) {
				// CWP Task와 같은레벨의 컬럼일경우
				mSetting.put("Input Type", "textbox");
				mSetting.put("Required", "true");
				mSetting.put("Editable", "true");
			}
			mColumn.put("settings", mSetting);
			mlReturn.add(mColumn);
			mColumn = new HashMap();
			mSetting = new HashMap();
		}
    	
    	return mlReturn;
    }
    */
    /**
     * jhlee Add
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList isCWPTask(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();

    	Map paramMap = (Map)JPO.unpackArgs(args);
    	Map columnMap = (Map)paramMap.get("columnMap");
    	Map settings = (Map)columnMap.get("settings");
    	MapList mlObject = (MapList)paramMap.get("objectList");
    	
    	String sColumnLevel = (String)settings.get("level");
		
        String invokeFromODTFile = (String)paramMap.get("invokeFrom"); //Added for ODT
        StringList slParam = new StringList();
        slParam.add(ProgramCentralConstants.SELECT_LEVEL);
        slParam.add(ProgramCentralConstants.SELECT_CURRENT);
        
        int size = mlObject.size();
        String[] objIds = new String[size];
        String[] levels = new String[size];
        try {
	        for(int i=0;i<size;i++){
	            Map objectMap = (Map)mlObject.get(i);
	            objIds[i] = (String)objectMap.get(SELECT_ID);
	            levels[i] =  String.valueOf(objectMap.get("scheduleLevel"));
	        }
	
	        BusinessObjectWithSelectList objectWithSelectList = null;
	        if("TestCase".equalsIgnoreCase(invokeFromODTFile)){ //Added for ODT usage
	            objectWithSelectList = ProgramCentralUtil.getObjectWithSelectList( context, objIds, slParam,false);
	        }else {
	            objectWithSelectList = ProgramCentralUtil.getObjectWithSelectList( context, objIds, slParam);
	        }
			
			for(int i=0;i<size;i++){
				BusinessObjectWithSelect bws = objectWithSelectList.get(i);
	            String sCurrent = bws.getSelectData(ProgramCentralConstants.SELECT_CURRENT);
				String sLevel = levels[i];
				if(sLevel.equalsIgnoreCase(sColumnLevel) && !sCurrent.equals(DecConstants.STATE_PROJECT_TASK_COMPLETE))
				{
					slReturn.add("true");
				}
				else
				{
					slReturn.add("false");
				}
			}
			return slReturn;
        }catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }

    /**
     * jhlee Add
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList isAccessEditIWPInfo(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
    	
    	Map paramMap = (Map)JPO.unpackArgs(args);
    	Map requestMap = (Map)paramMap.get("requestMap");
    	String parentOID = (String)requestMap.get("parentOID");
    	DomainObject doPS = DomainObject.newInstance(context, parentOID);
    	String sIWPYN = doPS.getAttributeValue(context, DecConstants.ATTRIBUTE_DECIWP_YN);
    	boolean bAccess = DecStringUtil.equalsIgnoreCase("Y", sIWPYN) ? false : true;
    	MapList mlObject = (MapList)paramMap.get("objectList");
    	
        int size = mlObject.size();
        String[] objIds = new String[size];
        
        for(int i=0;i<size;i++){
            Map objectMap = (Map)mlObject.get(i);
            objIds[i]       = (String)objectMap.get(SELECT_ID);
        }

        String invokeFromODTFile = (String)paramMap.get("invokeFrom"); //Added for ODT
        BusinessObjectWithSelectList objectWithSelectList = null;
        StringList slParam = new StringList();
        slParam.add(ProgramCentralConstants.SELECT_CURRENT);
        
        if("TestCase".equalsIgnoreCase(invokeFromODTFile)){ //Added for ODT usage
            objectWithSelectList = ProgramCentralUtil.getObjectWithSelectList( context, objIds, slParam,false);
        }else {
            objectWithSelectList = ProgramCentralUtil.getObjectWithSelectList( context, objIds, slParam);
        }

        for(int i=0;i<size;i++){
            BusinessObjectWithSelect bws = objectWithSelectList.getElement(i);
            String sCurrent = bws.getSelectData(ProgramCentralConstants.SELECT_CURRENT);
            if(bAccess && !sCurrent.equals(DecConstants.STATE_PROJECT_TASK_COMPLETE)) {
            	slReturn.add("true");
            }else{
            	slReturn.add("false");
            }
        }
    	
		return slReturn;
    }
	/**
	 * jhlee Add 2023-09-08 form에서 IWP 여부확인하여 수정가능한지 확인
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public boolean isAccessEditIWPInfoForm(Context context, String args[]) throws Exception {
		HashMap inputMap = (HashMap)JPO.unpackArgs(args);
		HashMap requestMap    = (HashMap) inputMap.get("requestMap");
		String objectId = null;
		if(requestMap == null){
			objectId   = (String)inputMap.get("objectId");
		}else{
			objectId   = (String)requestMap.get("objectId");
		}
		DomainObject doTask = new DomainObject(objectId);
		String sCurrent = doTask.getInfo(context, DomainConstants.SELECT_CURRENT);
		String sPSOID = doTask.getInfo(context, "to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST +"].to.id");
		DomainObject doPS = DomainObject.newInstance(context, sPSOID);
    	String sIWPYN = doPS.getAttributeValue(context, DecConstants.ATTRIBUTE_DECIWP_YN);
    	boolean bAccess = DecStringUtil.equalsIgnoreCase("Y", sIWPYN) ? false : true;
        if(bAccess && !sCurrent.equals(DecConstants.STATE_PROJECT_TASK_COMPLETE)) {
			return true;
		}else{
			return false;
		}
	}
    
    /**
     * jhlee Add 07-27
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public boolean isAccessIWPExcutionList(Context context, String[] args) throws Exception{
    	Map programMap = JPO.unpackArgs(args);
    	String sOID = (String) programMap.get("objectId");
    	DomainObject doObj = DomainObject.newInstance(context, sOID);
    	String sObjType = doObj.getTypeName(context);
    	// Phase에선 안보일것
    	if(!DecStringUtil.equalsAny(sObjType, DecConstants.TYPE_PROJECT_SPACE, DecConstants.TYPE_DECCWPTASK, DecConstants.TYPE_DECIWPTASK)) {
    		return false;
    	}
    	
    	if(!DecStringUtil.equals(sObjType, DecConstants.TYPE_PROJECT_SPACE)) {
    		String sPSOID = doObj.getInfo(context, "to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST + "].to.id");
    		if(UIUtil.isNotNullAndNotEmpty(sPSOID)) {
    			doObj.setId(sPSOID);
    		}
    	}
    	String sIWPYN = doObj.getAttributeValue(context, DecConstants.ATTRIBUTE_DECIWP_YN);
    	if(DecStringUtil.equals(sIWPYN, "Y")) {
        	return true;
    	}else {
    		return false;
    	}
    }

    /**
     * jhlee Add 07-27
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public boolean isAccessCWPChangeHistoryList(Context context, String[] args) throws Exception {
    	Map programMap = JPO.unpackArgs(args);
    	String sOID = (String) programMap.get("objectId");
    	DomainObject doObj = DomainObject.newInstance(context, sOID);
    	String sObjType = doObj.getTypeName(context);
    	// Phase, IWP에선 안보일것
    	boolean bAccess = DecStringUtil.equalsAny(sObjType, DecConstants.TYPE_PROJECT_SPACE, DecConstants.TYPE_DECCWPTASK);
        
        if(bAccess) {
        	decAccess_mxJPO accessJPO = new decAccess_mxJPO();
        	bAccess = accessJPO.hasAccess(context, args);
        }
        
    	return bAccess;
    }
    /**
     * jhlee Add 07-27
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public boolean isAccessDeliverableStatusCommand(Context context, String[] args) throws Exception {
    	Map programMap = JPO.unpackArgs(args);
    	String sOID = (String) programMap.get("objectId");
    	DomainObject doObj = DomainObject.newInstance(context, sOID);
    	String sObjType = doObj.getTypeName(context);
    	String sWBSType = doObj.getAttributeValue(context, DecConstants.ATTRIBUTE_DECWBSTYPE);
    	// Phase, IWP에선 안보일것
    	if(!DecStringUtil.equals(sObjType, DecConstants.TYPE_PHASE)) {
    		return true;
    	}else if(DecStringUtil.equalsIgnoreCase("Unit", sWBSType)){
    		return true;
    	}else {
    		return false;
    	}
    }

    /**
     * jhlee Add 09-09
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public boolean isAccessPMCUpdate(Context context, String[] args) throws Exception {
    	Map programMap = JPO.unpackArgs(args);
    	String sOID = (String) programMap.get("objectId");
    	DomainObject doObj = DomainObject.newInstance(context, sOID);
    	String sObjType = doObj.getTypeName(context);
    	boolean bAccess = true;
		String sCurrent = doObj.getInfo(context, DecConstants.SELECT_CURRENT);
		if(DecConstants.STATE_PROJECT_TASK_COMPLETE.equals(sCurrent)) {
			bAccess = false;
		}
        if(bAccess) {
        	if(!DecStringUtil.equalsAny(sObjType, DecConstants.TYPE_PROJECT_SPACE)) {
        		sOID = doObj.getInfo(context, "to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST + "].to.id");
        	}
        	Map mAccessMap = new HashMap();
        	mAccessMap.putAll(programMap);
        	mAccessMap.put("objectId", sOID);
        	String[] args2 = JPO.packArgs(mAccessMap);
        	decAccess_mxJPO accessJPO = new decAccess_mxJPO();
        	bAccess = accessJPO.hasAccess(context, args2);
        }
    	return bAccess;
    }
    
    /**
     * jhlee Add 05-25 CWP Master List의 각 LV 컬럼값
     * @param context
     * @param args
     * @param sInfoName
     * @return
     * @throws Exception
     */
    public StringList getLVCode(Context context, String[] args) throws Exception {
    	return getLVInfo(context, args, DecConstants.SELECT_NAME);
    }
    public StringList getLVDesc(Context context, String[] args) throws Exception {
    	return getLVInfo(context, args, DecConstants.SELECT_DESCRIPTION);
    }
    private StringList getLVInfo(Context context, String[] args, String sInfoName) throws Exception {
    	StringList slReturn = new StringList();
    	try {
	    	Map programMap = JPO.unpackArgs(args);
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	        HashMap paramList   = (HashMap) programMap.get("paramList");
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	Map mObject = null;
	    	String sColumnLevel = (String)settings.get(DecConstants.SELECT_LEVEL);
	    	String sOID = DecConstants.EMPTY_STRING;
	    	String sReturn = DecConstants.EMPTY_STRING;
	    	String sType = DecConstants.EMPTY_STRING;
	    	String sParentKey = "to[" + DecConstants.RELATIONSHIP_SUBTASK + "].from.";
	    	String sParentOID = DecConstants.EMPTY_STRING;
	    	StringBuilder sbParentKey = new StringBuilder();
	    	int iColumnLevel = Integer.valueOf(sColumnLevel);
	    	int iLevel = 0;
	    	int iDifferenceLevel = 0;
	    	int size = mlObject.size();
	        boolean isPrinterFriendly = false;
	        String strPrinterFriendly = (String)paramList.get("reportFormat");
	        if ( strPrinterFriendly != null ) {
	            isPrinterFriendly = true;
	        }else {
	        	strPrinterFriendly="";
	        }
	    	
	    	StringList slOID = new StringList();
	    	Set<String> setParam = new HashSet<String>();
	    	StringList slParam = new StringList();
	    	
	    	String[] strObjectIds = new String[size];
	    	for(int i=0; i<size; i++) {
	    		mObject = (Map)mlObject.get(i);
	    		iLevel = (Integer)mObject.get("scheduleLevel");
    			sOID = (String)mObject.get(DecConstants.SELECT_ID);
    			strObjectIds[i] = sOID;
	    		if(iLevel > iColumnLevel) {
	    			sbParentKey.setLength(0);
	    			iDifferenceLevel = iLevel - iColumnLevel;
	    			for(int j=0; j<iDifferenceLevel; j++) {
	    				sbParentKey.append(sParentKey);
	    			}
	    			setParam.add(sbParentKey.toString() + DecConstants.SELECT_ID);
	    			setParam.add(sbParentKey.toString() + DecConstants.SELECT_TYPE);
	    			setParam.add(sbParentKey.toString() + sInfoName);
	    		}
	    	}
	    	slParam.addAll(setParam);
	        BusinessObjectWithSelectList objectWithSelectList = ProgramCentralUtil.getObjectWithSelectList(context, strObjectIds, slParam);
	        BusinessObjectWithSelect bos = null;
	        for(int i=0; i<size; i++) {
	        	mObject = (Map)mlObject.get(i);
	    		iLevel = (Integer)mObject.get("scheduleLevel");
	    		sType = (String)mObject.get(DecConstants.SELECT_TYPE);
    			sOID = (String)mObject.get(DecConstants.SELECT_ID);
	    		if(iLevel == iColumnLevel) {
		    		// 컬럼 레벨과 CWP Task의 레벨이 같을경우
	    			sReturn = (String)mObject.get(sInfoName);
	    		}else if(iLevel < iColumnLevel) {
	    			sReturn = DecConstants.EMPTY_STRING;
	    		}else {
		    		// 컬럼 레벨보다 CWP Task의 레벨이 높을경우 Phase의 정보를 출력
	    			sbParentKey.setLength(0);
	    			iDifferenceLevel = iLevel - iColumnLevel;
	    			for(int j=0; j<iDifferenceLevel; j++) {
	    				sbParentKey.append(sParentKey);
	    			}
	    			bos = objectWithSelectList.get(i);
	    			sReturn = bos.getSelectData(sbParentKey.toString() + sInfoName);
	    			sOID = bos.getSelectData(sbParentKey.toString() + DecConstants.SELECT_ID);
	    			sType = bos.getSelectData(sbParentKey.toString() + DecConstants.SELECT_TYPE);
	    		}
	    		if(DecStringUtil.equals(sInfoName, DecConstants.SELECT_NAME) && DecStringUtil.isNotEmpty(sReturn) && !DecStringUtil.equals(sType, DecConstants.TYPE_PHASE)) {
	    			if(!isPrinterFriendly) {
		    			sReturn = DecCommonUtil.getColumnTreeLinkURL(context, sReturn, sOID) + "<input type=\"hidden\" value=\"" + sReturn + sOID + "\"/>";
	    			}
	    		}
	    		slReturn.add(sReturn);
	    	}
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return slReturn;
    }
    /**
     * jhlee Add 05-25 CWP Task의 이름과 설명 변경시 update function
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public int updateLVCode(Context context, String[] args) throws Exception{
    	return updateLVInfo(context, args, DecConstants.SELECT_NAME);
    }
    public int updateLVDesc(Context context, String[] args) throws Exception{
    	return updateLVInfo(context, args, DecConstants.SELECT_DESCRIPTION);
    }
    
    public int updateLVInfo(Context context, String[] args, String sInfoName) throws Exception{
    	int iReturn = 0;
    	try {
    		ContextUtil.startTransaction(context, true);
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            HashMap paramMap = (HashMap) programMap.get("paramMap");
            HashMap requestMap = (HashMap)programMap.get("requestMap");
            String sNewValue = (String) paramMap.get("New Value");
            String sCWPTaskOID = (String) paramMap.get("objectId");
            StringList slBusSelect = new StringList();
            slBusSelect.add(DecConstants.SELECT_LEVEL);
            slBusSelect.add(DecConstants.SELECT_NAME);
            DomainObject doCWPTask = DomainObject.newInstance(context, sCWPTaskOID);
            if(DecStringUtil.equals(sInfoName, DecConstants.SELECT_NAME)) {
            	// 상위레벨 phase를 가져옴
            	if(DecStringUtil.isEmpty(sNewValue)) {
        			iReturn = 1;
        			throw new FrameworkException(EnoviaResourceBundle.getProperty(context, ProgramCentralConstants.PROGRAMCENTRAL, "ProgramCentral.Alert.IsRequiredValue", context.getSession().getLanguage()));
            	}
            	MapList mlPhase = doCWPTask.getRelatedObjects(context,
															  DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
															  DecConstants.TYPE_PROJECT_MANAGEMENT, //pattern to match types
															  slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
															  null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
															  true, //get To relationships
															  false, //get From relationships
															  (short)1, //the number of levels to expand, 0 equals expand all.
															  DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
															  DecConstants.EMPTY_STRING,
															  0); //where clause to apply to relationship, can be empty ""
            	if(!mlPhase.isEmpty()) {
            		Map mPhase = (Map)mlPhase.get(0);
            		if(sNewValue.indexOf("CWP-") == 0) {
                    	doCWPTask.setName(context, sNewValue);
            		}else {
                		// 상위 phase의 이름으로 prefix 만듬
                		String sPrefix = "CWP-" + (String)mPhase.get(DecConstants.SELECT_NAME) + "-";
                		String sName = sPrefix + sNewValue;
                    	doCWPTask.setName(context, sName);
            		}
            	}
            }else {
            	doCWPTask.setDescription(context, sNewValue);
            }
    		ContextUtil.commitTransaction(context);
    	}catch (Exception e) {
			iReturn = 1;
			ContextUtil.abortTransaction(context);
			throw e;
		}
    	return iReturn;
    }
    /**
     * jhlee Add 05-25 DEC_CWP_CHANGE_REGISTER DB의 값을 가져옴
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList selectCWPChangeRegDataList(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
	    	Map programMap = JPO.unpackArgs(args);
            Map paramList = (Map) programMap.get("paramList");
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	Map mObject = null;
	    	Map mWhere = new HashMap();
	    	Map mData = null;
	    	Map<String, Map> mDBInfo = new HashMap();
	    	
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	
	    	String sColumnNames = DecConstants.EMPTY_STRING;
	    	String sOID = DecConstants.EMPTY_STRING;
	    	String sSiteName = DecConstants.EMPTY_STRING;
	    	String sReturn = DecConstants.EMPTY_STRING;
	    	String sAction = (String)settings.get("action");
	    	String sFormat = (String)settings.get("format");
	    	String sPSOID = (String)paramList.get("parentOID");
	    	Object oData = null;
	    	Timestamp tsData = null;
	    	if(DecStringUtil.equalsIgnoreCase(sFormat, "date")) {
	    		sColumnNames = "CHANGE_DATE";
	    	}else if(DecStringUtil.equalsIgnoreCase(sFormat, "user")) {
	    		sColumnNames = "CHANGE_USER";
	    	}
	    	DomainObject doPS = DomainObject.newInstance(context, sPSOID);
	    	doPS.open(context);
	    	sSiteName = doPS.getName();
	    	
	    	mWhere.put("CHANGE_ACTION", sAction);
    		mWhere.put("SITE_CD", sSiteName);
    		
	    	List mlDataList = sqlSession.selectList("Project.selectLastUpdateCWPChangeRegister", mWhere);
    		if(mlDataList != null && !mlDataList.isEmpty()) {
    			for(Object o : mlDataList) {
    				mData = (Map)o;
    				sOID = (String)mData.get("CWP_OID");
    				mDBInfo.put(sOID, mData);
    			}
    		}else {
    			return slReturn;
    		}
	    	
	    	for(Object o : mlObject) {
	    		mObject = (Map)o;
	    		sOID = (String)mObject.get(DecConstants.SELECT_ID);
		    	mData = mDBInfo.get(sOID);
		    	if(mData == null) {
	    			slReturn.add(DecConstants.EMPTY_STRING);
	    			continue;
		    	}
		    	oData = mData.get(sColumnNames);
		    	if(oData instanceof String) {
		    		sReturn = (String)oData;
		    	}else if(oData instanceof Timestamp) {
		    		tsData = (Timestamp)oData;
		    		sReturn = tsData.toString();
		    	}
		    	if(DecStringUtil.equalsIgnoreCase(sFormat, "date")) {
		    		sReturn = DecDateUtil.changeDateFormat(sReturn, sdf);
		    	}
    			slReturn.add(sReturn);
	    	}
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return slReturn;
    }

    /* jhlee 05-19 기능 불필요
    public Map getLVCodeRange(Context context, String[] args) throws Exception {
    	Map mReturn = new HashMap();
    	try {
	    	StringList slfieldRangeValue = new StringList();
	    	StringList slfieldDisplayRangeValue = new StringList();
	    	StringList slBusSelect = new StringList();
	    	slBusSelect.add(DecConstants.SELECT_LEVEL);
	    	slBusSelect.add(DecConstants.SELECT_TYPE);
	    	slBusSelect.add(DecConstants.SELECT_NAME);
	    	slBusSelect.add(DecConstants.SELECT_ID);
	    	Map programMap = JPO.unpackArgs(args);
	    	Map paramMap = (Map)programMap.get("paramMap");
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	Map mSubTask = null;
	    	String sLevel = (String)settings.get("level");
	    	String sProjectSpaceOID = (String)paramMap.get("objectId");
	    	String sSubTaskLevel = DecConstants.EMPTY_STRING;
	    	String sName = DecConstants.EMPTY_STRING;
	    	String sOID = DecConstants.EMPTY_STRING;
	    	DomainObject doProjectSpace = DomainObject.newInstance(context, sProjectSpaceOID);
	    	MapList mlSubTask = doProjectSpace.getRelatedObjects(context,
					DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
					DecConstants.TYPE_DECCWPTASK + "," + DecConstants.TYPE_PHASE, //pattern to match types
					slBusSelect, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
					null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
					false, //get To relationships
					true, //get From relationships
					Short.valueOf(sLevel), //the number of levels to expand, 0 equals expand all.
					DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
					DecConstants.EMPTY_STRING,
					0); //where clause to apply to relationship, can be empty ""
	    	
	    	for(Object o : mlSubTask) {
	    		mSubTask = (Map)o;
	    		sSubTaskLevel = (String)mSubTask.get(DecConstants.SELECT_LEVEL);
	    		if(DecStringUtil.equals(sLevel, sSubTaskLevel)) {
	    			slfieldRangeValue.add((String)mSubTask.get(DecConstants.SELECT_ID));
	    			slfieldDisplayRangeValue.add((String)mSubTask.get(DecConstants.SELECT_NAME));
	    		}
	    	}
	    	
	    	mReturn.put("field_choices", slfieldRangeValue);
	    	mReturn.put("field_display_choices", slfieldDisplayRangeValue);
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	return mReturn;
    }
    */
    /**
     * CWP Master List connectionProgram
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    /* jhlee 05-19 기능 불필요
    public Map addNewCWPTask(Context context, String[] args) throws Exception {
        Map mReturn = new HashMap();
    	try {
	        Map programMap = (HashMap) JPO.unpackArgs(args);
	        Map paramMap = (Map)programMap.get("paramMap");
	        String parentOID = (String)paramMap.get("parentOID");
	        String sType = DecConstants.EMPTY_STRING;
	        String sCwpLevel = DecConstants.EMPTY_STRING;
	        String sCwpLevelCode = DecConstants.EMPTY_STRING;
	        String sCwpLevelDesc = DecConstants.EMPTY_STRING;
	        String sParentLevel = DecConstants.EMPTY_STRING;
	        String sPAId = DecConstants.EMPTY_STRING;
	        StringList slParam = new StringList(DecConstants.SELECT_TYPE);
	        slParam.add(DecConstants.SELECT_LEVEL);
	        StringList slCodeLevel = new StringList();
	        slCodeLevel.add("LV1 Code");
	        slCodeLevel.add("LV2 Code");
	        slCodeLevel.add("LV3 Code");
	        slCodeLevel.add("LV4 Code");
	        slCodeLevel.add("LV5 Code");
	        slCodeLevel.add("LV6 Code");
	        slCodeLevel.add("LV7 Code");
	        DomainObject doPS = DomainObject.newInstance(context,parentOID);
	        DomainObject doPA = DomainObject.newInstance(context);
	        DomainObject doCreateCwpTask = DomainObject.newInstance(context);
	        DomainObject doParent = DomainObject.newInstance(context);
	    	ProjectSequence pseq = null;
	        MapList mlItems = new MapList();
	        // CWP Task의 레벨을 뽑기위한 프로젝트의 subTask 목록에서
	        MapList mlSubTask = doPS.getRelatedObjects(context,
														DecConstants.RELATIONSHIP_SUBTASK, //pattern to match relationships
														DecConstants.TYPE_DECCWPTASK + "," + DecConstants.TYPE_PHASE, //pattern to match types
														slParam, //the eMatrix StringList object that holds the list of select statement pertaining to Business Obejcts.
														null, //the eMatrix StringList object that holds the list of select statement pertaining to Relationships.
														false, //get To relationships
														true, //get From relationships
														(short)0, //the number of levels to expand, 0 equals expand all.
														DecConstants.EMPTY_STRING, //where clause to apply to objects, can be empty ""
														DecConstants.EMPTY_STRING,
														0); //where clause to apply to relationship, can be empty ""
	        Map mSubTask = null;
			Map mItem = new HashMap();
	        for(Object o : mlSubTask) {
	        	mSubTask = (Map)o;
	        	sType = (String)mSubTask.get(DecConstants.SELECT_TYPE);
	        	if(DecStringUtil.equals(DecConstants.TYPE_DECCWPTASK, sType)) {
	        		// CWP Task의 level을 저장
	        		sCwpLevel = (String)mSubTask.get(DecConstants.SELECT_LEVEL);
	        		break;
	        	}
	        }
	        sCwpLevelCode = "LV" + sCwpLevel + " Code";
	        sCwpLevelDesc = "LV" + sCwpLevel + " Desc";
	        
	        //CWP Task의 parent 레벨을 가져옴
	        for(int i=0; i<slCodeLevel.size(); i++) {
	        	if(DecStringUtil.equals(slCodeLevel.get(i), sCwpLevelCode)) {
	        		if(i>0) {
	        			sParentLevel = slCodeLevel.get(i-1);
	        		}
	        	}
	        }
	        // 생성하였을때 입력된 데이터
	        Element elm = (Element)programMap.get("contextData");
	
	        MapList chgRowsMapList = UITableIndented.getChangedRowsMapFromElement(context, elm);
	        Map changedRowMap = null;
	        Map mColumn = null;
	        Map mAttr = new HashMap();
	        Date date = new Date();
			mAttr.put(DecConstants.ATTRIBUTE_TASK_ESTIMATED_START_DATE, DecDateUtil.changeDateFormat(date, new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(), Locale.US)));
			mAttr.put(DecConstants.ATTRIBUTE_TASK_ESTIMATED_FINISH_DATE, DecDateUtil.changeDateFormat(date, new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(), Locale.US)));
			mAttr.put(DecConstants.ATTRIBUTE_TASK_CONSTRAINT_DATE, DecDateUtil.changeDateFormat(date, new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(), Locale.US)));
	        String sPARel  		  = DecConstants.EMPTY_STRING;
	        String sParentCodeOID = DecConstants.EMPTY_STRING;
	        String sCWPCode       = DecConstants.EMPTY_STRING;
	        String sDesc          = DecConstants.EMPTY_STRING;
	        String sActivityType  = DecConstants.EMPTY_STRING;
	        String sDiscipline    = DecConstants.EMPTY_STRING;
	        String sSequentialNo  = DecConstants.EMPTY_STRING;
	        String sEWPNo         = DecConstants.EMPTY_STRING;
	        String sDesignOffice  = DecConstants.EMPTY_STRING;
	        String sConstOffice   = DecConstants.EMPTY_STRING;
	        String sRemark        = DecConstants.EMPTY_STRING;
	        String sRowId         = DecConstants.EMPTY_STRING;
	        String markup         = DecConstants.EMPTY_STRING;
	        ContextUtil.startTransaction(context, true);
	        
	        for (int i = 0, size = chgRowsMapList.size(); i < size; i++) {
	            changedRowMap = (HashMap) chgRowsMapList.get(i);
	            mColumn = (Map)changedRowMap.get("columns");
	            sRowId = (String) changedRowMap.get("rowId");
	            markup = (String) changedRowMap.get("markup");
	            // 상위 Parent가 있을시 Parent는 Phase, 없을시 Project Space를 상위 parent로 간주
	            if(DecStringUtil.isNotEmpty(sParentLevel)) {
	            	sParentCodeOID   = (String)mColumn.get(sParentLevel);
	            	sPARel = DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY;
	            }else {
	            	sParentCodeOID   = parentOID;
	            	sPARel = DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST;
	            }
				doParent.setId(sParentCodeOID);
	            sPAId = doParent.getInfo(context, "to[" + sPARel + "].from." + DecConstants.SELECT_ID);
	            doPA.setId(sPAId);
				
	            sCWPCode      = (String)mColumn.get(sCwpLevelCode);
	            sDesc		  = (String)mColumn.get(sCwpLevelDesc);
	            sActivityType = (String)mColumn.get("Activity Type");
	            sDiscipline   = (String)mColumn.get("Discipline");
	            sSequentialNo = (String)mColumn.get("Sequential No");
	            sEWPNo        = (String)mColumn.get("EWP No");
	            sDesignOffice = (String)mColumn.get("Design Office");
	            sConstOffice  = (String)mColumn.get("Const Office");
	            sRemark       = (String)mColumn.get("Remark");
	            mAttr.put(DecConstants.ATTRIBUTE_DECSEQUENTIALNO, sSequentialNo );
	            mAttr.put(DecConstants.ATTRIBUTE_DECEWPNO, sEWPNo );
	            mAttr.put(DecConstants.ATTRIBUTE_DECDESIGNOFFICE, sDesignOffice );
	            mAttr.put(DecConstants.ATTRIBUTE_DECCONSTOFFICE, sConstOffice );
	            mAttr.put(DecConstants.ATTRIBUTE_DECREMARK, sRemark );
	            mAttr.put(DecConstants.ATTRIBUTE_DECCWPACTIVITYTYPE, sActivityType );
	            mAttr.put(DecConstants.ATTRIBUTE_DECDISCIPLINE, sDiscipline );
	            
	            // 생성한뒤 Project Space schedule에 연결
	            doCreateCwpTask.createObject(context, DecConstants.TYPE_DECCWPTASK, sCWPCode, null, DecConstants.POLICY_PROJECT_TASK, DecConstants.VAULT_ESERVICE_PRODUCTION);
				doCreateCwpTask.setAttributeValues(context, mAttr);
				doCreateCwpTask.setDescription(context, sDesc);
				DomainRelationship.connect(context, doParent, DecConstants.RELATIONSHIP_SUBTASK, doCreateCwpTask);
				DomainRelationship.connect(context, doPA, DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY, doCreateCwpTask);
	            pseq = new ProjectSequence(context, doPA.getPhysicalId(context));
				pseq.assignSequence(context, doParent.getPhysicalId(context), doCreateCwpTask.getPhysicalId(context), (String)null, doParent.getPhysicalId(context), false);
				
				// 결과 리턴
	            mItem.put("pid", parentOID);
	            mItem.put("oid", doCreateCwpTask.getObjectId(context));
	            mItem.put("rowId", sRowId);
	            mItem.put("markup", markup);
	            mItem.put("columns", mColumn);
	            mlItems.add(mItem);
	        }
			mReturn.put("Action", "success");
    		mReturn.put("changedRows", mlItems);
    		ContextUtil.commitTransaction(context);
    	}catch (Exception e) {
    		ContextUtil.abortTransaction(context);
    		mReturn.put("Action", "ERROR");
            mReturn.put("Message", e.getMessage());
		}
        return mReturn;
        
    }
    */
    
    // 230512 created by choimingi 프로젝트UI 이미지
    public String getImageHolderProjectUI(Context context, String[] ids) throws Exception {
    	StringBuilder sbResult  = new StringBuilder();
        String sURLPrimaryImage = "" ;
        String imgType = "Image Holder";
        String attrName = "Primary Image";
       // Map programMap = JPO.unpackArgs(args);
        String proId = ids[0];
    	ArrayList bopArrayList  = new ArrayList();
    	//Map programMap = JPO.unpackArgs(args);
    	//Map paramMap = (Map)programMap.get("paramMap");
    	String sObjectId = proId;
    	//String sObjectId = (String)paramMap.get("objectId");
    	//String sStyle = DecStringUtil.nullToEmpty(paramMap.get("style"));
    	DomainObject doProject = DomainObject.newInstance(context, sObjectId);
//    	RelationshipList formRelList = doProject.getToRelationship(context);
//    	String[] relIds = formRelList.getNames();
//    	for(int i=0; i<=formRelList.size();i++) {
//    		String relId = (String) relIds[i];
//    		DomainObject relDom = new DomainObject(relId);
//    		String relName = relDom.getName(context);
//    	}
//    	String[] listName = formRelList.getNames();
//    	String connectionId = MqlUtil.mqlCommand(context, "print bus $1 select relationship["+imgType+"].id dump",sObjectId);	
//    	String imageHolderName = MqlUtil.mqlCommand(context, "print connection "+connectionId+" select from.name dump");	
//    	String imageHolderId = MqlUtil.mqlCommand(context, "temp query bus $1 $2 $3 select id",imgType,imageHolderName,"*");	
//    	String imageName = MqlUtil.mqlCommand(context, "print bus "+imageHolderId+" attribute["+attrName+"].value dump");	
    	try {
    		
	    	String sFileName = doProject.getInfo(context, "to[" + DecConstants.MVL_RELATIONSHIP_IMAGE_HOLDER + "].from.format[" + DecConstants.MVL_FORMAT_MX_SMALL_IMAGE + "].file.name", false);
	    	String sImageHolderId = doProject.getInfo(context, "to[" + DecConstants.MVL_RELATIONSHIP_IMAGE_HOLDER + "].from.id");
	    	// Modified by hslee on 2023.07.10 --- [s]
	    	if ( StringUtils.isNotEmpty(sImageHolderId) ) 
	    	{
	    		String imageName = MqlUtil.mqlCommand(context, "print bus "+sImageHolderId+" select attribute[Primary Image].value dump");	
	    		
	    		
	    		HashMap objectMap = new HashMap();
	    		objectMap.put("id", sObjectId);
	    		MapList objectList = new MapList();
	    		objectList.add(objectMap);	
	    		BusinessObjectProxy bop = new BusinessObjectProxy(sImageHolderId, DecConstants.MVL_FORMAT_MX_IMAGE, imageName, false, false);
	    		bopArrayList.add(bop);
	    		
	    		String[] tmpImageUrls = ImageRequestData.getImageURLS(context, context.getDocumentURL("", true), bopArrayList);
	    		
	    		if(tmpImageUrls.length>0){
	    			sURLPrimaryImage = tmpImageUrls[0];
	    			if(UIUtil.isNullOrEmpty(sURLPrimaryImage)) {
	    				sURLPrimaryImage = "../common/images/No image_Project.jpg";
	    			}
	    		}else{
	    			sURLPrimaryImage = "../common/images/No image_Project.jpg";
	    		}
	    	}
	    	else
	    	{
	    		sURLPrimaryImage = "../common/images/No image_Project.jpg";
	    	}
	    	// Modified by hslee on 2023.07.10 --- [e]
		}catch(Exception e){
			sURLPrimaryImage = "../common/images/No image_Project.jpg";
		}
    
	    sbResult.append("<img id='divDropPrimaryImage' src='").append(sURLPrimaryImage).append("' border='1' style='vertical-align:middle;border: 1px solid #bababa;box-shadow:1px 1px 2px #ccc;").append("'></img>");
	    
	    return sbResult.toString();
    }

    public StringList getRelatedMaterialInfo(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();

    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
	    	Map programMap = JPO.unpackArgs(args);
			Map paramList = (Map) programMap.get("paramList");
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	Map mObject = null;
	    	
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	
	    	String sInfoName = (String)settings.get("Info Name");
	    	String sInfoType = (String)settings.get("Info Type");
	    	
			String objectId = (String) paramList.get("objectId");
			
			DomainObject doPS = DomainObject.newInstance(context, objectId);
			doPS.open(context);
			Map mParam = new HashMap();
			mParam.put("SITE_CD", doPS.getName());
			List lAllocationDataList = null;
			if("Field".equals(sInfoType)) {
				lAllocationDataList = sqlSession.selectList("IF_Material.selectCWPSummaryFieldAllocation", mParam);
			}else if("Shop".equals(sInfoType)) {
				lAllocationDataList = sqlSession.selectList("IF_Material.selectCWPSummaryShopAllocation", mParam);
			}

			Map mDBData = new HashMap();
        	Map mData = null;
        	String sCWPNo = null;
    		for(Object o : lAllocationDataList) {
            	mData = (Map)o;
            	sCWPNo = (String)mData.get("CWP_NO");
            	mDBData.put(sCWPNo, mData);
            }
    		Timestamp tsAvaliabilityDate = null;
    		BigDecimal bdDelayCnt = null;
	    	for(Object o : mlObject) {
	    		mObject = (Map)o;
            	sCWPNo = (String)mObject.get("name");
            	mData = (Map)mDBData.get(sCWPNo);
            	if("Availability Date".equals(sInfoName) && mData != null && mData.get("WKOP_ABLE_YMD") != null) {
            		tsAvaliabilityDate = (Timestamp)mData.get("WKOP_ABLE_YMD");
            		slReturn.add(DecDateUtil.changeDateFormat(DecDateUtil.autoChangeDate(tsAvaliabilityDate.toString()), eMatrixDateFormat.getInputDateFormat()));
            		slReturn.add(DecConstants.EMPTY_STRING);
            	}else if("Delay".equals(sInfoName) && mData != null && mData.get("DELY_DCNT") != null) {
            		bdDelayCnt = (BigDecimal)mData.get("DELY_DCNT");
            		slReturn.add(bdDelayCnt.toString());
            	}else {
            		slReturn.add(DecConstants.EMPTY_STRING);
            	}
	    	}
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	
    	return slReturn;
    }
    
    public StringList getRelatedIWPTaskQtyInfo(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();

    	try {
	    	Map programMap = JPO.unpackArgs(args);
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	Map paramList = (Map)programMap.get("paramList");
	    	String sPSOID = (String)paramList.get("parentOID");
	    	DomainObject doPS = DomainObject.newInstance(context, sPSOID);
	    	String sIWPYN = doPS.getAttributeValue(context, DecConstants.ATTRIBUTE_DECIWP_YN);
	    	Map mObject = null;
	    	
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	
	    	String sAttributeName = (String)settings.get("Attribute Name");
	    	String sSelectAttributeName = DomainObject.getAttributeSelect(sAttributeName);
	    	String sIWPId = null;
	    	String sAttrValue = null;
	    	String sIWPData = null;
	    	String sCWPKeyQuantityType = null;
	    	String sIWPKeyQuantityType = null;
	    	StringList slIWPData = new StringList();
	    	Object oIWPData = null;
	    	DomainObject doIWP = DomainObject.newInstance(context);
	    	int iQtyValue = 0;
	    	for(Object o : mlObject) {
	    		mObject = (Map)o;
	    		iQtyValue = 0;
	    		slIWPData.setSize(0);
	    		if(DecStringUtil.equals(sIWPYN, "Y")) {
		    		oIWPData = mObject.get("from[" + DecConstants.RELATIONSHIP_SUBTASK + "].to." + DecConstants.SELECT_ID);
		    		if(oIWPData == null){
		    			slReturn.add(DecConstants.EMPTY_STRING);
		    			continue;
		    		}else {
		    			slIWPData = DecStringUtil.getStringListChangeObject(oIWPData);
		    		}
		    		for(String sIWPOID : slIWPData) {
		    			doIWP.setId(sIWPOID);
		    			sCWPKeyQuantityType = (String)mObject.get(DecConstants.SELECT_ATTRIBUTE_DECKEYQUANTITYTYPE);
		    			sIWPKeyQuantityType = doIWP.getAttributeValue(context, DecConstants.ATTRIBUTE_DECKEYQUANTITYTYPE);
		    			
		    			if(DecStringUtil.isNoneBlank(sCWPKeyQuantityType, sIWPKeyQuantityType) 
		    			&& DecStringUtil.equals(sCWPKeyQuantityType, sIWPKeyQuantityType)) {
		    				sAttrValue = doIWP.getAttributeValue(context, sAttributeName);
		    				if(DecStringUtil.isInteger(sAttrValue)) {
		    					iQtyValue += Integer.valueOf(sAttrValue);
		    				}
		    			}
		    		}
		    		slReturn.add(String.valueOf(iQtyValue));
	    		}else {
	    			slReturn.add((String)mObject.get(sSelectAttributeName));
	    		}
	    	}
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	
    	return slReturn;
    }
    
    public StringList getRelatedIWPTaskSummaryInfo(Context context, String[] args) throws Exception {
    	StringList slReturn = new StringList();

    	try {
	    	Map programMap = JPO.unpackArgs(args);
	    	Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	Map mObject = null;
	    	
	    	MapList mlObject = (MapList)programMap.get("objectList");
	    	
	    	String sInfoName = (String)settings.get("Info Name");
	    	String sIWPId = null;
	    	String sIWPCurrent = null;
	    	StringList slIWPCurrent = null;
	    	Object oIWPCurrent = null;
	    	int iCnt = 0;
	    	int iCompleteCnt = 0;
	    	BigDecimal bdCnt = BigDecimal.ZERO;
	    	BigDecimal bdCompleteCnt = BigDecimal.ZERO;
	    	BigDecimal bdOneHundred = new BigDecimal(100);
	    	for(Object o : mlObject) {
	    		mObject = (Map)o;
	    		slIWPCurrent = new StringList();
	    		iCnt = 0;
	    		iCompleteCnt = 0;
	    		oIWPCurrent = mObject.get("from[" + DecConstants.RELATIONSHIP_SUBTASK + "].to." + DecConstants.SELECT_CURRENT);
	    		if(oIWPCurrent instanceof StringList) {
	    			slIWPCurrent.addAll((StringList)oIWPCurrent);
		    		if(slIWPCurrent.isEmpty()) {
		    			slReturn.add(DecConstants.EMPTY_STRING);
		    			continue;
		    		}
	    		}else if(oIWPCurrent == null) {
	    			slReturn.add(DecConstants.EMPTY_STRING);
	    			continue;
	    		}else {
	    			sIWPCurrent = (String)oIWPCurrent;
	    			if(DecStringUtil.isEmpty(sIWPCurrent)) {
		    			slReturn.add(DecConstants.EMPTY_STRING);
		    			continue;
	    			}
	    			slIWPCurrent.add(sIWPCurrent);
	    		}
	    		iCnt = slIWPCurrent.size();
    			for(String sCurrent : slIWPCurrent) {
    				if(DecStringUtil.equals(DecConstants.STATE_PROJECT_TASK_COMPLETE, sCurrent)) {
    					iCompleteCnt++;
    				}
    			}
	    		if(DecStringUtil.equals("Total", sInfoName)) {
	    			slReturn.add(String.valueOf(iCnt));
	    		}else if(DecStringUtil.equals("Complete", sInfoName)) {
	    			slReturn.add(String.valueOf(iCompleteCnt));
	    		}else {
	    			String sPercent = DecConstants.EMPTY_STRING;
	    			// 0으로 나눌시 에러 방지
	    			if(iCnt == 0 || iCompleteCnt == 0) {
	    				sPercent = "0";
	    			}else {
		    			bdCnt = new BigDecimal(iCnt);
		    			bdCompleteCnt = new BigDecimal(iCompleteCnt);
	    				sPercent = bdCompleteCnt.divide(bdCnt, 1, RoundingMode.HALF_EVEN).multiply(bdOneHundred).setScale(0).toString();
	    			}
	    			if(DecStringUtil.equals("ProgressBar", sInfoName)) {
//		    			slReturn.add("<div style=\"text-align:right;background:#6FBC4B;width:" + sPercent + "%;" + "\"><b> " + sPercent + "% </b></div>");
		    			slReturn.add(generateProgressBarHTMLExpr(sPercent)); // Refactored by hslee on 2023.08.09
	    			}
	    		}
	    	}
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    	
    	return slReturn;
    }
    
    /**
     * Percent값을 받아서 Progress Bar 형태의 html을 반환한다.
     * @param percent
     * @return
     * @throws Exception
     */
    public String generateProgressBarHTMLExpr(String percent) throws Exception{
    	return "<div style=\"text-align:right;background:#6FBC4B;width:" + percent + "%;" + "\"><b> " + percent + "% </b></div>";
    }
    
    /**
     * jhlee Add 2023-05-25 EWP Actual 입력시 EWP Status In-Progress로 수정
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public int triggerModifyEWPStatus(Context context, String[] args) throws Exception {
    	String sOID = args[0];
    	String sAttrName = args[1];
    	String sAttrValue = args[2];
    	String sNewAttrValue = args[3];
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
    		ContextUtil.startTransaction(context, true);
	    	Date date = new Date();
	    	String sToday = DecDateUtil.changeDateFormat(date, DecDateUtil.IF_FORMAT);
    		DomainObject doObj = DomainObject.newInstance(context, sOID);
    		if(DecStringUtil.equals(sAttrName, DecConstants.ATTRIBUTE_DECEWPRELEASEACTUAL)) {
    			Map<String, String> mAttr = doObj.getAttributeMap(context);
    			String sCurrent = mAttr.get(DecConstants.ATTRIBUTE_DECEWPSTATUS);
    			if(DecStringUtil.equalsAny(sCurrent, DecConstants.ATTRIBUTE_DECEWPSTATUS_RANGE_TOBESTARTED, DecConstants.ATTRIBUTE_DECEWPSTATUS_RANGE_DELAY)) {
    				StringList slCWPOID = doObj.getInfoList(context, "to[" + DecConstants.RELATIONSHIP_DECEWPREL + "].from.id");
    				DomainObject doCWP = DomainObject.newInstance(context);
    				Map mCWPChangeRegister = new HashMap();
    				for(String sCWPOID : slCWPOID) {
    					doCWP.setId(sCWPOID);
        				doCWP.open(context);
        				mCWPChangeRegister.put("SITE_CD", doCWP.getInfo(context, "to[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_KEY + "].from.from[" + DecConstants.RELATIONSHIP_PROJECT_ACCESS_LIST + "].to." + DecConstants.SELECT_NAME));
        				mCWPChangeRegister.put("CHANGE_DATE", sToday);
        				mCWPChangeRegister.put("CHANGE_USER", context.getUser());
        				mCWPChangeRegister.put("INPUT_TYPE", "Excel");
        	    		mCWPChangeRegister.put("CWP_NO", doCWP.getName());
    		    		mCWPChangeRegister.put("CHANGE_ACTION", "Modify");
    		    		mCWPChangeRegister.put("CHANGE_ATTRIBUTE", "EWPStatus");
    		    		mCWPChangeRegister.put("BEFORE_VALUE", sAttrValue);
    		    		mCWPChangeRegister.put("AFTER_VALUE", DecConstants.ATTRIBUTE_DECEWPSTATUS_RANGE_INPROGRESS);
    		    		mCWPChangeRegister.put("CWP_OID", sCWPOID);
    		    		sqlSession.insert("Project.insertImportCWPChangeRegister", mCWPChangeRegister);
    		    		sqlSession.commit();
    		    		doObj.setAttributeValue(context, DecConstants.ATTRIBUTE_DECEWPSTATUS, DecConstants.ATTRIBUTE_DECEWPSTATUS_RANGE_INPROGRESS);
    				}
    			}
    		}
    		ContextUtil.commitTransaction(context);
    	}catch (Exception e) {
			e.printStackTrace();
			ContextUtil.abortTransaction(context);
			return 1;
		}
    	return 0;
    }
    
    /**
     * Get Subcon list related Project
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public MapList getSubConList(Context context, String[] args) throws Exception{
    	try {
    		Map programMap = (Map) JPO.unpackArgs(args);
    		String projectId = (String) programMap.get("objectId");
    		DomainObject doProject = DomainObject.newInstance(context, projectId);
    		
    		StringList slSelect = new StringList();
    		slSelect.add(DomainConstants.SELECT_ID);
    		slSelect.add(DomainConstants.SELECT_NAME);
    		
    		StringList slRelSelect = new StringList();
    		slRelSelect.add(DomainRelationship.SELECT_ID);
    		
    		MapList subconList = doProject.getRelatedObjects(context
    				, DecConstants.RELATIONSHIP_DECPROJECTSUBCONREL, "decSubcon"
    				, slSelect, slRelSelect
    				, false, true
    				, (short) 1
    				, null, null
    				, 0);
    		
    		return subconList;
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public Map doInterface(Context context, String[] args) throws Exception{
    	Map resultMap = new HashMap(); 
    	try {
    		Map programMap = (Map) JPO.unpackArgs(args);
    		String orgCd = (String) programMap.get("orgCd");
    		
    		// GET IF Data
    		List<Map<String,Object>> projectList = null;
    		List<Map<String,Object>> scheduleList = null;
    		
    		try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
    			
    			Map paramMap = new HashMap();
    			paramMap.put("SITE_CD", orgCd);
    			
    			projectList = sqlSession.selectList("Project.selectProjectInfo", paramMap);
    			scheduleList = sqlSession.selectList("Project.selectProjectSchedule", paramMap);
    		}
    		
    		if ( projectList != null && projectList.size() == 1 )
    		{
    			Map projectMap = projectList.get(0);
    			
    			String objectId = DecMatrixUtil.getObjectId(context, DomainConstants.TYPE_PROJECT_SPACE, orgCd);
    			
    			if ( StringUtils.isNotEmpty(objectId) )
    			{
    				DomainObject doProject = DomainObject.newInstance(context, objectId);
    				
    				SimpleDateFormat ifDateFormat = new SimpleDateFormat("yyyyMMdd");
    				SimpleDateFormat inputDateFormat = new SimpleDateFormat(eMatrixDateFormat.getInputDateFormat(), Locale.US);
    				
    				String IF_DATE = String.valueOf( projectMap.get("IF_DATE") );
    				Date dIF_DATE = DecDateUtil.autoChangeDate(IF_DATE);
    				if(dIF_DATE!= null) {
    					IF_DATE = DecDateUtil.changeDateFormat(dIF_DATE, eMatrixDateFormat.getInputDateFormat());
    				}
    				
        			Map attrMap = new HashMap();
        			attrMap.put("decSiteName", projectMap.get("ORG_NM"));
        			attrMap.put("decProjectName", projectMap.get("BUSI_NM"));
        			attrMap.put("decSiteName_EN", projectMap.get("ORG_NM_EN"));
        			attrMap.put("decBizTypeCode", projectMap.get("BUSI_TP_CD_NM"));
        			attrMap.put("decSiteType", projectMap.get("HDOFC_CLS_NM"));
        			attrMap.put("decDisciplineType", projectMap.get("WK_CLS_NM"));
        			attrMap.put("decLocationStandard", projectMap.get("ORG_AREA_CRIT_CLS_NM"));
        			attrMap.put("decArea", projectMap.get("AREA_CD_NM"));
        			attrMap.put("decCountryCode", projectMap.get("NAT_CD"));
        			attrMap.put("decPM_ID", projectMap.get("PM_USER_ID"));
        			attrMap.put("decPM_NM", projectMap.get("PM_USER_NM"));
        			attrMap.put("decSV_ID", projectMap.get("SV_USER_ID"));
        			attrMap.put("decSV_NM", projectMap.get("SV_USER_NM"));
        			attrMap.put("decPFM_ID", projectMap.get("PFM_USER_ID"));
        			attrMap.put("decPFM_NM", projectMap.get("PFM_USER_NM"));
        			attrMap.put("decPCM_ID", projectMap.get("PCM_USER_ID"));
        			attrMap.put("decPCM_NM", projectMap.get("PCM_USER_NM"));
        			attrMap.put("decProjectClient", projectMap.get("ORDER_PL_NM"));
        			attrMap.put("decProjectClientCode", projectMap.get("ORDER_PL_CD"));
        			attrMap.put("decProjectSPV", projectMap.get("SPV_COMP"));
        			attrMap.put("decProjectDES", projectMap.get("DES_COMP"));
        			attrMap.put("decZipCode", projectMap.get("ZIPCD"));
        			attrMap.put("decAddress", projectMap.get("BAS_ADDR"));
        			attrMap.put("decDetailAddress", projectMap.get("DTL_ADDR"));
        			attrMap.put("decTaxAddress", projectMap.get("TAX_ADDR"));
        			attrMap.put("decTotalCost", projectMap.get("WHOLE_CTM_AMT"));
        			attrMap.put("decOurCompanyCost", projectMap.get("MYCO_CTM_AMT"));
        			attrMap.put("decSubConName", projectMap.get("BIZCO_KNM"));
        			attrMap.put("decContractRate", projectMap.get("CT_QUOTA_RT"));
        			attrMap.put("decRepCompYN", projectMap.get("REP_COMP_YN"));
        			attrMap.put("decTermOfWork", projectMap.get("CON_PERIOD"));
        			attrMap.put("decChangeReason", projectMap.get("CHG_RESN"));
        			attrMap.put("decTotalCost_USD", projectMap.get("WHOLE_CTM_USD_AMT"));
        			attrMap.put("decOurCompanyCost_USD", projectMap.get("MYCO_CTM_USD_AMT"));
        			attrMap.put(DecConstants.ATTRIBUTE_DECLATESTIFDATE, IF_DATE);
        			
        			// schedule list
        			if ( scheduleList != null && scheduleList.size() == 1)
        			{
        				Map scheduleMap = scheduleList.get(0);
        				attrMap.put("decContractStart", DecDateUtil.changeDateFormat(scheduleMap.get("CT_ST_YMD"), ifDateFormat, inputDateFormat));
        				attrMap.put("decContractFinish", DecDateUtil.changeDateFormat(scheduleMap.get("CT_EN_YMD"), ifDateFormat, inputDateFormat));
        				
        				attrMap.put("decActualStartDate", DecDateUtil.changeDateFormat(scheduleMap.get("REAL_CONST_YMD"), ifDateFormat, inputDateFormat));
        				attrMap.put("decExpectedDate", DecDateUtil.changeDateFormat(scheduleMap.get("REAL_CONEND_YMD"), ifDateFormat, inputDateFormat));
        			}
        			
        			doProject.setAttributeValues(context, attrMap);
        			
        			resultMap.put("data", projectMap);
    			}
    		}
    		resultMap.put("result", "success");
		} catch (Exception e) {
			e.printStackTrace();
			resultMap.put("error", e.getMessage());
		}
    	
    	return resultMap;
    }
    
    public void doInterfaceProject(Context context, String projectCode) throws Exception{
    	try {
//			BackgroundProcess backgroundProcess = new BackgroundProcess();
//			backgroundProcess.submitJob(context, "emxProjectSpace", "doInterfaceProject", new String[] {projectCode} , (String)null);
			
    		Job job = new Job("emxProjectSpace", "doInterfaceProject", new String[] {projectCode});
            job.setActionOnCompletion("Archive");
            job.createAndSubmit(context);
		} catch (FrameworkException e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public Map doInterfaceProject(Context context, String[] args) throws Exception{
    	Map resultMap = new HashMap();
    	try {
    		String projectCode = null;
    		if ( args.length == 1 )
    		{
    			projectCode = args[0];
    		}
    		else
    		{
    			Map programMap = (Map) JPO.unpackArgs(args);
    			projectCode = (String) programMap.get("projectCode");
    		}
    		String url = decWebserviceUtil.generateServiceURL(null, "url.if.project", projectCode);
    		if ( decWebserviceUtil.callUrlGet(url) )
    		{
    			Map programMap = new HashMap();
    			programMap.put("orgCd", projectCode);
    			
    			ContextUtil.startTransaction(context, true);
    			
    			resultMap = doInterface(context, JPO.packArgs(programMap));
    			
    			ContextUtil.commitTransaction(context);
    		}
        	
		} catch (Exception e) {
			ContextUtil.abortTransaction(context);
			resultMap.put("result", "Error");
			resultMap.put("msg", e.getMessage());
			e.printStackTrace();
			throw e;
		}
    	return resultMap;
    }
    
     /* created by choimingi 6/22/2023 
     * decEngProgressInterfaceProcess.jsp의 invoke 메서드*/
    public void dogetEngProgressInterfaceProject(Context context, String[] args) throws Exception{
    	String result = "";
    	try {
    		String projectCode = null;
    		if ( args.length == 1 )
    		{
    			projectCode = args[0];
    		}
    		else
    		{
    			Map programMap = (Map) JPO.unpackArgs(args);
    			projectCode = (String) programMap.get("projectCode");
    		}
    		
    		if ( decWebserviceUtil.callUrlGet(decWebserviceUtil.generateServiceURL(null, "url.if.project.getEngProgress", projectCode)) )
    		{
    			Map programMap = new HashMap();
    			programMap.put("siteCd", projectCode);
    			
    			ContextUtil.startTransaction(context, true);
    			
    			doInterface(context, JPO.packArgs(programMap));
    			
    			ContextUtil.commitTransaction(context);
    		}
        	
		} catch (Exception e) {
			ContextUtil.abortTransaction(context);
			e.printStackTrace();
			throw e;
		}
    }
    
    public void dogetSitecdDcplnInterfaceProject(Context context, String[] args) throws Exception{
    	String result = "";
    	String cEngPro = "decEngProgressInterfaceMapping";
    	String cSitDcp = "decSitecdDcplnInterfaceMapping";
    	String cGDL = "decGetDeliverableListInterfaceMapping";
    	String cGVPL = "decGetVenderPrintListInterfaceMapping";
    	try {
    		String projectCode = null;
    		String interfaceCommand = null;
    		if ( args.length == 1 )
    		{
    			projectCode = args[0];
    		}
    		else
    		{
    			Map programMap = (Map) JPO.unpackArgs(args);
    			projectCode = (String) programMap.get("projectCode");
    			interfaceCommand = (String) programMap.get("commandName");
    		}
    		String url = null;
    		if(interfaceCommand.equals(cSitDcp)) {
    			url = decWebserviceUtil.generateServiceURL(null, "url.if.project.getSitecdDcpln", projectCode);
    			System.out.println("url : " + url);
	    		if ( decWebserviceUtil.callUrlGet(url) )
	    		{
	    			Map programMap = new HashMap();
	    			programMap.put("siteCd", projectCode);
	    			
	    			ContextUtil.startTransaction(context, true);
	    			
	    			doInterface(context, JPO.packArgs(programMap));
	    			
	    			ContextUtil.commitTransaction(context);
	    		}
    		}else if(interfaceCommand.equals(cEngPro)){
    			url = decWebserviceUtil.generateServiceURL(null, "url.if.project.getEngProgress", projectCode);
    			System.out.println("url : " + url);
    			if ( decWebserviceUtil.callUrlGet(url) )
        		{
        			Map programMap = new HashMap();
        			programMap.put("siteCd", projectCode);
        			
        			ContextUtil.startTransaction(context, true);
        			
        			doInterface(context, JPO.packArgs(programMap));
        			
        			ContextUtil.commitTransaction(context);
        		}
    			
    		}else if(interfaceCommand.equals(cGDL)){
//    			if ( decWebserviceUtil.callUrlGet(decWebserviceUtil.generateServiceURL(null, "url.if.project.getDeliverableList", projectCode)) )
    			url = decWebserviceUtil.generateServiceURL(null, "url.if.project.getDeliverableList", projectCode);
    			System.out.println("url : " + url);
    			if ( decWebserviceUtil.callUrlGet(url) )
        		{
        			Map programMap = new HashMap();
        			programMap.put("siteCd", projectCode);
        			
        			ContextUtil.startTransaction(context, true);
        			
        			doInterface(context, JPO.packArgs(programMap));
        			
        			ContextUtil.commitTransaction(context);
        		}
    			
    		}else if(interfaceCommand.equals(cGVPL)){
//    			if ( decWebserviceUtil.callUrlGet(decWebserviceUtil.generateServiceURL(null, "url.if.project.getVendorPrintList", projectCode)) )
    			url = decWebserviceUtil.generateServiceURL(null, "url.if.project.getVendorPrintList", projectCode);
    			System.out.println("url : " + url);
    			if ( decWebserviceUtil.callUrlGet(url) )
        		{
        			Map programMap = new HashMap();
        			programMap.put("siteCd", projectCode);
        			
        			ContextUtil.startTransaction(context, true);
        			
        			doInterface(context, JPO.packArgs(programMap));
        			
        			ContextUtil.commitTransaction(context);
        		}
    			
    		}
		} catch (Exception e) {
			ContextUtil.abortTransaction(context);
			e.printStackTrace();
			throw e;
		}
    }
    
    public String getCountry(Context context, String[] args) throws Exception{
    	Map programMap = JPO.unpackArgs(args);
		String countryCode = (String) programMap.get(DecConstants.ATTRIBUTE_DECCOUNTRYCODE);
		return getCountry(context, countryCode);
    }
    
    public String getCountry(Context context, String countryCode) throws Exception{
		MapList countryList = getCountryList(context, countryCode);
		String country = countryCode;
		if ( countryList != null && countryList.size() >= 1 )
		{
			country = (String) ((Map) countryList.get(0)).get(DecConstants.SELECT_NAME);
		}
		return country;
    }
    
    public MapList getCountryList(Context context, String[] args) throws Exception{
		Map programMap = JPO.unpackArgs(args);
		String countryCode = (String) programMap.get(DecConstants.ATTRIBUTE_DECCOUNTRYCODE);
		return getCountryList(context, countryCode);
    }
    
    public StringList getCountryList4Column(Context context, String[] args) throws Exception{
    	StringList countryList = new StringList();
		try {
			Map programMap = JPO.unpackArgs(args);
			MapList objectList = (MapList) programMap.get("objectList");
			
			MapList allCountryList = getCountryList(context, "");
			Map<String,Map> allCountryMap = decListUtil.getSelectKeyDataMapForMapList(allCountryList, "attribute[Country Code (2 Letter)]");
			
			Map map = null;
			Map tempCountryMap = null;
			String id = null;
			String countryCode = null;
			
			for (Object obj : objectList)
			{
				map = (Map) obj;
				id = (String) map.get("projectId");// Modified by thok 2023.08.08
				// Added by hslee on 2023.08.24 --- [s]
				if ( StringUtils.isEmpty(id) )
				{
					id = (String) map.get(DecConstants.SELECT_ID);
				}
				// Added by hslee on 2023.08.24 --- [e]
				countryCode = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", id, DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE);
				tempCountryMap = allCountryMap.get(countryCode);
				
				if ( tempCountryMap != null )
				{
					countryList.add( (String) tempCountryMap.get(DecConstants.SELECT_NAME) );
				}
				else
				{
					countryList.add( countryCode );
				}
			}
			return countryList;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public MapList getCountryList(Context context, String countryCode) throws Exception{
    	boolean pushContext = false;
    	try {
    		String whereExpr = null;
    		if ( StringUtils.isNotEmpty(countryCode) )
    		{
    			whereExpr = "attribute[Country Code (2 Letter)] == '" + countryCode + "'";
    		}
    		
    		ContextUtil.pushContext(context);
    		
    		StringList slSelect = new StringList();
    	 	slSelect.add("attribute[Country Code (2 Letter)]");
    		slSelect.add(DecConstants.SELECT_NAME);
    		
    		MapList countryList = DomainObject.findObjects(context, "Country", DecConstants.VAULT_ESERVICE_PRODUCTION, whereExpr, slSelect);
    		
    		return countryList;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		} finally {
			if ( pushContext )
			{
				ContextUtil.popContext(context);
			}
		}
    }
    
    public MapList getProjectOutLineList(Context context, String[] args) throws Exception{
    	Map programMap = JPO.unpackArgs(args);
    	String objectId = (String) programMap.get("objectId");
    	String projectCode = (String) programMap.get("projectCode");
    	String whereParam = (String) programMap.get("whereParam");
    	StringList slSelect = (StringList) programMap.get("slSelect");
    	
    	//return getProjectOutLineList(context, objectId, projectCode, whereParam, slSelect);
    	
    	// Modified by choimingi on 2023.08.10 --- [s]
    	String user = (String) programMap.get("user");   	
    	return getProjectOutLineList(context, objectId, projectCode, whereParam, slSelect, user);
    	// Modified by choimingi on 2023.08.10 --- [e]
    }
    
    public MapList getProjectOutLineList(Context context, String objectId, String projectCode, String whereParam, StringList slSelect, String user) throws Exception{
    	try {
    		String sImgSource = DecConstants.EMPTY_STRING;
    		String sSiteName = DecConstants.EMPTY_STRING;
    		String sClassfication1 = DecConstants.EMPTY_STRING;
    		String sClassfication2 = DecConstants.EMPTY_STRING;
    		String sCountryANDRegion = DecConstants.EMPTY_STRING;
    		String sEPC = DecConstants.EMPTY_STRING;
    		String sConstructionDate = DecConstants.EMPTY_STRING;
    		
    		StringList slParam = new StringList();
    		slParam.add(DecConstants.SELECT_ID);
    		slParam.add(DecConstants.SELECT_NAME);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECSITENAME);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECSITENAME_EN);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECEPCTYPE);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY1);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY2);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY3);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECACTUALSTARTDATE);
    		slParam.add(DecConstants.SELECT_ATTRIBUTE_DECEXPECTEDDATE);
    		//slParam.add("from[Member|to.name == '" + context.getUser() + "']"); // Added by hslee on 2023.08.01
    		slParam.add("from[Member|to.name == '" + user + "']"); // Added by choimingi on 2023.08.10
    		
    		if ( slSelect != null )
    		{
    			slParam.addAll(slSelect);
    		}
    		
    		MapList projectList = null;
    		if ( StringUtils.isNotEmpty(objectId) )
    		{
    			Map projectMap = DomainObject.newInstance(context, objectId).getInfo(context, slParam);
    			projectCode = (String) projectMap.get(DecConstants.SELECT_NAME);
    			
    			projectList = new MapList();
    			projectList.add(projectMap);
    		}
    		else
    		{
    			StringBuffer sbWhereExpr = new StringBuffer();
    			if ( StringUtils.isNotEmpty(whereParam) )
    			{
    				if ( sbWhereExpr.length() > 0 )
        			{
    					sbWhereExpr.append(" && ");
        			}
    				sbWhereExpr.append( whereParam );
    			}
    			projectList = DomainObject.findObjects(context, DecConstants.TYPE_PROJECT_SPACE, projectCode, DecConstants.SYMB_WILD
        				, DecConstants.SYMB_WILD, DecConstants.SYMB_WILD
        				, sbWhereExpr.toString()
        				, false, slParam);
    		}
    		
    		return projectList;
    		
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public Map getProjectOutLine(Context context, String[] args) throws Exception{
    	try {
    		Map programMap = JPO.unpackArgs(args);
    		String sProjectCode = (String) programMap.get("projectCode");
    		String objectId = (String) programMap.get("objectId");
    		StringList slSelect = (StringList) programMap.get("slSelect");
    		String user = (String) programMap.get("user"); 		
    		String sImgSource = DecConstants.EMPTY_STRING;
    		String sSiteName = DecConstants.EMPTY_STRING;
    		String sClassfication1 = DecConstants.EMPTY_STRING;
    		String sClassfication2 = DecConstants.EMPTY_STRING;
    		String sCountryANDRegion = DecConstants.EMPTY_STRING;
    		String sEPC = DecConstants.EMPTY_STRING;
    		String sConstructionDate = DecConstants.EMPTY_STRING;
    		
    		MapList projectList = getProjectOutLineList(context, objectId, sProjectCode, sConstructionDate, slSelect, user);
    		Map projectMap = null;
        	String memberCheck = "";   //Modified by choimingi on 2023.08.10 --- [s] 
    		
    		if ( projectList != null && projectList.size() > 0 )
    		{	
    			
    			projectMap = (Map) projectList.get(0);
    			
    			// Modified by choimingi on 2023.08.10 --- [s]
    			memberCheck = (String) projectMap.get("from[Member]");
    			if(DecStringUtil.isEmpty(memberCheck)) {
    				memberCheck="N";
    			}else {
    				memberCheck="Y";
    			}
    			// Modified by choimingi on 2023.08.10 --- [e]
    		}
    		
    		Map mArgs = new HashMap();
    		Map paramMap = new HashMap();
    		Map resultMap = new HashMap();
    		
    		if ( projectMap != null ) 
    		{	
    			objectId = (String)projectMap.get("id");
    			paramMap.put("objectId", objectId);
    			paramMap.put("style", "width:100%; height:100%;");
    			mArgs.put("paramMap", paramMap);
    			sImgSource = JPO.invoke(context, "emxProjectSpace", null, "getImageHolder", JPO.packArgs(mArgs), String.class);
    			DomainObject doProject = DomainObject.newInstance(context, objectId);
    			
    			sClassfication1 = (String)projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY1);
    			sClassfication2 = (String)projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY2);
    			decCodeMaster_mxJPO codeJPO = new decCodeMaster_mxJPO();
    			sClassfication2 = codeJPO.getCodeDetailDisplayValueWithCodePath(context, objectId, null, "Project Category", null, new String[] {sClassfication1, sClassfication2});
    			
    			// Added by hslee on 2023.07.11 --- [s]
//    			sCountryANDRegion = (String)projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE);
    			sCountryANDRegion = getCountry(context, (String)projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE));
    			// Added by hslee on 2023.07.11 --- [e]
    			sEPC = (String)projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECEPCTYPE);
    	    	sConstructionDate = DecDateUtil.changeDateFormat((String)projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECACTUALSTARTDATE), new SimpleDateFormat("yyyy.MM.dd"))
    								+ " ~ "
    								+ DecDateUtil.changeDateFormat((String)projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECEXPECTEDDATE), new SimpleDateFormat("yyyy.MM.dd"));
    	    	
    	    	// Added by hslee on 2023.07.24 --- [s]
    	    	// 프로젝트 공정울 추가
    	    	paramMap.clear();
    	    	paramMap.put("objectId", objectId);
    	    	paramMap.put("select", "Project.selectProgress");
    	    	paramMap.put("MAX_CUT_OFF_DATE", "true");
    	    	
    	    	MapList progressList = getProjectSelect(context, paramMap);
    	    	String decProgressRate = "No data";
    	    	if ( progressList != null && progressList.size() == 1 )
    	    	{
    	    		Map progressMap = (Map) progressList.get(0);
    	    		String OVERALL_PLAN = DecStringUtil.defaultString(String.valueOf( progressMap.get("OVERALL_PLAN") ) + "%", "No data") ;
    	    		String OVERALL_ACTUAL = DecStringUtil.defaultString(String.valueOf( progressMap.get("OVERALL_ACTUAL") ) + "%", "No data") ;
    	    		
    	    		decProgressRate = OVERALL_PLAN + " / " + OVERALL_ACTUAL;
    	    	}
    	    	// Added by hslee on 2023.07.24 --- [e]
    	    	
    	    	resultMap.put("imgSource", sImgSource);
    	    	resultMap.put("siteName", projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECSITENAME));
    	    	resultMap.put("siteName_en", projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECSITENAME_EN));
    	    	resultMap.put("projectCode", projectMap.get(DecConstants.SELECT_NAME));
    	    	resultMap.put("objectId", objectId);
    	    	resultMap.put("classfication", sClassfication2);
    	    	resultMap.put("countryANDRegion", sCountryANDRegion);
    	    	resultMap.put("EPC", sEPC);
    	    	resultMap.put("constructionDate", sConstructionDate);
    	    	resultMap.put("dashboardURL", projectMap.get(DecConstants.SELECT_ATTRIBUTE_DECDASHBOARDURL));
    	    	resultMap.put("decProgressRate", decProgressRate); // Added by hslee on 2023.07.24
    	    	resultMap.put("decProgressRate", decProgressRate); // Added by hslee on 2023.07.24
    	    	resultMap.put("memberCheck", memberCheck); // Added by choimingi on 2023.08.10
    	    	
    		}
    		
    		return resultMap;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public MapList getEWPList(Context context, String[] args) throws Exception{
    	try {
			Map programMap = JPO.unpackArgs(args);
			String objectId = (String) programMap.get("objectId");
			String projectCode = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", objectId, DecConstants.SELECT_NAME);
			
			MapList ewpList = DomainObject.findObjects(context, DecConstants.TYPE_DECEWP, DecConstants.SYMB_WILD, projectCode
					, DecConstants.SYMB_WILD, DecConstants.VAULT_ESERVICE_PRODUCTION
					, null, false, new StringList(new String[] {DecConstants.SELECT_ID, DecConstants.SELECT_NAME, DecConstants.SELECT_DESCRIPTION}));
			
			return ewpList;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public MapList getPOList(Context context, String[] args) throws Exception{
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
    		Map programMap = JPO.unpackArgs(args);
			String objectId = (String) programMap.get("objectId");
			String projectCode = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", objectId, DecConstants.SELECT_NAME);
			
			Map selectParamMap = new HashMap();
			selectParamMap.put("SITE_CD", projectCode);
			
			List<Map> poList = sqlSession.selectList("Project.selectPOList", selectParamMap);
			
			return new MapList( poList );
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public StringList getCodeDetailList(Context context, String[] args) throws Exception{
    	try {
    		Map programMap = JPO.unpackArgs(args);
			String objectId = (String) programMap.get("objectId");
			String codeMasterName = (String) programMap.get("codeMasterName");
			
			decCodeMaster_mxJPO codeJPO = new decCodeMaster_mxJPO();
			MapList codeDetailList = codeJPO.getProjectCodeDetailList(context, objectId, codeMasterName);
			
			StringList codeIdList = decListUtil.getSelectValueListForMapList(codeDetailList, DecConstants.SELECT_ID);
			
			return codeIdList;
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public MapList getMaterialStatusList(Context context, String[] args) throws Exception{
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
			Map programMap = JPO.unpackArgs(args);
			String objectId = (String) programMap.get("objectId");
			
			DomainObject doObj = DomainObject.newInstance(context, objectId);
			
			StringList slSelect = new StringList();
			slSelect.add(DecConstants.SELECT_TYPE);
			slSelect.add(DecConstants.SELECT_NAME);
			slSelect.add("to[Project Access Key].from.from[Project Access List].to.name");
			
			Map objInfo = doObj.getInfo(context, slSelect);
			String type = (String) objInfo.get(DecConstants.SELECT_TYPE);
			String projectCode = null;
			
			Map selectParamMap = new HashMap();
			
			// Project 정보 조회
			if ( DecConstants.TYPE_PROJECT_SPACE.equals(type) )
			{
				projectCode = (String) objInfo.get(DecConstants.SELECT_NAME);
			}
			else if ( DecConstants.TYPE_DECCWPTASK.equals(type) )
			{
				projectCode = (String) objInfo.get("to[Project Access Key].from.from[Project Access List].to.name");
				String cwpNo = (String) objInfo.get(DecConstants.SELECT_NAME);
				selectParamMap.put("CWP_NO", cwpNo);
			}
			else
			{
				
			}
			
			// filter 처리
			StringBuffer sbWhere = new StringBuffer();
			String emxTableRowIdExpr = (String) programMap.get("emxTableRowIdExpr");
			if ( StringUtils.isNotEmpty(emxTableRowIdExpr) )
			{
				decFilterUtil.generateEmxTableRowIdWhereExpr(context, sbWhere, emxTableRowIdExpr
						, null, DecConstants.SYMB_OPEN_PARAN, DecConstants.SYMB_CLOSE_PARAN
						, "CWP.");
			}
			
			decFilterUtil_mxJPO filterJPO = new decFilterUtil_mxJPO();
			String discipline = (String) programMap.get("Discipline");
			if ( StringUtils.isNotEmpty(discipline) )
			{
				/*
				String fmcsDiscipline = getFMCSDiscipline(context, projectCode, discipline);
				decFilterUtil.generateWhereExpr4RDB(sbWhere, "MAT.DCPLN_CD", fmcsDiscipline);
				*/
				sbWhere.append("MAT." + filterJPO.generateFMCSDisciplineWhereExpr(context, objectId, discipline, null) );
			}
			
			
			decFilterUtil.generateWhereExpr4RDB(programMap, "Sub-Con", sbWhere, null, "MAT.ORG_CD", null);
			decFilterUtil.generateWhereExpr4RDB(programMap, "Item Group", sbWhere, null, "MAT.ITEM_GRP_CD", null);
			decFilterUtil.generateWhereExpr4RDB(programMap, "Group", sbWhere, null, "MAT.GRP_CD", null);
			decFilterUtil.generateWhereExpr4RDB(programMap, "Fab Category", sbWhere, null, "MAT.FAB_CAT_NM", null);

			String materialDelay = (String) programMap.get("Material Delay");
			if ( "checked".equalsIgnoreCase(materialDelay) )
			{
				decFilterUtil.generateWhereExpr4RDB(sbWhere, null, "DELAY_NO", decFilterUtil.RDB_IS_NOT_NULL, null);
			}
			
			// Status Update
			String Status_Updated_Start_msvalue = (String) programMap.get("Status_Updated_Start_msvalue");
			String Status_Updated_End_msvalue = (String) programMap.get("Status_Updated_End_msvalue");
			if ( StringUtils.isNotEmpty(Status_Updated_Start_msvalue) && StringUtils.isNotEmpty(Status_Updated_End_msvalue) )
			{
				Date Status_Updated_StartDate = new Date( Long.parseLong(Status_Updated_Start_msvalue) );
				Date Status_Updated_EndDate = new Date( Long.parseLong(Status_Updated_End_msvalue) );
				
				selectParamMap.put("STS_EDIT_DT_FROM", Status_Updated_StartDate);
				selectParamMap.put("STS_EDIT_DT_TO", Status_Updated_EndDate);
			}
			
			Map otherWhereMap = decFilterUtil.generateOtherWhereExpr4RDB(context, args);
    		String otherBusWhere = (String) otherWhereMap.get("busWhere");
    		decFilterUtil.append4RDB(sbWhere, otherBusWhere);
			
			selectParamMap.put("SITE_CD", projectCode);
			selectParamMap.put("whereExpr", sbWhere.toString());
			
			List<Map> materialList = sqlSession.selectList("IF_Material.selectMaterialList", selectParamMap);
			
			// OOTB 처리를 위해서 대문자로 넘어온 key를 소문자로 변경 
			for (Map materialMap : materialList)
			{
				materialMap.put(DecConstants.SELECT_ID, (String) materialMap.get("ID"));
				materialMap.put(DecConstants.SELECT_NAME, (String) materialMap.get("NAME"));
			}
			
			return new MapList( materialList );
				
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public boolean accessMaterialStatusList(Context context, String[] args) throws Exception{
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
			Map programMap = JPO.unpackArgs(args);
			Map mSetting = (Map)programMap.get("SETTINGS");
			String objectId = (String) programMap.get("objectId");
			String discipline = (String)mSetting.get("defaultDiscipline");

			DomainObject doObj = DomainObject.newInstance(context, objectId);
			doObj.open(context);
			StringBuffer sbWhere = new StringBuffer();
			decFilterUtil_mxJPO filterJPO = new decFilterUtil_mxJPO();
			if("Others".equals(discipline)) {
				return true;
			}
			if ( StringUtils.isNotEmpty(discipline) )
			{
				sbWhere.append("MAT." + filterJPO.generateFMCSDisciplineWhereExpr(context, objectId, discipline, null) );
			}
			
			Map selectParamMap = new HashMap();
			selectParamMap.put("SITE_CD", doObj.getName());
			selectParamMap.put("whereExpr", sbWhere.toString());
			
			List<Map> materialList = sqlSession.selectList("IF_Material.selectMaterialList", selectParamMap);
	    	if(materialList.isEmpty()) {
	    		return false;
	    	}else {
	    		return true;
	    	}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public Map setProjectInfo2RDB(Context context, String[] args) throws Exception{
    	Map resultMap = new HashMap();
    	try ( SqlSession sqlSession = decSQLSessionFactory.getBatchSession() ) {
    		
    		StringList slSelect = new StringList();
    		slSelect.add(DecConstants.SELECT_ID);
    		slSelect.add(DecConstants.SELECT_NAME);
    		slSelect.add(DecConstants.SELECT_CURRENT);
			
    		MapList projectList = DomainObject.findObjects(context, DecConstants.TYPE_PROJECT_SPACE, DecConstants.SYMB_WILD, DecConstants.SYMB_WILD
    				, DecConstants.SYMB_WILD, DecConstants.VAULT_ESERVICE_PRODUCTION
    				, "attribute[decProjectType] == 'ongoing'", false, slSelect);
    		
    		List<Map> projectListFromDB = sqlSession.selectList("Project.selectProjectCodeDecProjectInfo");
    		Map<String,Map> projectListFromDBSummary = decListUtil.getSelectKeyDataMapForMapList(projectListFromDB, "SITE_CD");
    		
    		System.out.println("projectList : " + projectList);
    		
    		List<Map> projectParamList = new ArrayList<Map>();
    		Map projectMap = new HashMap();
    		Map map = null;
    		String projectCode = null;
    		String projectCurrent = null;
    		
    		for (Object obj : projectList)
    		{
    			map = (Map) obj;
    			
    			projectCode = (String) map.get(DecConstants.SELECT_NAME);
    			projectCurrent = (String) map.get(DecConstants.SELECT_CURRENT);
    			
    			projectMap.clear();
    			projectMap.put("SITE_CD", projectCode);
    			projectMap.put("STATE", projectCurrent);
    			
    			if ( projectListFromDBSummary.containsKey(projectCode) )
    			{
    				Map projectMapFromDB = projectListFromDBSummary.get(projectCode);
    				String STATE = (String) projectMapFromDB.get("STATE");
    				
    				if ( !STATE.equals(projectCurrent) )
    				{
    					sqlSession.update("Project.changeProjectCodeDecProjectInfo", projectMap);
    				}
    			}
    			else
    			{
    				sqlSession.insert("Project.insertProjectCodeDecProjectInfo", projectMap);
    			}

    		}
    		
    		sqlSession.commit();
    		
    		resultMap.put("result", "Success");
		} catch (Exception e) {
			resultMap.put("result", "Error");
			resultMap.put("msg", e.getMessage());
			e.printStackTrace();
		}
    	return resultMap;
    }
    
    public void cloneCodeMaster(Context context, String projectId) throws Exception{
    	try {
    		Job job = new Job("decCodeMaster", "cloneCodeMaster", new String[] {projectId});
            job.setActionOnCompletion("Archive");
            job.createAndSubmit(context);
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    /**
     * CWP의 자재 현황 정보를 반환한다.
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public MapList getCWPMaterialList(Context context, String[] args) throws Exception{
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
			Map programMap = JPO.unpackArgs(args);
			String objectId = (String) programMap.get("objectId");
			String CWP_Plan_Start_msvalue = (String) programMap.get("CWP_Plan_Start_msvalue");
			String CWP_Plan_End_msvalue = (String) programMap.get("CWP_Plan_End_msvalue");
			String wbsIdExpr = (String) programMap.get("emxTableRowIdExpr");
			
			DomainObject doObj = DomainObject.newInstance(context, objectId);
			
			StringList slSelect = new StringList();
			slSelect.add(DecConstants.SELECT_TYPE);
			slSelect.add(DecConstants.SELECT_NAME);
			slSelect.add("to[Project Access Key].from.from[Project Access List].to.name");
			
			Map objInfo = doObj.getInfo(context, slSelect);
			String type = (String) objInfo.get(DecConstants.SELECT_TYPE);
			String projectCode = null;
			StringList cwpNoList = new StringList();
			String cwpNo = null;
			if ( DecConstants.TYPE_PROJECT_SPACE.equals(type) )
			{
				projectCode = (String) objInfo.get(DecConstants.SELECT_NAME);
			}
			else if ( DecConstants.TYPE_DECCWPTASK.equals(type) )
			{
				projectCode = (String) objInfo.get("to[Project Access Key].from.from[Project Access List].to.name");
				cwpNo = (String) objInfo.get(DecConstants.SELECT_NAME);
				cwpNoList.add(cwpNo);
			}
			else
			{
				// do nothing...
			}
			
			Map selectParamMap = new HashMap();
			selectParamMap.put("SITE_CD", projectCode);
			
			// Filter 처리
			StringBuffer sbWhere = new StringBuffer();
			String emxTableRowIdExpr = (String) programMap.get("emxTableRowIdExpr");
			
			StringBuffer sbWorkPackageWhere = new StringBuffer();
			if ( StringUtils.isNotEmpty(emxTableRowIdExpr) )
			{
				decFilterUtil.generateEmxTableRowIdWhereExpr(context, sbWorkPackageWhere, emxTableRowIdExpr
						, null, DecConstants.SYMB_OPEN_PARAN, DecConstants.SYMB_CLOSE_PARAN
						, "");
			}
			
			decFilterUtil_mxJPO filterJPO = new decFilterUtil_mxJPO();
			String discipline = (String) programMap.get("Discipline");
			sbWhere.append( filterJPO.generateFMCSDisciplineWhereExpr(context, objectId, discipline, null) );
			
			decFilterUtil.generateWhereExpr4RDB(programMap, "Sub-Con", sbWhere, "ORG_CD");
			decFilterUtil.generateWhereExpr4RDB(programMap, "Construction Item Type", sbWhere, "OBJ_TP_CD");
			decFilterUtil.generateWhereExpr4RDB(programMap, "Fab Category", sbWhere, "FAB_CAT_NM");
			
			String materialDelay = (String) programMap.get("Material Delay");
			if ( StringUtils.isNotEmpty(materialDelay) )
			{
				decFilterUtil.append4RDB(sbWhere, "DELY_DCNT IS NOT NULL AND DELY_DCNT > 0");
			}
			
			if ( StringUtils.isNotEmpty(CWP_Plan_Start_msvalue) )
			{
				Date startDate = new Date( Long.parseLong(CWP_Plan_Start_msvalue) );
				selectParamMap.put("FROM_PLAN_ST_YMD", startDate);
			}
			
			if ( StringUtils.isNotEmpty(CWP_Plan_End_msvalue) )
			{
				Date endDate = new Date( Long.parseLong(CWP_Plan_End_msvalue) );
				selectParamMap.put("TO_PLAN_ST_YMD", endDate);
			}
			
			Map otherWhereMap = decFilterUtil.generateOtherWhereExpr4RDB(context, args);
    		String otherBusWhere = (String) otherWhereMap.get("busWhere");
    		decFilterUtil.append4RDB(sbWhere, otherBusWhere);
			
			selectParamMap.put("whereExpr", sbWhere.toString());
			selectParamMap.put("workPackageExpr", sbWorkPackageWhere.toString());
			
			List<Map> materialList = sqlSession.selectList("IF_Material.selectCWPMaterialList", selectParamMap);
			
			return new MapList( materialList );
				
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    /**
     * ISO의 자재 현황 정보를 반환한다.
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public MapList getISOMaterialList(Context context, String[] args) throws Exception{
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
    		Map programMap = JPO.unpackArgs(args);
    		String objectId = (String) programMap.get("objectId");
    		String DCPLN_CD = (String) programMap.get("Discipline");
    		String ITEM_GRP_CD = (String) programMap.get("ITEM_GRP_CD");
    		String GRP_CD = (String) programMap.get("GRP_CD");
    		String MaterialDelay = (String) programMap.get("Material Delay");
    		String ORG_CD = (String) programMap.get("SUBCON");
    		String wbsIdExpr = (String) programMap.get("emxTableRowIdExpr");
    		
    		DomainObject doObj = DomainObject.newInstance(context, objectId);
    		
    		StringList slSelect = new StringList();
    		slSelect.add(DecConstants.SELECT_TYPE);
    		slSelect.add(DecConstants.SELECT_NAME);
    		slSelect.add("to[Project Access Key].from.from[Project Access List].to.name");
    		
    		Map objInfo = doObj.getInfo(context, slSelect);
    		String type = (String) objInfo.get(DecConstants.SELECT_TYPE);
    		String projectCode = null;
    		StringList cwpNoList = new StringList();
    		String cwpNo = null;
    		if ( DecConstants.TYPE_PROJECT_SPACE.equals(type) )
    		{
    			projectCode = (String) objInfo.get(DecConstants.SELECT_NAME);
    		}
    		else if ( DecConstants.TYPE_DECCWPTASK.equals(type) )
    		{
    			projectCode = (String) objInfo.get("to[Project Access Key].from.from[Project Access List].to.name");
    			cwpNo = (String) objInfo.get(DecConstants.SELECT_NAME);
    			cwpNoList.add(cwpNo);
    		}
    		else
    		{
    			// do nothing...
    		}
    		
    		if ( StringUtils.isNotEmpty(wbsIdExpr) )
    		{
    			StringList wbsIdList = FrameworkUtil.splitString(wbsIdExpr, DecConstants.SYMB_VERTICAL_BAR);
    			MapList wbsMapList = DomainObject.getInfo(context, wbsIdList.toStringArray(), slSelect);
    			Map wbsMap = null;
    			for (Object obj : wbsMapList)
    			{
    				wbsMap = (Map) obj;
    				type = (String) wbsMap.get(DecConstants.SELECT_TYPE);
    				if ( DecConstants.TYPE_DECCWPTASK.equals(type) )
    				{
    					cwpNoList.add( (String) wbsMap.get(DecConstants.SELECT_NAME) );
    				}
    			}
    		}
    		
    		Map selectParamMap = new HashMap();
    		selectParamMap.put("SITE_CD", projectCode);
    		if ( StringUtils.isNotEmpty(DCPLN_CD) )
    		{
    			StringList includeDisciplineList = new StringList( new String[] {"PP","ME","EL","IC"} );
    			
    			decCodeMaster_mxJPO codeJPO = new decCodeMaster_mxJPO();
    			if ( "Others".equalsIgnoreCase(DCPLN_CD) )
    			{
    				StringList excludeDisciplineList = new StringList();
    				for (String includeDiscipline : includeDisciplineList)
    				{
    					excludeDisciplineList.add( codeJPO.getFMCSDiscipline(context, objectId, includeDiscipline) );
    				}
    				selectParamMap.put("excludeDisciplineList", excludeDisciplineList);
    			}
    			else
    			{
    				selectParamMap.put("DCPLN_CD", codeJPO.getFMCSDiscipline(context, objectId, DCPLN_CD));
    			}
    		}
    		selectParamMap.put("ITEM_GRP_CD", ITEM_GRP_CD);
    		selectParamMap.put("GRP_CD", GRP_CD);
    		selectParamMap.put("cwpNoList", cwpNoList);
    		if ( "checked".equals(MaterialDelay) )
    		{
    			selectParamMap.put("MaterialDelay", MaterialDelay);
    		}
    		selectParamMap.put("ORG_CD", ORG_CD);
    		
    		List<Map> materialList = sqlSession.selectList("IF_Material.selectISOMaterialList", selectParamMap);
    		
    		return new MapList( materialList );
    		
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw e;
    	}
    }
    
    public MapList getProjectListAll(Context context, String[] args) throws MatrixException
    {
    	// Check license while listing Project Concepts, Project Space, if license check fails here
    	// the projects will not be listed. This is mainly done to avoid Project Concepts from being listed
    	// but as this is the common method, the project space objects will also not be listed.
    	//
    	String Mode = "All";
    	boolean pushContext = false;
    	
    	ComponentsUtil.checkLicenseReserved(context,ProgramCentralConstants.PGE_LICENSE_ARRAY);

    	MapList projectList = new MapList();
    	StringList busSelects = new StringList(2);
    	busSelects.add(ProjectSpace.SELECT_ID);
    	busSelects.add(ProjectSpace.SELECT_NAME);
    	busSelects.add("attribute[" + DomainConstants.ATTRIBUTE_TASK_ESTIMATED_FINISH_DATE  + "]");
    	busSelects.add(ProjectSpace.SELECT_VAULT);
    	busSelects.add(DecConstants.SELECT_CURRENT);
    	busSelects.add("from[Member|to.name=="+context.getUser()+"]");
    	busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTTYPE);
    	busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECSITENAME);
    	busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTNAME);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECSITENAME_EN);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECBIZTYPECODE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECSITETYPE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECDISCIPLINETYPE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECLOCATIONSTANDARD);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPM_ID);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPM_NM);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECSV_ID);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECSV_NM);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPFM_ID);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPFM_NM);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPCM_ID);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPCM_NM);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTCLIENT);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTCLIENTCODE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTSPV);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTDES);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECZIPCODE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECADDRESS);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECDETAILADDRESS);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECTOTALCOST);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECOURCOMPANYCOST);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECEPCTYPE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECSUBCONNAME);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCONTRACTRATE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECREPCOMPYN);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY1);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY2);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY3);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECLICENSOR);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCONTRACTSTART);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCONTRACTFINISH);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECTERMOFWORK);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECACTUALSTARTDATE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECEXPECTEDDATE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCHANGEREASON);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECLATESTIFDATE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECTOTALCOST_USD);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECOURCOMPANYCOST_USD);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECDASHBOARDURL);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECHCKEY);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECLANGITUDE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECLOGITUDE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_ORIGINATOR);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCONTENTDATA);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECTYPE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECRESPONSEDATE);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECREQUESTSTATUS);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECCANCELREASON);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECTAXADDRESS);
        busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTSTATUS);

    	String busWhere = "";
    	try{
    		ContextUtil.pushContext(context);
    		pushContext = true;
    		
    		if("AssignedActive".equalsIgnoreCase(Mode)){
    			projectList = getActiveProjects(context, args);
    		}else{
	    			if (ProgramCentralUtil.isNullString(busWhere)) {
	                	busWhere +=" type!=" + ProgramCentralConstants.TYPE_EXPERIMENT+ " && type!='" + ProgramCentralConstants.TYPE_PROJECT_BASELINE+"'"; 
	                } else {
	                busWhere +=" && type!=" + ProgramCentralConstants.TYPE_EXPERIMENT+ " && type!='" + ProgramCentralConstants.TYPE_PROJECT_BASELINE+"'";
	                }
    			if("CredentialedActive".equalsIgnoreCase(Mode)){
	    				String notProjectMemberBusWhere = "!from[Member].to.name smatchlist '"+context.getUser()+"' ','";
    				busWhere += ProgramCentralUtil.isNullString(busWhere) ? EMPTY_STRING : " && ";
    				busWhere += "current!=" + STATE_PROJECT_COMPLETE + " && current!=" + STATE_PROJECT_ARCHIVE +
    						" && current!=" + ProgramCentralConstants.STATE_PROJECT_SPACE_HOLD_CANCEL_HOLD + 
    						" && current!=" + ProgramCentralConstants.STATE_PROJECT_SPACE_HOLD_CANCEL_CANCEL ;
	    				busWhere += "&& "+notProjectMemberBusWhere;
	    				
    			}else if("Inactive".equalsIgnoreCase(Mode)){
    				busWhere += ProgramCentralUtil.isNullString(busWhere) ? EMPTY_STRING : " && ";
    				busWhere += "current==" + STATE_PROJECT_COMPLETE + " || current==" + STATE_PROJECT_ARCHIVE+" || current==" + STATE_PROJECT_SPACE_HOLD_CANCEL_CANCEL+" || current==" + STATE_PROJECT_SPACE_HOLD_CANCEL_HOLD;    		   
    			}
	    			
    			// filter 처리
        		Map programMap = JPO.unpackArgs(args);
        		StringBuffer sbFilter = new StringBuffer( busWhere );
        		
        		decFilterUtil.generateMatchlistWhereExpr(programMap, DecConstants.ATTRIBUTE_DECPROJECTTYPE, sbFilter, DecConstants.SELECT_ATTRIBUTE_DECPROJECTTYPE);
        		decFilterUtil.generateWhereExpr(programMap, "EPC Category", sbFilter, DecConstants.SELECT_ATTRIBUTE_DECEPCTYPE);
        		decFilterUtil.generateWhereExpr(programMap, "Project Category 1", sbFilter, DecConstants.SELECT_ATTRIBUTE_DECCATEGORY1);
        		decFilterUtil.generateWhereExpr(programMap, "Project Category 2", sbFilter, DecConstants.SELECT_ATTRIBUTE_DECCATEGORY2);
        		decFilterUtil.generateWhereExpr(programMap, "Project Category 3", sbFilter, DecConstants.SELECT_ATTRIBUTE_DECCATEGORY3);
        		decFilterUtil.generateMatchlistWhereExpr(programMap, DecConstants.ATTRIBUTE_DECCOUNTRYCODE, sbFilter, DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE);
        		decFilterUtil.generateMatchlistWhereExpr(programMap, DecConstants.ATTRIBUTE_DECPROJECTSTATUS, sbFilter, DecConstants.SELECT_ATTRIBUTE_DECPROJECTSTATUS);
        		
        		Map otherWhereMap = decFilterUtil.generateOtherWhereExpr(context, args, null);
        		String otherBusWhere = (String) otherWhereMap.get("busWhere");
        		decFilterUtil.append(sbFilter, otherBusWhere);
	    			
    			String typePattern = TYPE_PROJECT_SPACE + "," + TYPE_PROJECT_CONCEPT;
	    			projectList = DomainObject.findObjects(context, typePattern, "*", "*", "*",DomainConstants.QUERY_WILDCARD, sbFilter.toString(), true, busSelects);
    		} 
    		
    		return projectList;		
    		
	    }
	    catch (Exception ex) {
	    	throw new MatrixException(ex);
	    } finally {
    		if ( pushContext ) { ContextUtil.popContext(context); }
    	}
    }
    
    public String getFMCSDiscipline(Context context, String projectCode, String discipline) throws Exception{
    	String fmcsDiscipline = MqlUtil.mqlCommand(context, "print bus $1 $2 $3 select $4 dump"
    			, DecConstants.TYPE_DECCODEDETAIL
    			, discipline
    			, projectCode + DecConstants.SYMB_UNDER_BAR + "Discipline"
    			, "from[decCodeDetailRel|to.attribute[decCodeDetailType] == 'FMCS Discipline'].to.attribute[decCode]");
    	
    	return fmcsDiscipline;
    }
    
    public MapList getDisciplineList(Context context, String[] args) throws Exception{
    	try {
			Map programMap = JPO.unpackArgs(args);
			String projectCode = (String) programMap.get("projectCode");
			String projectId = DecMatrixUtil.getObjectId(context, DecConstants.TYPE_PROJECT_SPACE, projectCode);
			
			return getDisciplineList(context, projectId);
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public MapList getDisciplineList(Context context, String projectId) throws Exception{
    	try {
			decCodeMaster_mxJPO codeJPO = new decCodeMaster_mxJPO();
			MapList disciplineList = codeJPO.getProjectCodeDetailList(context, projectId, "Discipline", (short) 1);
			
			return disciplineList;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
 // Created By Choi mingi 08/21/2023 [S]
    /**
     * Modified by hslee on 2023.09.10 : Dashboard의 project list와 3DSpace의 상단 header의 project list를 같은 로직으로 처리
     */
    public MapList getProjectCodeList(Context context, String[] args) throws Exception{
    	try {
    		Map programMap = JPO.unpackArgs(args);
    		String projectType = (String) programMap.get("projectType");
    		projectType = StringUtils.isEmpty(projectType) ? "ongoing" : projectType;
    		
    		StringList busSelects = new StringList();
    		busSelects.add(DomainObject.SELECT_ID); //프로젝트 id
    		busSelects.add(DomainObject.SELECT_NAME); // 프로젝트 이름
    		busSelects.add(DecConstants.SELECT_ATTRIBUTE_DECSITENAME);
    		/*
    		String typePattern = "Project Space"; 
    		MapList mpProjectList = new MapList();
    		MapList ProjectCodeList = new MapList();
    		//String getPType ="Project Space";
    		
    		mpProjectList =  DomainObject.findObjects(context, typePattern, "*","(type == 'Project Space') && (current != 'Complete') && (current != 'Archive') && (current != 'Hold') && (current != 'Cancel')  && (attribute[decProjectType]=='ongoing')",
    				busSelects);
    		
    		String projectCode = "";
    		String projectId   = "";
			String siteName   = "";
			String returnName = "";
			//MapList disciplineList = codeJPO.getProjectCodeDetailList(context, projectId, "Discipline");
			for(int i = 0 ; i < mpProjectList.size() ; i++) {
				HashMap<?, ?> map = (HashMap<?, ?>) mpProjectList.get(i);
				projectCode = (String) map.get("name");
				projectId   = (String) map.get("id");
				DomainObject pDom = new DomainObject(projectId);
				siteName   = pDom.getAttributeValue(context, DecConstants.ATTRIBUTE_DECSITENAME);
				returnName = projectCode +" "+ siteName;
				ProjectCodeList.add(returnName);
			}
			System.out.println("ProjectCodeList:"+ProjectCodeList);
			return ProjectCodeList;
			*/
    		
    		
    		String where = "(type == 'Project Space') && (current != 'Complete') && (current != 'Archive') && (current != 'Hold') && (current != 'Cancel') ";
    		
    		if ( StringUtils.isNotEmpty(projectType) )
    		{
    			where += "&& (attribute[decProjectType]=='" + projectType + "')";
    		}
    		
    		DomainObject currentUser = PersonUtil.getPersonObject(context);
    		MapList projectCodeList = currentUser.getRelatedObjects(context, DecConstants.RELATIONSHIP_MEMBER, DecConstants.TYPE_PROJECT_SPACE
    				, busSelects, null
    				, true, false
    				, (short) 1
    				, where, null
    				, 0);
    		
    		return projectCodeList;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    // Created By Choi mingi 08/21/2023 [E]
    
    public MapList getWorkFrontAnalysisPipingList(Context context, String[] args) throws Exception{
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
			Map programMap = JPO.unpackArgs(args);
			
			String projectId = (String) programMap.get("projectId");
			String projectCode = (String) programMap.get("projectCode");
			String uom = (String) programMap.get("uom");
			String fromYear = (String) programMap.get("fromYear");
			String fromMonth = (String) programMap.get("fromMonth");
			String toYear = (String) programMap.get("toYear");
			String toMonth = (String) programMap.get("toMonth");
			String rowLevel = (String) programMap.get("rowLevel");
			String rowName = (String) programMap.get("rowName");
			StringList fmcsDisciplineList = (StringList) programMap.get("fmcsDisciplineList");
			
			String fromYearMonth = fromYear + String.format("%02d", Integer.parseInt(fromMonth));
			String toYearMonth = toYear + String.format("%02d", Integer.parseInt(toMonth));
			
			Map selectParamMap = new HashMap();
			selectParamMap.put("SITE_CD", projectCode);
			selectParamMap.put("FROM_DATE", fromYearMonth);
			selectParamMap.put("TO_DATE", toYearMonth);
			selectParamMap.put("fmcsDisciplineList", fmcsDisciplineList);
			
			String qtyColName = "FMCS.";
			String pipingShopRatio = "100";
			if ( fmcsDisciplineList.contains("P") )
			{
				if ( "Dia-Inch".equalsIgnoreCase(uom) )
				{
					qtyColName += "DIA_WIDTH";
					selectParamMap.put("TOTAL_WELDING_TOTAL_FORECAST_QTY_CD", "51.10.100"); // Key Qty의 Total Welding 항목의 Total Forecast Qty에 해당하는 Code
				}
				else if ( "Weight(KG)".equalsIgnoreCase(uom) )
				{
					qtyColName += "WGT";
				}
				else
				{
					throw new Exception("uom is not proper. uom is " + uom);
				}
				
				pipingShopRatio = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", projectId, DecConstants.SELECT_ATTRIBUTE_DECPIPINGSHOPRATIO);
				
			}
			else if ( fmcsDisciplineList.contains("E") || fmcsDisciplineList.contains("I") )
			{
				qtyColName += "DES_QTY";
				pipingShopRatio = "100"; // 전계장은 Field 100%
				selectParamMap.put("TOTAL_ISSUE_DES_QTY", "true"); // 전계장은 ISSUE_DATE 기준으로 DES_QTY 물량을 합한 것이 TOTAL에 해당함
			}
			
			double pipingShopRatioDoubleValue = Double.parseDouble(pipingShopRatio) / 100d;
			
			selectParamMap.put("SHOP_RATIO", pipingShopRatioDoubleValue);
			selectParamMap.put("QTY_COL_NAME", qtyColName);
			
			if ( StringUtils.isNotEmpty(rowLevel) )
			{
				selectParamMap.put("PACK_LVL_CD", "EPC.PACK_LVL_CD" + rowLevel);
				selectParamMap.put("rowName", rowName);
			}
			
			List<Map> workFrontList = sqlSession.selectList("IF_Material.selectISOMaterialListForWorkFront", selectParamMap);
			
			return new MapList( workFrontList );
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public StringList getCodeDetailDisplayListFromDBData(Context context, String[] args) throws Exception{
    	try {
			StringList dbDataList = getDBDataList(context, args);

			Map programMap = JPO.unpackArgs(args);
			Map paramList = (Map) programMap.get("paramList");
			String objectId = (String) paramList.get("objectId");
			Map columnMap = (Map)programMap.get("columnMap");
	    	Map settings = (Map)columnMap.get("settings");
	    	String codeMasterName = (String) settings.get("codeMasterName");
			
			String type = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", objectId, DecConstants.SELECT_TYPE);
			
			String projectId = objectId;
			if ( !DecConstants.TYPE_PROJECT_SPACE.equals(type) )
			{
				projectId = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", objectId, "to[Project Access Key].from.from[Project Access List].to.id");
			}
			
			decCodeMaster_mxJPO codeJPO = new decCodeMaster_mxJPO();
			String[] codePathArr = new String[1];
			String codeDesc = null;
			StringList slReturn = new StringList();
			
			for (String dbData : dbDataList)
			{
				codePathArr[0] = dbData;
				codeDesc = codeJPO.getCodeDetailDisplayValueWithCodePath(context, projectId, null, codeMasterName, null, codePathArr);
				slReturn.add( codeDesc );
			}
			
			return slReturn;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    
    // Added by thok 2023.08.29 [S]
    public MapList getProjectEPCType(Context context, String[] args) throws Exception{
    	try {
			Map programMap = JPO.unpackArgs(args);
			String projectCode = (String) programMap.get("projectCode");
			String projectId = DecMatrixUtil.getObjectId(context, DecConstants.TYPE_PROJECT_SPACE, projectCode);
			
			return getProjectEPCType(context, projectId);
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public MapList getProjectEPCType(Context context, String projectId) throws Exception{
    	try {
			decCodeMaster_mxJPO codeJPO = new decCodeMaster_mxJPO();
			MapList returnMap = new MapList();
			DomainObject object = new DomainObject(projectId);
			String EPCType = object.getAttributeValue(context, DecConstants.ATTRIBUTE_DECEPCTYPE);
			
			Map<String,String> map = new HashMap<>();
			map.put("data", EPCType);
			
			returnMap.add(map);
			
			return returnMap;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    // Added by thok 2023.08.29 [E]
    
    //Added by thok 2023.09.08 [S]
    
    public int triggerChangeOwner(Context context, String[] args) throws Exception{
    	try {
    	
    	boolean isNewOwnerUnConnected = true;
    	ContextUtil.startTransaction(context, true);
    	
    	String OLDOWNER = args[0];//기존 owner
    	String NEWOWNER = args[1];//새로운 owner
    	String projectId = args[2];//프로젝트 Id
    	
    	StringList slProjectParam = new StringList();
    	slProjectParam.add(DecConstants.SELECT_ID);
    	slProjectParam.add(DecConstants.SELECT_NAME);
    	
    	MapList mlProject = DomainObject.findObjects(context, DecConstants.TYPE_PERSON, "*", DecConstants.SELECT_NAME + "=='" + NEWOWNER + "'", slProjectParam);
    	
    	Map newOwneMap = (Map) mlProject.get(0);
    	String newOwnerId = (String) newOwneMap.get(DecConstants.SELECT_ID);//새로운 owner Person Id
    	
    	DomainObject object = new DomainObject(projectId);
    	StringList slMemberRELID = object.getInfoList(context, "from[" + DecConstants.RELATIONSHIP_MEMBER + "].id"); //프로젝트 connect 된 Member id
    	StringList slRelParam = new StringList();
    	slRelParam.add("to." + DecConstants.SELECT_NAME);
    	slRelParam.add("to." + DecConstants.SELECT_ID);
    	slRelParam.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE);
    	
    	RelationshipWithSelectList rwsl = Relationship.getSelectRelationshipData(context, slMemberRELID, slRelParam);//프로젝트 connect 된 Member 정보
    	
    	Map<String, StringList> mRole = new HashMap(); 
		for(RelationshipWithSelect rws : rwsl){
			if(String.valueOf(rws.getSelectData("to." + DecConstants.SELECT_ID)).equalsIgnoreCase(newOwnerId)) {
				isNewOwnerUnConnected = false;//기존 Member 유무 확인
				break;
			}
		}
		
		if(isNewOwnerUnConnected) { // 새로운 Member 일 경우 connect
			DomainRelationship.connect(context,
					projectId,
	        		DomainConstants.RELATIONSHIP_MEMBER,
	        		newOwnerId,
	        		false);
		}
		
		slMemberRELID = object.getInfoList(context, "from[" + DecConstants.RELATIONSHIP_MEMBER + "].id");
		RelationshipWithSelectList rwsl2 = Relationship.getSelectRelationshipData(context, slMemberRELID, slRelParam);//신규 추가된 Member 대비 다시 프로젝트 connect 된 Member 정보 불러오기
    	
    	Map<String, StringList> mRole2 = new HashMap(); 
		for(RelationshipWithSelect rws : rwsl2){
			StringList slMemberRole = rws.getSelectDataList(DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE);
			String sPersonName = rws.getSelectData("to." + DecConstants.SELECT_NAME);
			String sPersonId = rws.getSelectData("to." + DecConstants.SELECT_ID);
			String connectionId = rws.toString();
			
			StringBuilder sbParam = new StringBuilder();
			sbParam.append("mod connection $1 $2 ");
			List<String> lParam = new ArrayList();
			lParam.add(connectionId);
			lParam.add("decProjectMemberRole");
			
			if(OLDOWNER.equalsIgnoreCase(sPersonName)) {
				slMemberRole.remove("PIM");//멤버역할 PIM 설정
				MqlUtil.mqlCommand(context, "mod connection $1 $2 $3", connectionId, "Project Access", "Project Member");
			}
			if(NEWOWNER.equalsIgnoreCase(sPersonName)) {
				slMemberRole.removeAll(Arrays.asList(DecConstants.EMPTY_STRING));//StringList 빈값 제거
				if(!slMemberRole.contains("PIM")) {//Role에 PIM이 없을 경우
					slMemberRole.add("PIM");//멤버역할 PIM 설정
				}
				MqlUtil.mqlCommand(context, "mod connection $1 $2 $3", connectionId, "Project Access", "Project Owner");
			}
			for(int i=0;i<slMemberRole.size();i++) {
				sbParam.append("$").append(String.valueOf(i+3)).append(",");
				lParam.add(slMemberRole.get(i));
			}
			
			if(slMemberRole.size()==0) {//오류 방지; mod connection id decProjectMemberRole; <<이럴경우 오류 발생
				sbParam.append("$3,");
				lParam.add("");
			}
			sbParam.deleteCharAt(sbParam.length() - 1);//마지막 컴마(,) 제거용
			MqlUtil.mqlCommand(context, sbParam.toString(), lParam);
		}
		
		ContextUtil.commitTransaction(context);
		
    	return 0;
    	} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    //Added by thok 2023.09.08 [E]
    
    public Map getRangeListAboutProjectMemberRole(Context context, String[] args) throws Exception{
		try {
			String projectMemberRoleExpr = MqlUtil.mqlCommand(context, "print role $1 select $2 dump $3", "decProjectMemberRole", "child.description", DecConstants.SYMB_VERTICAL_BAR);
			StringList projectMemberRoleList = FrameworkUtil.splitString(projectMemberRoleExpr, DecConstants.SYMB_VERTICAL_BAR);
			
			Map rangeMap = new HashMap();
			rangeMap.put("field_choices", projectMemberRoleList);
			rangeMap.put("field_display_choices", projectMemberRoleList);
			
			return rangeMap;
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
    /**
     * jhlee Add Project State 화면명
     * @param context
     * @param forecastStartDate
     * @param estDate
     * @param current
     * @param today
     * @param locale
     * @return
     * @throws Exception
     */
	public String getCWPTaskStateName(Context context, String forecastStartDate, String estDate, String current, String today, Locale locale) throws Exception {
		String targetDate = forecastStartDate;
		if(DecStringUtil.isEmpty(targetDate)) {
			targetDate = estDate;
		}
		String stateName = current;
		if(DecStringUtil.equals(DecConstants.STATE_PROJECT_TASK_CREATE, current) && DecDateUtil.getDifference(targetDate, today) > 0) {
			stateName = "Delay";
		}
		return EnoviaResourceBundle.getProperty(context, "emxProgramCentralStringResource", locale, "ProgramCentral.State.Project_Task." + stateName);
	}
	/**
	 * jhlee Add Project 사용자 역할
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public StringList getProjectMemberRoleList(Context context, String[] args) throws Exception {
		StringList slReturn = new StringList();
		Map programMap = JPO.unpackArgs(args);
		Map paramList = (Map) programMap.get("paramList");
		String objectId = (String) paramList.get("objectId");
        DomainObject doPS = DomainObject.newInstance(context, objectId);
    	StringList slMemberRELID = doPS.getInfoList(context, "from[" + DecConstants.RELATIONSHIP_MEMBER + "].id");
    	
    	StringList slRelParam = new StringList();
    	slRelParam.add("to." + DecConstants.SELECT_NAME);
    	slRelParam.add(DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE);
    	
    	RelationshipWithSelectList rwsl = Relationship.getSelectRelationshipData(context, slMemberRELID, slRelParam);
    	Map<String, StringList> mRole = new HashMap(); 
		for(RelationshipWithSelect rws : rwsl){
			StringList slMemberRole = rws.getSelectDataList(DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE);
			String sPersonName = rws.getSelectData("to." + DecConstants.SELECT_NAME);
			mRole.put(sPersonName, slMemberRole);
		}
		
    	MapList mlAccessList = (MapList) programMap.get("objectList");
    	for(Object o : mlAccessList) {
        	Map<?, ?> mapFromDB = (Map<?, ?>) o;
        	String uniqueRowIdFromDB = (String) mapFromDB.get("TYPE");
        	String colValueFromDB = (String) mapFromDB.get("username");
        	StringList slRole = mRole.get(colValueFromDB);
        	if(slRole != null) {
            	slReturn.add(slRole.join(", "));
        	}else {
        		slReturn.add(DecConstants.EMPTY_STRING);
        	}
    	}
        
		return slReturn;	
	}
	
	  /**
     * It returns true if ProjectSpace Policy is not Hold and Cancel
     * 
     * @param context the ENOVIA <code>Context</code> object.
     * @param args request arguments
     * @return true if ProjectSpace Policy is not Hold and Cancel
     * @throws Exception if operation fails. 
     */
    public boolean isProjectNotInHoldOrCancel(Context context, String args[]) throws Exception {
    
		boolean isNotProjectSpaceHoldCancel = true;
		Map programMap = (Map) JPO.unpackArgs(args);
		String objectId = (String) programMap.get("objectId");
		if(ProgramCentralUtil.isNullString(objectId))
		{
			return isNotProjectSpaceHoldCancel;
		}
		DomainObject dmoObject = DomainObject.newInstance(context,objectId);
		StringList selects = new StringList(2);
		selects.add(DomainConstants.SELECT_POLICY);
		selects.add(ProgramCentralConstants.SELECT_PROJECT_POLICY_FROM_TASK);
		selects.add(ProgramCentralConstants.SELECT_IS_PROJECT_TEMPLATE);
		Map objectInfo = dmoObject.getInfo(context, selects);
		String policyName = (String) objectInfo.get(DomainConstants.SELECT_POLICY);
		String isProjectTemplate= (String) objectInfo.get(ProgramCentralConstants.SELECT_IS_PROJECT_TEMPLATE);
		if("true".equalsIgnoreCase(isProjectTemplate)){
			ProjectTemplate projectTemplate = (ProjectTemplate)DomainObject.newInstance(context, DomainConstants.TYPE_PROJECT_TEMPLATE, DomainObject.PROGRAM);
	 		return projectTemplate.isOwnerOrCoOwner(context, objectId);
		}
		String projectPolicy = (String) objectInfo.get(ProgramCentralConstants.SELECT_PROJECT_POLICY_FROM_TASK);
        if(ProgramCentralConstants.POLICY_PROJECT_SPACE_HOLD_CANCEL.equalsIgnoreCase(projectPolicy) || ProgramCentralConstants.POLICY_PROJECT_SPACE_HOLD_CANCEL.equalsIgnoreCase(policyName))
                {
        	      isNotProjectSpaceHoldCancel=false;
                }
        if(isNotProjectSpaceHoldCancel) {
        	decAccess_mxJPO accessJPO = new decAccess_mxJPO();
        	isNotProjectSpaceHoldCancel = accessJPO.hasAccess(context, args);
        }
		return isNotProjectSpaceHoldCancel;
  	 }
    
    public Map getIWPRangeMap(Context context, String[] args) throws Exception{
    	try {
			Map programMap = JPO.unpackArgs(args);
			Map paramMap = (Map) programMap.get("paramMap");
			String objectId = (String) paramMap.get("objectId");
			String type = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", objectId, DecConstants.SELECT_TYPE);
			
			Map rangeMap = new HashMap();
			
			if ( DecConstants.TYPE_DECCWPTASK.equals(type) )
			{
				StringList slSelect = new StringList( new String[] {DecConstants.SELECT_ID, DecConstants.SELECT_NAME} );
				DomainObject doCWP = DomainObject.newInstance(context, objectId);
				MapList iwpList = doCWP.getRelatedObjects(context, DecConstants.RELATIONSHIP_SUBTASK, DecConstants.TYPE_DECIWPTASK
						, slSelect, null
						, false, true
						, (short) 1
						, null, null
						, 0);
				
				Map<String,StringList> iwpSummary = decCollectionUtil.extractStringList(iwpList
						, DecConstants.SELECT_ID
						, DecConstants.SELECT_NAME);
				
				rangeMap.put("field_choices", iwpSummary.get(DecConstants.SELECT_ID));
				rangeMap.put("field_display_choices", iwpSummary.get(DecConstants.SELECT_NAME));
			}
			else
			{
				// do nothing...
			}
			
			return rangeMap;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    
    public void updateIWPInfo(Context context, String[] args) throws Exception{
    	try ( SqlSession sqlSession = decSQLSessionFactory.getSession() ) {
			Map programMap = JPO.unpackArgs(args);
			Map paramMap = (Map) programMap.get("paramMap");
			String objectId = (String) paramMap.get("objectId");
			String iwpId = (String) paramMap.get("New Value");
			
			StringList keyList = FrameworkUtil.splitString(objectId, "@");
			
			if ( keyList != null && keyList.size() >= 5 )
			{
				String iwpNo = "";
				if ( StringUtils.isNotEmpty(iwpId) )
				{
					iwpNo = MqlUtil.mqlCommand(context, "print bus $1 select $2 dump", iwpId, DecConstants.SELECT_NAME);
				}
				
				Map updateParamMap = new HashMap();
				updateParamMap.put("SITE_CD", keyList.get(0));
				updateParamMap.put("CWP_NO", keyList.get(1));
				updateParamMap.put("LINE_NO", keyList.get(2));
				updateParamMap.put("ISO_NO", keyList.get(3));
				updateParamMap.put("IDENT_CD", keyList.get(4));
				updateParamMap.put("IWP_NO", iwpNo);
				updateParamMap.put("IWP_OID", iwpId);
				
				sqlSession.selectList("IF_Material.deleteIWPMaterialList", updateParamMap);
				sqlSession.selectList("IF_Material.insertIWPMaterialList", updateParamMap);
				
				sqlSession.commit();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
    }
    /**
     * jhlee Add 2023-10-11 CWP Summary - IFC Progress
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList getIFCProgress(Context context, String[] args) throws Exception{
    	return getIFCInfo(context, args, "Progress");
    }
    /**
     * jhlee Add 2023-10-11 CWP Summary - IFC Total
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList getIFCTotal(Context context, String[] args) throws Exception{
    	return getIFCInfo(context, args, "Total");
    }
    /**
     * jhlee Add 2023-10-11 CWP Summary - IFC Issued
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList getIFCIssued(Context context, String[] args) throws Exception{
    	return getIFCInfo(context, args, "Issued");
    }
    /**
     * jhlee Add 2023-10-11 CWP Summary - IFC Plan
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public StringList getIFCPlan(Context context, String[] args) throws Exception{
    	return getIFCInfo(context, args, "Plan");
    }
    
    private StringList getIFCInfo(Context context, String[] args, String sInfoType) throws Exception{
    	StringList slReturn = new StringList();
    	try {
    		Map programMap = JPO.unpackArgs(args);
        	MapList mlObject = (MapList)programMap.get("objectList");
        	int iSize = mlObject.size();
        	Map mObject = null;
        	String sObjId = null;
        	String[] sArrObjId = new String[iSize];
        	for(int i=0; i<iSize; i++) {
        		mObject = (Map)mlObject.get(i);
        		sObjId = (String)mObject.get(DecConstants.SELECT_ID);
        		sArrObjId[i] = sObjId;
        	}
        	StringList slParam = new StringList();
        	slParam.add("from[" + DecConstants.RELATIONSHIP_TASK_DELIVERABLE + "].to." + DecConstants.SELECT_ATTRIBUTE_DECDOCSTAGE);
        	slParam.add("from[" + DecConstants.RELATIONSHIP_TASK_DELIVERABLE + "].to." + DecConstants.SELECT_ATTRIBUTE_DECACTUALDATE);
        	BusinessObjectWithSelectList bowsl = ProgramCentralUtil.getObjectWithSelectList(context, sArrObjId, slParam);
        	StringList slDocStage = null;
        	StringList slActualDate = null;
        	String sDocStage = null;
        	String sActualDate = null;
        	int iPlan = 0;
        	int iIssued = 0;
        	int iTotal = 0;
        	for(BusinessObjectWithSelect bows : bowsl) {
        		slDocStage = bows.getSelectDataList("from[" + DecConstants.RELATIONSHIP_TASK_DELIVERABLE + "].to." + DecConstants.SELECT_ATTRIBUTE_DECDOCSTAGE);
        		slActualDate = bows.getSelectDataList("from[" + DecConstants.RELATIONSHIP_TASK_DELIVERABLE + "].to." + DecConstants.SELECT_ATTRIBUTE_DECACTUALDATE);
        		iTotal = slDocStage != null ? slDocStage.size() : 0;
        		for(int i=0; i<iTotal; i++) {
        			sDocStage = slDocStage.get(i);
        			sActualDate = slActualDate.get(i);
        			if("IFC".equalsIgnoreCase(sDocStage)) {
        				if(DecStringUtil.isEmpty(sActualDate)) {
        					iPlan++;
        				}else {
        					iIssued++;
        				}
        			}
        		}
        		if("Progress".equals(sInfoType)) {
            		if(iTotal == 0 || iIssued == 0) {
            			slReturn.add(DecConstants.EMPTY_STRING);
            		}else {
            			slReturn.add((iTotal / iIssued * 100) + "%");
            		}
        		}else if("Total".equals(sInfoType)) {
        			slReturn.add(iTotal + "");
            	}else if("Issued".equals(sInfoType)) {
        			slReturn.add(iIssued + "");
    	    	}else if("Plan".equals(sInfoType)) {
        			slReturn.add(iPlan + "");
    	    	}
        		iPlan = 0;
        		iIssued = 0;
        		iTotal = 0;
        	}
    	}catch (MatrixException e) {
			throw e;
		}catch (Exception e) {
			throw e;
		}
    	return slReturn;
    }
}
