<%@page import="com.matrixone.apps.program.ProgramCentralUtil"%>
<%@page import="com.dec.webservice.call.decWebserviceUtil"%>
<%@page import="com.dec.util.decListUtil"%>
<%@page import="com.dec.util.DecConstants"%>
<%@page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@page import="com.dec.util.DecStringUtil"%>
<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="com.matrixone.apps.domain.util.XSSUtil"%>
<%@page import="com.matrixone.apps.domain.util.*"%>
<%@page import="com.matrixone.apps.domain.util.EnoviaResourceBundle"%>
<%@page import="java.util.Locale"%>
<%@page import="matrix.db.JPO"%>
<%@page import="matrix.db.Environment"%>
<%@page import="com.matrixone.apps.domain.*"%>
<%@page import="java.util.*"%>

<%
try{
%>
<%@include file="emxNavigatorTopErrorInclude.inc"%>
<%@include file = "../common/emxNavigatorInclude.inc"%>

<emxUtil:localize id="i18nId" bundle="emxProgramCentralStringResource" locale='<xss:encodeForHTMLAttribute><%=request.getLocale().getLanguage() %></xss:encodeForHTMLAttribute>' />

<html>
<head>

<meta charset="UTF-8">
<script type="text/javascript" src="../common/scripts/emxUIModal.js"></script>
<script type="text/javascript" src="../common/scripts/emxUIPopups.js"></script>
<script type="text/javascript" src="../common/scripts/emxUICore.js"></script> <!-- added by thok 2023.08.16  --> 
<script src="../common/scripts/hichart/jquery-3.1.1.min.js"></script>
<script src="../common/scripts/hichart/highcharts.js"></script>
<script src="../common/scripts/hichart/map.js"></script>
<!-- "https://code.highcharts.com/maps/modules/data.js"> -->
<script src="../common/scripts/hichart/data.js"></script>
<script src="../common/scripts/hichart/world.js"></script>
<script src="../common/scripts/hichart/accessibility.js"></script>
<script
	src="../common/scripts/hichart/proj4.js"></script>
<script
	src="../common/scripts/hichart/jquery-ui.min.js"></script>
<script language="JavaScript" src="../common/scripts/emxUIPopups.js"
	type="text/javascript"></script>

<link rel="stylesheet" type="text/css" href="../common/styles/emxUIDefault.css">	
<link rel="stylesheet" type="text/css" href="../common/styles/emxUIList.css">	
<link rel="stylesheet" type="text/css" href="../common/styles/emxUIForm.css">	
<link href="../common/styles/jquery-ui.css" rel="stylesheet" type="text/css">
<link rel="stylesheet" type="text/css" href="../common/styles/decProjectUI.css">

<style>
html, body {
	height: 100%;
}
body {
	margin: 0;
}
td.prolist.hover {
	background-color: #dcdcdc;
}

table.list tr th {
	font-size: 1.5vh;
	padding: 5px;
	line-height: 1.5em;
	text-align: center;
}
table.list tr td {
	font-size: 1.5vh;
	line-height: 1.5em;
	text-align: center;
}
table.list tr th span {
	float: none;
	font-size: 1.5vh;
	line-height: 1.5em;
}
table.form tr th {
	min-width: 1vw;
	font-size: 1.5vh;
	padding: 5px;
	line-height: 1.5em;
	text-align: center;
}
table.form tr td {
	min-width: 1vw;
	font-size: 1.5vh;
	line-height: 1.5em;
	text-align: center;
}
table.form tr td.link {
	background: linear-gradient(rgb(245, 246, 247) 0%, rgb(226, 228, 227) 100%);
}
table.form tr td.number {
	
	font-weight: bolder;
	line-height: 1.5em;
	font-size: 1.6vh;
}

</style>
</head>
<body>

<%

	String decHcKey = "";
	String decCountryCode = "";
	String decSiteName = "";
	//String decLogitude = "";
	String decProjectName = "";
	String mapId = "";
	String decEPCType = "";
	String decCategory1 = "";
	int Petrochemistry = 0;
	int Environment = 0;
	int IndustryPlant = 0;
	int NuclearPower = 0;
	int all = 0;
	int PowerGeneration = 0;
	StringList busSelects = new StringList();
	busSelects.add(DomainConstants.SELECT_ID);
	busSelects.add(DomainConstants.SELECT_NAME);

	String sGlobalUrl = EnoviaResourceBundle.getProperty(context, "emxProgramCentral", context.getLocale(),
			"emxProgramCentral.Url.DecProjectUI");
	System.out.println("sGlobalUrl : " + sGlobalUrl);
	// Modified by choimingi on 2023.08.10 --- [s]
	String user = context.getUser();
	// Modified by choimingi on 2023.08.10 --- [e]
	// Modified by hslee on 2023.07.31 --- [s]
	MapList ml = new MapList();
	boolean pushContext = false;
	try {
		ContextUtil.pushContext(context);
		pushContext = true;
		
		StringBuffer sbWhere = new StringBuffer();
		sbWhere.append(DecConstants.SELECT_ATTRIBUTE_DECPROJECTTYPE).append(" == 'ongoing'");
		sbWhere.append(" && current != 'Complete' && current != 'Archive' && current != 'Hold' && current != 'Cancel'");
		
		Map programMap = new HashMap();
		programMap.put("whereParam", sbWhere.toString());
		// Modified by choimingi on 2023.08.10 --- [s]
		programMap.put("user",user);
		// Modified by choimingi on 2023.08.10 --- [e]
				
		ml = JPO.invoke(context, "emxProjectSpace", null, "getProjectOutLineList", JPO.packArgs(programMap), MapList.class);
	    	
	} catch(Exception e) {
		e.printStackTrace();
	} finally {
		if ( pushContext ) { ContextUtil.popContext(context); }
	}
	// Modified by hslee on 2023.07.31 --- [e]
			
	// Added by hslee on 2023.07.10 --- [s]
	MapList countryList = JPO.invoke(context, "emxProjectSpace", null, "getCountryList", JPO.packArgs(new HashMap()), MapList.class);
	Map countryMap = decListUtil.getSelectKeyDataMapForMapList(countryList, "attribute[Country Code (2 Letter)]");
	String countryJsonStr = decWebserviceUtil.convertMapToJsonString(countryMap);
	// Added by hslee on 2023.07.10 --- [e]
			
	List<Map<String, Object>> projectAttrList = new ArrayList<>(); // attr 값을 담기위한 리스트
	List<Map<String, Object>> projectEPCList = new ArrayList<>(); // attr 값을 담기위한 리스트
	Map<String, String> mCountry = new HashMap();
	String sOldName = "";
	for (int i = 0; i < ml.size(); i++) {

		HashMap<?, ?> hashmap = (HashMap<?, ?>) ml.get(i);

		String objectId = (String) hashmap.get("id");
		// Modified by hslee on 2023.08.07 --- [s]
		/*
		DomainObject dom = new DomainObject(objectId);
		decCountryCode = dom.getAttributeValue(context, "decCountryCode");
		decSiteName = dom.getAttributeValue(context, "decSiteName");
		decEPCType = dom.getAttributeValue(context, "decEPCType");
		decCategory1 = dom.getAttributeValue(context, "decCategory1");
		decProjectName = dom.getInfo(context, DomainConstants.SELECT_NAME);
		*/
		decCountryCode = (String) hashmap.get(DecConstants.SELECT_ATTRIBUTE_DECCOUNTRYCODE);
		decSiteName = (String) hashmap.get(DecConstants.SELECT_ATTRIBUTE_DECSITENAME);
		decEPCType = (String) hashmap.get(DecConstants.SELECT_ATTRIBUTE_DECEPCTYPE);
		decCategory1 = (String) hashmap.get(DecConstants.SELECT_ATTRIBUTE_DECCATEGORY1);
		decProjectName = (String) hashmap.get(DecConstants.SELECT_NAME);
		// Modified by hslee on 2023.08.07 --- [e]
		Map<String, Object> mapEPC = new HashMap<>();
		mapEPC.put("decCategory1", decCategory1);
		projectEPCList.add(mapEPC);

		if (!decCountryCode.isEmpty()) {

			Map<String, Object> map = new HashMap<>();
			//map.put("decHcKey", decHcKey);
			map.put("decCountryCode", decCountryCode);
			map.put("decSiteName", decSiteName);
			//map.put("decLogitude", decLogitude);
			map.put("decProjectName", decProjectName);
			map.put("decEPCType", decEPCType);
			map.put("decCategory1", decCategory1);
			map.put("id", objectId);
			projectAttrList.add(map);
		}
	}
	System.out.println("EPC type으로 조회한 projectEPCList " + projectEPCList);

	// 결과 출력
	// Project Category 1 정보 조회
	Map programMap = new HashMap();
	programMap.put("codeMasterName", "Project Category");
	programMap.put("codeMasterRevision", "-");
	programMap.put("codeDetailLevel", "1");
	
	MapList codeDetailList = JPO.invoke(context, "decCodeMaster", null, "getCodeDetailList", JPO.packArgs(programMap), MapList.class);
	Map<String,Integer> projectCategoryStatisticMap = new HashMap<String,Integer>();
	for (Map<String, Object> map : projectEPCList) {
		String value = (String) map.get("decCategory1");
		if (projectCategoryStatisticMap.containsKey(value)) { 
			projectCategoryStatisticMap.put(value, projectCategoryStatisticMap.get(value) + 1);
		} else {
			projectCategoryStatisticMap.put(value, 1);
		}
	}
	/*
	 * Modified by hslee on 2023.09.08
	for (Map.Entry<String, Integer> entry : countMap.entrySet()) {
		System.out.println("entry:" + entry);
		String key = entry.getKey();
		int value = entry.getValue();

		if (key.equals("Petrochemistry")) {
			Petrochemistry = value;
		} else if (key.equals("Eco-Friendly")) {
			Environment = value;
		} else if (key.equals("Industry Plant")) {
			IndustryPlant = value;
		}else if (key.equals("Nuclear Power")) {
			NuclearPower = value;
		}else if (key.equals("Power Generation")) {
			PowerGeneration = value;
		} else {
			all += value;
		}
		//System.out.println("etc : " + etc + "개");        	
		//System.out.println(entry.getKey() + ": " + entry.getValue() + "개");            
	}
*/
	// 총합 출력
// 	int totalCount = projectEPCList.size();
	//System.out.println("총합: " + totalCount + "개");

	//////////////////////////////////////////////////////////////////

	Map<String, Map<String, Object>> resultMap = new HashMap<>();

	for (Map<String, Object> map : projectAttrList) {
		decCountryCode = (String) map.get("decCountryCode");
		decSiteName = (String) map.get("decSiteName");
		mapId = (String) map.get("id");
		if (decCountryCode != null && decSiteName != null && mapId != null) {
			Map<String, Object> existingMap = resultMap.get(decCountryCode);
			if (existingMap != null) {
		String existingProjectName = (String) existingMap.get("decSiteName");
		String existingId = (String) existingMap.get("id");
		existingMap.put("decSiteName", existingProjectName + ", " + decSiteName);
		existingMap.put("id", existingId + ", " + mapId);
			} else {
		map.put("decSiteName", decSiteName);
		map.put("id", mapId);
		resultMap.put(decCountryCode, map);

			}
		}
	}
	List<Map<String, Object>> updatedProjectAttrList = new ArrayList<>(resultMap.values());
	   
	   String projectListURL = MqlUtil.mqlCommand(context,"print command $1 select $2","PMCProjectSpaceMyDesk","href");    
	   String projectListURLResult = projectListURL.substring(projectListURL.lastIndexOf("/")+1);
	   
	   String getSetting = MqlUtil.mqlCommand(context,"print command $1 select $2","PMCProjectSpaceMyDesk","setting[Registered Suite].value");    
	   String getSettingResult = projectListURL.substring(projectListURL.lastIndexOf("=")+1);
	   if(getSettingResult.contains("emxProgramCentralStringResource")){
	      getSettingResult = "ProgramCentral";
	   }
// 	   String div1projectUrl = projectListURLResult+"&suiteKey="+getSettingResult;
// 	   String div1projectUrl = "../common/emxNavigator.jsp?MenuName=PMCMyDesk&CommandName=PMCProjectSpaceMyDesk";
// 	   String div1projectUrl = "../common/emxNavigator.jsp?MenuName=PMCMyDesk&CommandName=PMCProjectSpaceMyDesk&appName=ENOPREX_AP"; // Modified by hslee on 2023.08.24
	   String div1projectUrl = "../common/emxNavigator.jsp?MenuName=decProjectMyDesk&CommandName=PMCProjectSpaceMyDesk&appName=ENOPREX_AP"; // Modified by hslee on 2023.08.24

	//login 유저 문의/제안 메일 안읽음 팝업 added by thok 2023.08.16 [S]
 	boolean unReadRequestMail = false;
 	IconMailList iconMailList = IconMail.getMail(context);
 	IconMailItr iconMailItr   = new IconMailItr(iconMailList);
 	IconMail iconMailObj      = null;

 	while (iconMailItr.next()) {
 	  iconMailObj = iconMailItr.obj();
 	  String sSubject = String.valueOf(iconMailObj.getSubject());
 	  String sStatus = String.valueOf(iconMailObj.getStatus());
 	  if(sStatus.equalsIgnoreCase("3") && sSubject.contains("[Notice]")){ // 안읽음 && 문의/제안 메일
 		  unReadRequestMail = true;
 		  break;
 	  }
 	}
 	StringBuffer mailUrl = new StringBuffer("emxCompInboxDialogFS.jsp");
 	mailUrl.append("?mx.page.filter=unread");
 	mailUrl.append("&suiteKey=Framework");
 	mailUrl.append("&StringResourceFileId=emxFrameworkStringResource");
 	mailUrl.append("&SuiteDirectory=common");
 	mailUrl.append("&widgetId=null");
 	mailUrl.append("&targetLocation=popup");
 	mailUrl.append("&isPopupModal=true");
 	mailUrl.append("&targetLocation=popup");
 	
 	//login 유저 문의/제안 메일 안읽음 팝업 added by thok 2023.08.16 [E]

	//SystemAdmin,ProjectAdmin 문의/제안 접수 받지 않은면 알림 added by thok 2023.09.19 [S]
			
 	boolean unAcceptedRequest = false;
	StringBuffer requestURL = new StringBuffer("emxNavigator.jsp");
	requestURL.append("?MenuName=decProjectMyDesk");
	requestURL.append("&CommandName=decRequestList");
	requestURL.append("&appName=ENOPREX_AP");
	
	StringList slRequestParam = new StringList();
	slRequestParam.add("to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member|" + DecConstants.SELECT_ATTRIBUTE_DECPROJECTMEMBERROLE + "==PIM].to." + DecConstants.SELECT_NAME);
	
	String sWhere = DecConstants.SELECT_CURRENT + "=='" + DecConstants.STATE_DECREQUEST_REQUEST+ "'";
	
	MapList mlRequest = DomainObject.findObjects(context, DecConstants.TYPE_DECREQUEST, "*", sWhere, slRequestParam);

	if(mlRequest.size() > 0 && context.isAssigned("decSystemAdmin")){//확인해야 할 문의제안이 존재하고 SystemAdmin일 경우
		unAcceptedRequest = true;
	} else if(mlRequest.size() > 0 && !context.isAssigned("decSystemAdmin")){//확인해야 할 문의제안이 존재하고 SystemAdmin이 아닐 경우
		for(Object obj : mlRequest){
			Map mRequest = (Map) obj;
			String PIMList = (String) mRequest.get("to["+DecConstants.RELATIONSHIP_DECPROJECTREQUESTREL+"].from.from[Member].to." + DecConstants.SELECT_NAME);
			if(ProgramCentralUtil.isNotNullString(PIMList) && PIMList.contains(context.getUser())){//현재 사용자가 PIM인 프로젝트와 연결된 문의제안이 있을 경우
				unAcceptedRequest = true;
				break;
			}
		}
	}		
			
	//SystemAdmin,ProjectAdmin 문의/제안 접수 받지 않은면 알림 added by thok 2023.09.19 [E]
%>
    
	<div id="container" style="height: 100%; left: 0; top: 0; position: relative;"></div>
<!-- 		style="height: 827px; width: calc(100% - 250px); left: 0; top: 0; position: relative;"></div> -->
	
	
	<table id="projectInfoTable" class="list form" style="position: absolute; top: 0; right: 0; height: 100%; width: 20%; max-width: 400px; margin: 0; background-color: white;">
		<tr>
			<th class="link" style="cursor: pointer; text-align: center;" onclick="javascript:window.open('<%=sGlobalUrl%>')">
				<img src="../widget/images/MyApps/X3DGLOB_AP_AppIcon@2x.png" style="height: 5vh; width: 5vh;"><br/>
				<span>Globe Viewer</span>
			</th>
			<th class="link" style="cursor: pointer; text-align: center;" onclick="javascript:top.location.href = '<%=div1projectUrl%>';">
				<img src="../widget/images/MyApps/ENOPRPR_AP_AppIcon.svg" style="height: 5vh; width: 5vh;"><br/>
				<span>Project List</span>
			</th>
		</tr>
		<tr>
			<th colspan="2" style="text-align: center;">
				<emxUtil:i18n localize="i18nId">emxProgramCentral.Label.ProjectStatus</emxUtil:i18n>
			</th>
		</tr>
<!-- 		<tr> -->
<%-- 			<td class="label" style="width: 50%;"><emxUtil:i18n localize="i18nId">emxProgramCentral.Label.ProjectCategory.Petrochemistry</emxUtil:i18n></td> --%>
<%-- 			<td class="field number" style="width: 50%;"><%=Petrochemistry%></td> --%>
<!-- 		</tr> -->
<!-- 		<tr> -->
<%-- 			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Label.ProjectCategory.PowerGeneration</emxUtil:i18n></td> --%>
<%-- 			<td class="field number"><%=PowerGeneration%></td> --%>
<!-- 		</tr> -->
<!-- 		<tr> -->
<%-- 			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Label.ProjectCategory.Environment</emxUtil:i18n></td> --%>
<%-- 			<td class="field number"><%=Environment%></td> --%>
<!-- 		</tr> -->
<!-- 		<tr> -->
<%-- 			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Label.ProjectCategory.NuclearPower</emxUtil:i18n></td> --%>
<%-- 			<td class="field number"><%=NuclearPower%></td> --%>
<!-- 		</tr> -->
<!-- 		<tr> -->
<%-- 			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Label.ProjectCategory.IndustryPlant</emxUtil:i18n></td> --%>
<%-- 			<td class="field number"><%=IndustryPlant%></td> --%>
<!-- 		</tr> -->
<!-- 		<tr> -->
<%-- 			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Common.All</emxUtil:i18n></td> --%>
<%-- 			<td class="field number"><%=totalCount%></td> --%>
<!-- 		</tr> -->
<%
		Map codeDetailMap = null;
		String code = null;
		String codeDesc = null;
		int count = 0;
		for (int k = 0; k < codeDetailList.size(); k++)
		{
			codeDetailMap = (Map) codeDetailList.get(k);
			code = (String) codeDetailMap.get(DecConstants.SELECT_ATTRIBUTE_DECCODE);
			codeDesc = (String) codeDetailMap.get(DecConstants.SELECT_DESCRIPTION);
			count = projectCategoryStatisticMap.getOrDefault(code, 0);
%>
			<tr>
				<td class="label" style="width: 50%;"><%=codeDesc %></td>
				<td class="field number" style="width: 50%;"><%=count %></td>
			</tr>
<%			
		}
%>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Common.All</emxUtil:i18n></td>
			<td class="field number"><%=projectEPCList.size() %></td>
		</tr>
		<tr>
			<th colspan="2" style="text-align: center;">
				<emxUtil:i18n localize="i18nId">emxProgramCentral.Common.ProjectStatus</emxUtil:i18n>
				<!-- icon -->
			</th>
		</tr>
		<tr>
			<td colspan="2" id="imageHolder" style="height: 27%; text-align: center;">
			</td>
		</tr>
		<tr>
			<th class="link" id="decProjectDetail" style="cursor: pointer; text-align: center;">
				<img id="decProjectDetailImage" src="../widget/images/MyApps/ENOMABO_AP_AppIcon.png" style="height: 5vh; width: 5vh;"><br/>
				<span id="textHolder">Detail</span>
			</th>
			<th class="link" id="decProjectDashboard" style="cursor: pointer; text-align: center;">
				<img src="../widget/images/MyApps/X3DDASH_AP_AppIcon.svg" style="height: 5vh; width: 5vh;"><br/>
				<span >Dashboard</span>
			</th>
		</tr>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">ProgramCentral.Common.SiteName</emxUtil:i18n></td>
			<td class="field" id="decSiteName"></td>
		</tr>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">ProgramCentral.Common.ProjectCode</emxUtil:i18n></td>
			<td class="field" id="decName"></td>
		</tr>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">ProgramCentral.Common.Classfication</emxUtil:i18n></td>
			<td class="field" id="decCategory2"></td>
		</tr>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Label.Country</emxUtil:i18n></td>
			<td class="field" id="decCountryCode"></td>
		</tr>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">ProgramCentral.Common.EPC</emxUtil:i18n></td>
			<td class="field" id="decEPCType"></td>
		</tr>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">ProgramCentral.Common.ConstructionPeriod</emxUtil:i18n></td>
			<td class="field" id="decDuration"></td>
		</tr>
		<tr>
			<td class="label"><emxUtil:i18n localize="i18nId">emxProgramCentral.Label.ProgressRate</emxUtil:i18n></td>
			<td class="field" id="decProgressRate"></td>
		</tr>
	</table>



			<script>
let countryJson = <%=countryJsonStr %>;        
		 const ajaxData = '';
		 // 프로젝트 이름 클릭 시, ajax 통신을 위한 함수
		 // 현장명 : decSiteName , 프로젝트코드 : decName, 분류 : decCategory2, 국가지역 : decCountryCode, EPC : decEPCType,
  		//  공사기간 : decDuration , 공정율  : decProgressRate
  		 
  		var isRun = false;

		 function loadData(ajaxData) {
			 
			 var formData = { proId: ajaxData };
			 var hrefValue = "../common/emxTree.jsp?objectId=" + ajaxData + "&mode=replace&AppendParameters=true&reloadAfterChange=true";
			
			 console.log('폼데이타:'+ formData);
			 console.log('hrefValue :'+hrefValue);
			 var anchorElement = $('<a></a>').attr('href', hrefValue); // 이미지를 a태그로 감싸주기 위한 부분
			 
			 // AJAX 통신도충 폼 제출시 중복요청 방지.
			 if(isRun == true) {
			        return;
			    }
			 isRun = true;
			 
			 $.ajax({
			    url: './decProjectUIProcess.jsp', // 데이터를 가져올 URL을 설정합니다.
			    method: 'POST', // 요청 방식을 설정합니다.
			    data : formData,
			    success: function(response) {
			    	 isRun  = false;  // AJAX 통신도충 폼 제출시 중복요청 방지.
			    //	$('#textHolder').empty();
				//	$('#textHolder2').empty();
			        // AJAX 요청이 성공하면 수행할 작업을 처리합니다.
			        // 응답 데이터는 response 변수에 담겨 있습니다.			       
			        //console.log(response);
			        var closingBraceIndex = response.lastIndexOf('}');
			        var trimmedResponse = response.substring(0, closingBraceIndex + 1);
			        var responseObj = JSON.parse(trimmedResponse);
					var $image = $("<img>").attr("src", responseObj["imgSource"])
								.attr({"id": "image"
									, "border": 1
								})
								.css({
									"max-height": $("#imageHolder").height() * 0.9 + "px"
									, "max-width": $("#imageHolder").width() * 0.9 + "px"
									, "border": "1px solid #bababa"
									, "box-shadow": "1px 1px 2px #ccc"
								});
					
			        $("#imageHolder").append($image);
			        
			        $('#decName').text(responseObj["projectCode"]);
			        $('#decDuration').text(responseObj["constructionDate"]);
			        $('#decSiteName').text(responseObj["siteName"]);
			        $('#decCategory2').text(responseObj["classfication"]);
			        $('#decCountryCode').text(responseObj["countryANDRegion"]);
			        $('#decEPCType').text(responseObj["EPC"]);
			        $('#decProgressRate').text(responseObj["decProgressRate"]);
			        
			        // Modified by choimingi on 2023.08.10 --- [s]
			        let memberYN = responseObj["memberCheck"];
			        console.log('memberYN:'+ memberYN);
			        let detailClick = null;
			        let dashboardURL = responseObj["dashboardURL"];
					let dashboardClick = null;
			        if(memberYN=="N"){
			        	detailClick = "alert('<emxUtil:i18n localize="i18nId">emxProgramCentral.Msg.ProjectMemberCanAcesss</emxUtil:i18n>');";
			        	$("#decProjectDetail").attr("onclick", detailClick);
			        	dashboardClick = "alert('<emxUtil:i18n localize="i18nId">emxProgramCentral.Msg.ProjectMemberCanAcesss</emxUtil:i18n>');";
			        	
			        }else{
// 			        	$("#decProjectDetail").attr("onclick", "javascript:window.open('" + hrefValue + "')");
			        	$("#decProjectDetail").attr("onclick", "javascript:location.href = '" + hrefValue + "';");
			        	if ( !dashboardURL )
						{
							dashboardClick = "alert('<emxUtil:i18n localize="i18nId">emxProgramCentral.Msg.DashboardURLIsNotDefined</emxUtil:i18n>');";
						}
						else
						{
							dashboardClick = "javascript:window.open('" + dashboardURL + "')";
						}
			        }
			        
			        $("#decProjectDashboard").attr("onclick", dashboardClick);
			   		// Modified by choimingi on 2023.08.10 --- [e]
			   		
			   		/*
			   		("#decProjectDetail").attr("onclick", "javascript:window.open('" + hrefValue + "')");
			   			
					
			   		let dashboardURL = responseObj["dashboardURL"];
					let dashboardClick = null;
					if ( !dashboardURL )
					{
						dashboardClick = "alert('<emxUtil:i18n localize="i18nId">emxProgramCentral.Msg.DashboardURLIsNotDefined</emxUtil:i18n>');";
					}
					else
					{
						dashboardClick = "javascript:window.open('" + dashboardURL + "')";
					}
					$("#decProjectDashboard").attr("onclick", dashboardClick);
					
			        주석 처리 >> Modified by choimingi on 2023.08.10 */
			      },
			      error: function(xhr, status, error) {
			    	  isRun  = false; // Added by hslee on 2023.08.03 Ajax가 실패하더라도 다시 호출할 수 있도록 초기화
			        // AJAX 요청이 실패하면 수행할 작업을 처리합니다.
			        console.log('AJAX Error:', error);
			      }
			    });
			  console.log('기본');
			$("#detailAnchor").attr("href", "").attr("target", "");
			$("#dashboardAnchor").attr("href", "").attr("target", "");
			$('#imageHolder').empty();
			  
			  
		}
		
		function nationName(decCountryCode) {
            const index2 = topology.objects.default.geometries.findIndex(item => item.properties['hc-key'] === decCountryCode);
        	var name = topology.objects.default.geometries[index2].properties.name;
        	return name;
		}
		
			(async () => {
			    const topology = await fetch(
			        '../common/scripts/hichart/world-highres.topo.json'
			    ).then(response => response.json());
			    
				//console.log(projectAttrList);
			    
				// topology 객체의 "objects" 프로퍼티에서 "countries" 데이터 가져오기
				let myMap = new Map()
				const countries = topology.objects.default.geometries;
				for(var z =0; z <countries.length; z++){
					var countryCode = countries[z].id;
					var countryN = countries[z].properties.name;
					myMap.set(countryCode,countryN)
				}
				//const index = countries.findIndex(item => item.properties['hc-key'] === "cn");
				//console.log(index);  // 2
				
				//function nationName(decCountryCode) {
				//const index4 = countries.findIndex(item => item.properties['hc-key'] === "cn");
				//const index2 = topology.objects.default.geometries.findIndex(item => item.properties['hc-key'] === "decCountryCode");
				//var name = topology.objects.default.geometries[index].properties.name;
	        	//console.log(name+"은 지도에 표시할 국가 이름");
				//}
				
			   const data = [
				   				   
			    	<%
			    	for (Map<String, Object> item : updatedProjectAttrList) {%>
                    {	
                    	<% String hckeydata = item.get("decCountryCode").toString();
                    	   String lowerHckey = hckeydata.toLowerCase();    
                    	%>
                    	'hc-key': '<%=lowerHckey%>',
                        color: '#003399',
<%--                         nation2: myMap.get('<%=item.get("decCountryCode")%>'),    --%>
                        nation2: countryJson["<%=hckeydata.toUpperCase() %>"]["name"],   
                        name2 : '<%=item.get("decSiteName")%>',
                        countryName: '<%=item.get("decCountryCode")%>',
                        info: [	
                        	<%
							String decProjectSiteName = item.get("decSiteName").toString();
							String[] ProjectSiteNameArr = decProjectSiteName.split(",");
							String decProjectId3 = item.get("id").toString();
							String[] projectIdArr = decProjectId3.split(",");
							
							
							for (int i = 0; i < ProjectSiteNameArr.length; i++) {
								
								String projectSiteName = ProjectSiteNameArr[i].trim();
								String projectId = projectIdArr[i].trim();%>
                                {
                                    link: 'JavaScript:loadData("<%=projectId%>");',
                                    text: '<%=projectSiteName%>'
                                },
                            <%}%>
                        ],
                      
                        custom: {
                        	<%String tnop = item.get("decSiteName").toString();
								String[] tnopArr = tnop.split(",");%>
                            
                            arrival: '<%=tnopArr.length%>'                         
                        },
//                         dataLabels: {
//                             align: 'right'
//                         }                                     
                    },
                <%}%>
			    ];		

			    // Initialize the chart
			    Highcharts.mapChart('container', {
			    	
			    	
			        chart: {
			        	 map: topology,
				            events: {
				                load: function() {
				                  document.getElementsByClassName('highcharts-background')[0].setAttribute('fill','none') //지도색변경
				                  var chartContainer = this.container.parentNode;
				                  chartContainer.style.background = 'radial-gradient(circle, #C0E0FF, #003399)';

				                }
				              }          
			        },
					
			        title: {
// 			            text: '수행 프로젝트 현황' // Modified by hslee on 2023.07.10
			            text: ''
			        },
			        legend: {
			            enabled: false
			        },
			        mapNavigation: {
			              enabled: true,
			              mouseWheelZoom: true
			        },
			        
			      //  mapView: {
			      //      center: [56, 25],
			      //      zoom: 5
			      //  },
			        
			        tooltip: { //마우스 포커스 했을때 보여줄 명칭
							formatter: function () {
						      return false; // return을 false로 줘야 작은 모양의 툴팁박스도 사라진다.
							}
				 	},
				 	plotOptions: {
					    series: {
					      point: {
					        events: {
					        	 click: function (event) {
					                var marker = event.target;
					                /*
					                1.모달에 대한 div를 클래스 이름으로 갖는다. 2.모달이 화면에없으면 length가 0이므로 지울게없고 0이 아니라면 한번 실행됐다는 뜻이므로 한 개 제거해주면 된다.
					                */
					                var divNode = document.getElementsByClassName('ui-dialog ui-corner-all ui-widget ui-widget-content ui-front ui-draggable ui-resizable');
					                
					                if(divNode.length!=0){
					                  document.getElementsByClassName('ui-dialog ui-corner-all ui-widget ui-widget-content ui-front ui-draggable ui-resizable')[0].remove()
					                }
					                 var $div =$('<div></div>');					                
					                 event.stopPropagation();
// 					                 const pointName = this.name;
					                 const pointName = this.nation2;
					                 const mouseX = event.pageX; //LEFT
					                 const mouseY = event.pageY; // TOP
					                 const match = data.find(item => item.name === pointName);
					                 $div.dialog({
					                   title: pointName,
					                   width: 350,
					                   height: 150,
					                   position: { my: "left top", at: "left+" + mouseX + " top+" + mouseY, of: window} // of : marker -> window 						              
					                 });
					                 
					                 document.getElementsByTagName('button')[0].innerText='X'
					                 
					                 var $table = $('<table>').css({
					                   border: '0',
					                   borderCollapse: 'collapse'
					                 });
					                 for (var i = 0; i < this.info.length; i++) {
					                   var $row = $('<tr>');
					                   var $icon = $('<img>').attr('src', '../common/images/iconSmallProject.png').attr('alt', '아이콘').css({ width: '13px', height: '13px' });
					                   var $link = $('<a>').attr('href', this.info[i].link).attr('target', '_self').text(' '+this.info[i].text);
					                   var $cell = $('<td>').append($icon).append($link);
					                   $row.append($cell);
					                   $table.append($row);
					                 }
					                 $div.append($table);
					               }			        	 
					        }
					      }		    
					  }
				 	},
			        series: [
			            {
			                data,
			                keys: ['hc-key', 'color', 'info','countryName', 'custom', 'nation2'],			                
			                name: 'Coffee',
			                
			                dataLabels: {
			                		enabled: true,
				                    format: '{#if (gt point.custom.arrival 0)}' +
				                    	'<b style="font-size:14px">{point.nation2}</b>&nbsp;({point.custom.arrival})' +
				                    	'{/if}'
				                    ,
				                    verticalAlign: 'middle',
				                    allowOverlap: true,
				                    align: "center",
				            }
			            }/* 추가코드는 뒤에 ,찍고 작성 */
			        ] //series 닫히는 괄호
			    });
			
			    
			})();
			
function fnCheckLink(dom, e) {
	if ( dom.target === "" )
	{
		e.preventDefault();
// 		return false;
	}
	else if ( dom.href.indexOf("decProjectUI.jsp") > -1 )
	{
		alert("<emxUtil:i18n localize="i18nId">emxProgramCentral.Msg.DashboardURLIsNotDefined</emxUtil:i18n>");
		e.preventDefault();
// 		return false;
	}
	
	return false;
}			

function resetMapWidth() {
	let mapWidth = null;
	let windowWidth = window.innerWidth;
	let tableWidth = $("#projectInfoTable").width();
	mapWidth = windowWidth - tableWidth;
	$("#container").width(mapWidth);
}

$(top.document).find("#panelToggle").trigger("click");
resetMapWidth();

// 화면 크기에 따라 맵과 프로젝트 대표 이미지 크기 가변적으로 처리
window.addEventListener("resize", resetMapWidth);

//added by thok 2023.08.16 [S]
<%
if(unReadRequestMail){
%>
	var url = '<%=mailUrl%>';
	var confirmMsg = confirm("<emxUtil:i18nScript localize="i18nId">emxProgramCentral.Alert.RequestMailExist</emxUtil:i18nScript>");
	if(confirmMsg){
		showModalDialog(url, "760", "600");
	}
<%
}
%>
//added by thok 2023.08.16 [E]

//added by thok 2023.09.19 [S]
<%
if(unAcceptedRequest){
%>
	var url = '<%=requestURL%>';
	var confirmRequestMsg = confirm("<emxUtil:i18nScript localize="i18nId">emxProgramCentral.Alert.UnAcceptedRequest</emxUtil:i18nScript>");// 새로운 문의/제안 알람
	if(confirmRequestMsg){//확인시 이동
		parent.window.location.href = url;
	}
<%
}
%>
//added by thok 2023.09.19 [E]
      </script>
</body>
</html>
<%
}catch(Exception e){
	e.printStackTrace();
	throw e;
}
%>