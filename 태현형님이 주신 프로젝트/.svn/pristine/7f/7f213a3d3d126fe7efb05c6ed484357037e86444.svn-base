import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import com.daewooenc.export.ExportConfig;
import com.dec.util.DecDateUtil;
import com.dec.util.DecExcelUtil;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;

@SuppressWarnings({ "rawtypes", "unchecked" })
public class decCommonUtil_mxJPO {

	public Map generateRangeList(Context context, String[] args) throws Exception{
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			Map columnMap = (Map) programMap.get("columnMap");
			Map settingsMap = (Map) columnMap.get("settings");
			
			String rangeValueExpr = (String) settingsMap.get("Range Value");
			String rangeDisplayExpr = (String) settingsMap.get("Range Display");
			String rangeDelimiter = (String) settingsMap.get("Range Delimiter");
			
			rangeDisplayExpr = StringUtils.isNotEmpty(rangeDisplayExpr) ? rangeDisplayExpr : rangeValueExpr;
			rangeDelimiter = StringUtils.isNotEmpty(rangeDelimiter) ? rangeDelimiter : ",";
			
			StringList rangeValueList = FrameworkUtil.splitString(rangeValueExpr, rangeDelimiter);
			StringList rangeDisplayList = FrameworkUtil.splitString(rangeDisplayExpr, rangeDelimiter);
			
			Map rangeMap = new HashMap();
			rangeMap.put("field_choices", rangeValueList);
			rangeMap.put("field_display_choices", rangeDisplayList);
			
			return rangeMap;
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
	
	public Map export(Context context, String[] args) throws Exception{
		Map resultMap = new HashMap();
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			MapList objectList = (MapList) programMap.get("objectList");
			MapList columns = (MapList) programMap.get("columns");
			String mode = (String) programMap.get("exportMode");
			String exportTitle = (String) programMap.get("exportTitle");
			
			if ( StringUtils.isEmpty(exportTitle) ) 
			{
				exportTitle = mode;
			}
			String fileName = exportTitle + "_" + DecDateUtil.changeDateFormat(new Date(), "yyyyMMdd_HHmmss") + ".xlsx";
			
			List<ExportConfig> configList = null;
			switch (mode) {
			case "MaterialStatus":
				 decMaterial_mxJPO matJPO = new decMaterial_mxJPO();
				 configList = matJPO.getMaterialStatusExportConfig();
				break;

			default:
				break;
			}
			
			String filePath = context.createWorkspace() + File.separator + fileName;
			
//			resultMap = DecExcelUtil.write2Excel(objectList, configList, new File(filePath));
			resultMap = DecExcelUtil.write2Excel2(objectList, configList, new File(filePath));
			resultMap.put("filePath", filePath);
			resultMap.put("fileName", fileName);
		} catch (Exception e) {
			resultMap.put("result", "error");
			resultMap.put("msg", e.getMessage());
			e.printStackTrace();
		}
		return resultMap;
	}
	
}
