import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.util.*;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.*;

public class secondProject_mxJPO {
	public MapList findDocument(Context context, String[] args) throws Exception {
		StringList id = new StringList("id");
		return DomainObject.findObjects(context, "simpleType", "*", "", id);
	}
	// expand
	public MapList findRelatedDocument(Context context, String[] args) throws Exception {
		HashMap programMap = (HashMap)JPO.unpackArgs(args);
		String objectId = (String)programMap.get("objectId");
		StringList id = new StringList("id");
		return DomainObject.findObjects(context, "simpleType", "*", "id==" + objectId, id);
	}
	
	public MapList findProject2024Document(Context context, String[] args) throws Exception{
		StringList id = new StringList("id");
		return DomainObject.findObjects(context, "Type2024", "*", "", id);
	}
	
	public String showObject(Context context, String[] args) throws Exception {
		HashMap programMap = (HashMap)JPO.unpackArgs(args);
		HashMap requestMap = (HashMap)programMap.get("requestMap");
		String objectId = (String)requestMap.get("objectId");
		
		DomainObject obj = new DomainObject(objectId);
		String rObj = obj.getInfo(context, "from[simpleRelationship].to.id");
		String name = obj.getInfo(context, "from[simpleRelationship].to.name");
		
		DomainObject cObjId = new DomainObject(rObj);
		
		String strLink = "<a href=\"emxTree.jsp?targetLocation=popup";
		String sLink = strLink + "&amp;objectId=" + XSSUtil.encodeForJavaScript(context, rObj) + "&amp;name=" + XSSUtil.encodeForHTML(context, name) + "&amp;AppendParameters=true);\">";
		String strURL = sLink + name + "</a>";
		if(name == null) {
			return "";
		} else {
			return strURL;
		}
	}
	
	public Map objectConnect(Context context, String[] args) throws Exception {
		HashMap programMap = (HashMap)JPO.unpackArgs(args);
		HashMap hMap = new HashMap();
		
		DomainObject cObj = new DomainObject();
		String name = DomainObject.getAutoGeneratedName(context, "type_simpleType", "");
		
		cObj.createObject(context, "simpleType", name, "1", "simplePolicy", context.getVault().getName());
		
		// getInfo 해서 id가져와서 name 쪽에 id값을 넣어줘야함.
		String getId = (String)cObj.getInfo(context, "id");
		// key값이 id, value가 real Id
		hMap.put("id", getId);
		
		String connectObject = (String)programMap.get("connectObject");
		DomainObject cObject = new DomainObject(connectObject);
		
		String relationship = "simpleRelationship";
		DomainRelationship.connect(context, cObj, relationship, cObject);
		
		return hMap;
	}
	
	public MapList expandObject(Context context, String[] args) throws Exception {
		HashMap programMap = (HashMap)JPO.unpackArgs(args);
		String parentId = (String)programMap.get("parentId");
		String objectId = (String)programMap.get("objectId");
		
		StringList sList = new StringList();
		sList.add(DomainConstants.SELECT_ID);
		sList.add(DomainConstants.SELECT_NAME);

		String typeName = "Type2024";
		MapList mList = new MapList();
		if(parentId.equalsIgnoreCase(objectId)) {
			DomainObject dom = DomainObject.newInstance(context, parentId);
			mList = dom.getRelatedObjects(context,
					"simpleRelationship",
					typeName,
					sList, 
					null,
					false,
					true,
					(short) 1,
					null,
					null,
					0);
			
			return mList;
		} else {
			MapList resolutionMList = new MapList();
			
			String resolutionRel = "ResolutionRel2024";
			String resolutionTypeName = "ResolutionType2024";
			DomainObject resolutionId = DomainObject.newInstance(context, objectId);
			resolutionMList = resolutionId.getRelatedObjects(context,
					resolutionRel,
					resolutionTypeName,
					sList, 
					null,
					false,
					true,
					(short) 1,
					null,
					null,
					0);
			
			return resolutionMList;
		}
	}
	
	public int policySimplePolicyProcessReviewCheck(Context context, String[] args) throws Exception {
		final String getRelAtt = "relationship[ResolutionRel2024].attribute[checkStatus]";
		String id = args[0];
		
		StringList sList = new StringList();
		sList.add("id");
		sList.add(getRelAtt);
		
		DomainObject obj = new DomainObject(id);
		MapList mList = obj.getRelatedObjects(context,
				"simpleRelationship",
				"Type2024",
				sList,
				null,
				false,
				true,
				(short) 0, 
				null, 
				null, 
				0);
		
		String simplePOAId = "";
		for(Object o : mList) {
			Map map = (Map)o;
			String id2024 = (String)map.get("id");
			simplePOAId += id2024;
		}

		DomainObject dom = new DomainObject(simplePOAId);
		MapList cMList = dom.getRelatedObjects(context,
				"ResolutionRel2024",
				"ResolutionType2024",
				sList,
				null,
				false,
				true,
				(short) 0, 
				null, 
				null, 
				0);
		
		StringList checkList = new StringList();
		for(Object o : cMList) {
			Map map = (Map)o;
			String checkStatus = (String)map.get(getRelAtt);
			checkList.add(checkStatus);
		}
		
		for(int i = 0; i < checkList.size(); i++) {
			if(!checkList.get(i).equals("O")) {
				return 1;
			} 
		}
		return 0;
	}
	
	public int policySimplePolicyReviewCompleteAction(Context context, String[] args) throws Exception {
		String routeId = args[0];
		System.out.println("routeId : " + routeId);
		
		String Rel = "Object Route";
		String type = "simpleType";
		
		StringList sList = new StringList();
		sList.add("id");
		sList.add("current");
		
		DomainObject dom = new DomainObject(routeId);
		String routeCurrent = (String)dom.getInfo(context, "current");
		
		MapList mList = dom.getRelatedObjects(context,
				Rel,
				type,
				sList,
				null,
				true,
				false,
				(short) 0, 
				null, 
				null, 
				0);
		
		for(Object o : mList) {
			Map map = (Map)o;
			String parentId = (String)map.get("id");
			String parentCurrent = (String)map.get("current");
			
			DomainObject pId = new DomainObject(parentId);
			if(routeCurrent.equalsIgnoreCase("Complete") && parentCurrent.equalsIgnoreCase("Review")) {
				pId.promote(context);
			}
		}
		
		return 0;
	}
}
